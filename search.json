[{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 LightLogR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"The whole game","text":"data need part LightLogR package. unprocessed (device export) data light loggers (diary app capturing sleep times). data anonymous, can access following paths:","code":"path <- system.file(\"extdata\",                package = \"LightLogR\")  file.LL <- \"205_actlumus_Log_1020_20230904101707532.txt.zip\" file.env <- \"cyepiamb_CW35_Log_1431_20230904081953614.txt.zip\" file.sleep <- \"205_sleepdiary_all_20230904.csv\""},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"participant-light-logger-data","dir":"Articles","previous_headings":"Importing Data","what":"Participant Light Logger Data","title":"The whole game","text":"LightLogR provides convenient import functions range supported devices (use command supported_devices() want see devices supported present). LightLogR knows files devices structured, needs little input. fact, mere filepath suffice. , however, good idea also provide timezone argument tz specify measurements made Europe/Berlin timezone. makes data future-proof used comparison geolocations. Every light logger dataset needs Id connect separate observations different participant/device/study/etc. don´t provide Id import function (dataset doesn´t contain Id column), filename used Id. rather cumbersome case, use regex extract first three digits filename, serve purpose .  can see, import accompanied (hopefully) helpful message imported data. contains number ob measurements, timezone, start- enddate, timespan, observation intervals. case, measurements follow 10 second epoch. also get plotted overview data. case, particularly helpful, quickly helps assess different datasets compare one another timeline. deactivate plot setting auto.plot = FALSE import, create separately gg_overview() function. missing values deal first, dataset already good go. , e.g., want know range melanopic EDI (measure stimulus strength nonvisual system) every day dataset, can : goes visualization - always helpful get good look data immediately import. gg_day() function creates simple ggplot data, stacked vertically Days. function needs little input beyond dataset (fact, even work without size input, just makes default point size smaller, interactive command sends output plotly facilitate data exploration). gg_day() features lot flexibility, can adapted extended fit various needs, see shortly. can already see patterns features luminous exposure across days. general, participant seems woken (least started wearing light logger) 9:00 went bed (, , stopped wearing device) around 23:00.","code":"tz <- \"Europe/Berlin\" dataset.LL <- import$ActLumus(file.LL, path, auto.id = \"^(\\\\d{3})\", tz = tz) #>  #> Successfully read in 61'016 observations across 1 Ids from 1 ActLumus-file(s). #> Timezone set is Europe/Berlin. #> The system timezone is UTC. Please correct if necessary! #>  #> First Observation: 2023-08-28 08:47:54 #> Last Observation: 2023-09-04 10:17:04 #> Timespan: 7.1 days #>  #> Observation intervals:  #>   Id    interval.time     n pct   #> 1 205   10s           61015 100% dataset.LL %>% group_by(Date = as_date(Datetime)) %>%    summarize(range.MEDI = range(MEDI) %>% str_flatten(\" - \")) %>% gt() dataset.LL %>% gg_day(size = 0.25, interactive = TRUE)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"environmental-light-data","dir":"Articles","previous_headings":"Importing Data","what":"Environmental Light Data","title":"The whole game","text":"next dataset. one contains measurement data type device, recorded rooftop position unobstructed daylight roughly location participant data. device type , import well. since filename contain participant´s ID time, give manual id: \"CW35\".  can see follow roughly time span, measurement epoch 30 seconds, one odd interval one second shorter.","code":"dataset.env <- import$ActLumus(file.env, path, manual.id = \"CW35\", tz = tz) #>  #> Successfully read in 20'143 observations across 1 Ids from 1 ActLumus-file(s). #> Timezone set is Europe/Berlin. #> The system timezone is UTC. Please correct if necessary! #>  #> First Observation: 2023-08-28 08:28:39 #> Last Observation: 2023-09-04 08:19:38 #> Timespan: 7 days #>  #> Observation intervals:  #>   Id    interval.time     n pct   #> 1 CW35  29s               1 0%    #> 2 CW35  30s           20141 100%"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"participant-sleep-data","dir":"Articles","previous_headings":"Importing Data","what":"Participant Sleep Data","title":"The whole game","text":"last dataset sleep diary contains, among things, column Id column sleep wake (called offset). sleep diaries event datasets can vary widely structure, must manually set arguments. Importantly, need specify Datetimes structured. case, values like 28-08-2023 23:20, give structure dmyHM. need import coherent table contains column Datetime besides column State starts point time. import_Statechanges() facilitates , can provide vector column names form continuous indicator given state - case Sleep. Now imported data, need combine sensibly, get next section.","code":"dataset.sleep <-    import_Statechanges(file.sleep, path,                        Datetime.format = \"dmyHM\",                       State.colnames = c(\"sleep\", \"offset\"),                       State.encoding = c(\"sleep\", \"wake\"),                       Id.colname = record_id,                       sep = \";\",                       dec = \",\",                       tz = tz) #>  #> Successfully read in 14 observations across 1 Ids from 1 Statechanges-file(s). #> Timezone set is Europe/Berlin. #> The system timezone is UTC. Please correct if necessary! #>  #> First Observation: 2023-08-28 23:20:00 #> Last Observation: 2023-09-04 07:25:00 #> Timespan: 6.3 days #>  #> Observation intervals:  #>    Id    interval.time             n pct   #>  1 205   34860s (~9.68 hours)      1 8%    #>  2 205   35520s (~9.87 hours)      1 8%    #>  3 205   35700s (~9.92 hours)      1 8%    #>  4 205   36000s (~10 hours)        1 8%    #>  5 205   36900s (~10.25 hours)     1 8%    #>  6 205   37020s (~10.28 hours)     1 8%    #>  7 205   37920s (~10.53 hours)     1 8%    #>  8 205   45780s (~12.72 hours)     1 8%    #>  9 205   48480s (~13.47 hours)     1 8%    #> 10 205   49200s (~13.67 hours)     1 8%    #> # ℹ 3 more rows  dataset.sleep %>% head() %>% gt()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"connecting-data","dir":"Articles","previous_headings":"","what":"Connecting Data","title":"The whole game","text":"Connecting data, case, means giving context participant’s luminous exposure data. number hurdles attached connecting time series data, data different sets rarely align perfectly. Often measurements least seconds, even use different measurement epochs. Also, sleep data, time stamps whenever change status. Also - crucial - might missing entries! LightLogR provides helpful functions however, deal topics without resorting rounding averaging data common multiple.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"solar-potential","dir":"Articles","previous_headings":"Connecting Data","what":"Solar Potential","title":"The whole game","text":"Let us start environmental measurements unobstructed daylight. can seen natural potential luminous exposure thus serve reference participant´s luminous exposure. data2reference() function, create reference. function extraordinarily powerful can create reference tailored light logger data source wanted Reference column (case MEDI column, default), Datetime column, grouping structure (Id) light logger data set. data2reference() can even create reference subset data . example makes possible first (second, etc.) day data reference days. can apply one participant reference participants, even measurements different times. case necessary specify argument across.id = TRUE, want reference Id(“CW35”) applied across Id participant (“205”). sake example, also removed unnecessary data columns, makes code examples simpler. can already see table reference start measurements quite bit higher luminous exposure participant´s light logger. also see reference value applied three participant values. mirrors fact every three measurements taken participant device, one measurement epoch environmental sensor passes. visualize newly reached reference data, can easily extend gg_day() dashed red reference line. Keep mind visualization still exploratory, investing heavily styling.  , warning missing values added. simply due fact every data point x-axis corresponding y-axis-value. two datasets largely align, fringes, especially last day, non-overlap. perform calculations based light logger data reference, keep mind timesteps present give non NA results. basic, graph already shows valuable information potential light stimulus compared actual exposure. morning hours, participant never reached significant light dose, luminous exposure evening regularly par daytime levels, especially 29th. Let us see measurements compare recommendations luminous exposure.","code":"dataset.LL <-    dataset.LL %>% data2reference(Reference.data = dataset.env, across.id = TRUE)  dataset.LL <-    dataset.LL %>% select(Id, Datetime, MEDI, Reference)  dataset.LL %>% head() %>% gt() dataset.LL %>%    gg_day(size = 0.25) + geom_line(aes(y=Reference), lty = 2, col = \"red\") #> Warning: Removed 707 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"recommended-light-levels","dir":"Articles","previous_headings":"Connecting Data","what":"Recommended Light levels","title":"The whole game","text":"Brown et al.(2022)1 provide guidance healthy, daytime dependent light stimuli, measured melanopic EDI: Throughout daytime, recommended minimum melanopic EDI 250 lux eye measured vertical plane approximately 1.2 m height (.e., vertical illuminance eye level seated). available, daylight used first instance meet levels. additional electric lighting required, polychromatic white light ideally spectrum , like natural daylight, enriched shorter wavelengths close peak melanopic action spectrum. evening, starting least 3 hours bedtime, recommended maximum melanopic EDI 10 lux measured eye vertical plane approximately 1.2 m height. help achieve , possible, white light spectrum depleted short wavelengths close peak melanopic action spectrum. sleep environment dark possible. recommended maximum ambient melanopic EDI 1 lux measured eye. case certain activities nighttime require vision, recommended maximum melanopic EDI 10 lux measured eye vertical plane approximately 1.2 m height. can see bedtime important factor determining timepoints three stages go effect. Luckily just happen sleep/wake data sleep diary hand. first step, convert timepoints state changes intervals participant awake asleep. sc2interval() function provides readily. case first entry sleep, can safely assume, day prior participant awake. take account starting.state = \"wake\" argument setting, implied participant awake midnight . first day data partial anyways, disregard . arguments sc2interval() refine interval creation. Probably important length.restriction, sets maximum length interval, default 24 hours. avoids implausibly long intervals one state highly likely caused implicit missing data misentries. Now can transform sleep/wake intervals intervals Brown recommendations. sleep_int2Brown() function facilitates . can see function fit 3 hour interval -every sleep wake phase, also recoded states. data can now applied light logger dataset. done interval2state() function2. already used function unknowingly, (alongside sc2interval()) hood data2reference(), making sure data reference set spread accordingly. Now column light logger dataset declares three state Brown et al. recommendation. another function, Brown2reference(), can one swoop add threshhold accompanied states check whether participant within recommendations . thing function needs name put recommended values - default go Reference, already used Solar exposition, put Reference.Brown. Brown2reference() added four columns, two shown table . third column contains text label type reference, sth. also added solar exposition fourth column contains difference actual mel EDI recommendations. Now let´s quick look result plot overview  Looking good far! next section, let us focus picking one day get styling. Based available data think 01/09 looks promising, variation day timeframes outside afternoon varied typical luminous exposure evening. can use filter_Date() function easily cut specific chunk data. also deactivate facetting function gg_day(), one day.","code":"dataset.sleep <- dataset.sleep %>% sc2interval() dataset.sleep %>% head() %>% gt() Brown.intervals <- dataset.sleep %>% sleep_int2Brown() Brown.intervals %>% head() %>% gt() dataset.LL <-    dataset.LL %>%    interval2state(     State.interval.dataset = Brown.intervals, State.colname = State.Brown) dataset.LL %>% tail() %>% gt() dataset.LL <- dataset.LL %>% Brown2reference(Brown.rec.colname = Reference.Brown) dataset.LL %>% select(!Reference.Brown.label, !Reference.Brown.difference) %>% tail() %>% gt() dataset.LL %>% #dataset   gg_day(size = 0.25) + #base plot   geom_line(aes(y=Reference), lty = 2, col = \"red\") + #solar reference   geom_line(aes(y=Reference.Brown), lty = 2, col = \"blue\") #Brown reference #> Warning: Removed 707 rows containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 4153 rows containing missing values or values outside the scale range #> (`geom_line()`). dataset.LL.partial <-  dataset.LL %>% #dataset   filter_Date(start = \"2023-09-01\", length = days(1)) #use only one day  solar.reference <-   geom_line(aes(y=Reference), lty = 2, col = \"red\") #solar reference brown.reference <-   geom_line(aes(y=Reference.Brown), lty = 2, col = \"blue\") #Brown reference  dataset.LL.partial  %>%    gg_day(size = 0.25, facetting = FALSE, y.scale = symlog_trans()) + #base plot   solar.reference + brown.reference"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"styling-data","dir":"Articles","previous_headings":"","what":"Styling Data","title":"The whole game","text":"Let us finish task exploring styling options graph. built dataset ended last section. use several functions processing steps, noted rarely specify arguments functions. due workflow LightLogR provides start finish. techniques section specific LightLogR, rather show can readily use data processed package work standard plotting function. Firstly, though, let us slightly tweak y-axis.","code":"scale.correction <- coord_cartesian(   xlim = c(0, 24.5*60*60), #make sure the x axis covers 24 hours (+a bit for the label)   expand = FALSE)  #set the axis limits exactly at ylim and xlim"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"participants-luminous-exposure","dir":"Articles","previous_headings":"Styling Data","what":"Participants luminous exposure","title":"The whole game","text":"default, gg_day() uses point geom data display. can, however, play around geoms. geom_point geom_line geom_ribbon geom_boxplot geom_bin2d  standard behavior gg_day(). specify geom = \"point\" case, verbose communicate specify argument.  line geom shows changes luminous exposure bit better might better choice case.  geom_area fills area 0 given value. reason, however, slow unfortunately doesn´t work nicely purely logarithmic plots (10^0 = 1, start 13). can, however, disable geom gg_day() geom = \"blank\" instead add geom_ribbon can force-based zero ymin = 0. Setting geom = \"ribbon\" automatically behind scenes fast.  create boxplot representation, need specify geom also time interval want boxplot span. cut_Datetime() function LightLogR comes rescue. round datetimes desired interval, can specified group argument gg_day(). can nice representation, don´t think fits goal overall figure specific case.  geom family hex, bin2d, density_2d particularly well suited many, possibly overlaying observations. reduces complexity cutting x- y-axis bins counts many observations fall within bin. choosing 24 bins, see dominant values every hour day. jco_color = FALSE argument necessary disable default discrete color scheme gg_day(), continuous scale necessary counts densities. Finally, use aes_fill = stat(count) argument color bins according number observations bin4.","code":"dataset.LL.partial  %>%    gg_day(     size = 0.25, geom = \"point\", facetting = FALSE) + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    gg_day(     size = 0.25, facetting = FALSE, geom = \"line\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    cut_Datetime(unit = \"30 minutes\") %>% #provide an interval for the boxplot   gg_day(size = 0.25, facetting = FALSE, geom = \"boxplot\", group = Datetime.rounded) + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>% gg_day(   size = 0.25, facetting = FALSE, geom = \"bin2d\",    jco_color = FALSE, bins = 24, aes_fill = stat(count)) + #base plot   solar.reference + brown.reference + scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"section","dir":"Articles","previous_headings":"","what":"The whole game","title":"The whole game","text":"Conclusion: line ribbon geom seem like good choice task. However, high resolution data (10 seconds) makes line noisy. Sometimes level detail good, figure give general representation luminous exposure, aggregate data somewhat. can use similar function boxplot, aggregate_Datetime() use aggregate data desired resolution. sensible defaults handle numeric (mean), logical character (represented) data, can adjusted. sake example, let´s wrap aggregate function additional code recalculate Brown_recommendations, default numeric aggregation fine measurement data, make sense Brown_recommendations column.","code":"aggregate_Datetime2 <- function(...) {   aggregate_Datetime(...) %>% #aggregate the data   select(-Reference.Brown) %>% #remove the rounded    Brown2reference(Brown.rec.colname = Reference.Brown) #recalculate the brown times     }"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"data-aggregation","dir":"Articles","previous_headings":"Styling Data","what":"Data aggregation","title":"The whole game","text":"new aggregate function, let us taste variants: None 1 Minute 5 Minutes 30 Minutes 1 Hour","code":"dataset.LL.partial  %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial %>% aggregate_Datetime2(unit = \"1 min\")  %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial %>% aggregate_Datetime2(unit = \"5 mins\")  %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial %>% aggregate_Datetime2(unit = \"30 mins\") %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial %>% aggregate_Datetime2(unit = \"1 hour\")  %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   solar.reference + brown.reference + scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"section-1","dir":"Articles","previous_headings":"","what":"The whole game","title":"The whole game","text":"Conclusion: 1 minute aggregate still pretty noisy, whereas 30 minutes 1 hour steps rough. 5 Minutes seem good balance.","code":"Plot <-  dataset.LL.partial %>% aggregate_Datetime2(unit = \"5 mins\")  %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.25,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   brown.reference + scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"solar-potential-1","dir":"Articles","previous_headings":"Styling Data","what":"Solar Potential","title":"The whole game","text":"Let us focus next solar potential harnessed participant. several choices represent . geom_line geom_ribbon second plot  base representation solar exposure. bad one . Let’s keep run know.  ribbon shows missed - night exceeded - potential due daylight.  plot requires bit preparation, focuses nicely unrealized daylight potential. reasons clarity, line color Brown recommendation changed blue red.","code":"Plot +    geom_line(aes(y=Reference), lty = 2, col = \"red\") #solar reference Plot +    geom_ribbon(aes(ymin = MEDI, ymax=Reference), alpha = 0.25, fill = \"#0073C2FF\") #solar reference #Note: This will become a function of its own in LightLogR at some point in the future  Plot_upper <-  dataset.LL.partial %>% aggregate_Datetime2(unit = \"5 mins\") %>%    gg_day(facetting = FALSE, geom = \"ribbon\", alpha = 0.25, size = 0.4,          fill = \"#EFC000\", color = \"#EFC000\") + #base plot   geom_line(aes(y=Reference.Brown), lty = 2, col = \"red\") + #Brown reference   geom_line(aes(y=Reference), col = \"#0073C2FF\", size = 0.4) + #solar reference   labs(x = NULL) +  #remove the x-axis label   scale.correction  Plot_lower <-  dataset.LL.partial %>% aggregate_Datetime2(unit = \"5 mins\") %>%    gg_day(facetting = FALSE, geom = \"blank\", y.axis.label = \"unrealized Potential\") + #base plot   geom_area(     aes(y = Reference - MEDI,          group = consecutive_id((Reference - MEDI) >= 0),          fill = (Reference - MEDI) >= 0,          col = (Reference - MEDI) >= 0),      alpha = 0.25, outline.type = \"upper\") +    guides(fill = \"none\", col = \"none\") +    geom_hline(aes(yintercept = 0), lty = 2) +      scale_fill_manual(values = c(\"#EFC000\", \"#0073C2\")) +      scale_color_manual(values = c(\"#EFC000\", \"#0073C2\")) +    scale.correction #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  Plot_upper / Plot_lower #set up the two plots"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"section-2","dir":"Articles","previous_headings":"","what":"The whole game","title":"The whole game","text":"Conclusion: second plot option nice, focuses one aspect - missed unrealized potential. geom_ribbon variant still includes information, general, exactly want .","code":"Day.end <- as_datetime(\"2023-09-01 23:59:59\", tz = tz) Plot <-  dataset.LL.partial %>%    aggregate_Datetime2(unit = \"5 mins\") %>% filter_Datetime(end = Day.end) %>%    gg_day(facetting = FALSE, geom = \"blank\", y.axis.breaks = c(0, 10^(0:5), 250)) + #base plot     geom_ribbon(aes(ymin = MEDI, ymax=Reference),                alpha = 0.25, fill = \"#0073C2FF\",               outline.type = \"upper\", col = \"#0073C2FF\", size = 0.15) + #solar reference   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.30, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.4) + #ribbon geom   scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"brown-recommendations","dir":"Articles","previous_headings":"Styling Data","what":"Brown Recommendations","title":"The whole game","text":"Brown recommendations add layer complexity, specify threshold reached exceeded, depending time day. can tackle aspect several ways. case, y-axis reflect datime threshhold value 250 lx. already considered y.axis.breaks argument code chunk . geom_line geom_rect geom_point  variant representation used throught document. Since luminous exposure daylight levels distinct terms color, however, line stay black.   geom_area function can draw target areas values.  approach uses conditional coloration points, depending whether personal luminous exposure within recommended limits.","code":"Plot +    geom_line(aes(y=Reference.Brown), lty = 2, size = 0.4, col = \"grey15\") #Brown reference #This section will be integrated into a LightLogR function in the future Day.start <- as_datetime(\"2023-09-01 00:00:00\", tz = tz) Day.end <- as_datetime(\"2023-09-01 23:59:59\", tz = tz) Interval <- lubridate::interval(start = Day.start, end = Day.end, tzone = tz) Brown.times <-    Brown.intervals %>%    filter(Interval %>% int_overlaps(.env$Interval)) %>%    mutate(ymin = case_match(State.Brown,                            \"night\"  ~ 0,                            \"day\" ~ 250,                            \"evening\" ~ 0),          ymax = case_match(State.Brown,                            \"night\"  ~ 1,                            \"day\" ~ Inf,                            \"evening\" ~ 10),          xmin = int_start(Interval),          xmax = int_end(Interval),          xmin = if_else(xmin < Day.start, Day.start, xmin)  %>% hms::as_hms(),          xmax = if_else(xmax > Day.end, Day.end, xmax) %>% hms::as_hms()          )  recommendations <-    geom_rect(     data = Brown.times,      aes(xmin= xmin, xmax = xmax, ymin = ymin, ymax = ymax),      inherit.aes = FALSE,     alpha = 0.15,     fill = \"grey35\")  Plot2 <- Plot Plot2$layers <- c(recommendations, Plot2$layers) Plot2 Plot2+geom_line(aes(y=Reference.Brown), lty = 2, size = 0.4, col = \"grey35\") Plot +    geom_point(aes(col = Reference.Brown.check), size = 0.5)+   geom_line(aes(y=Reference.Brown), lty = 2, size = 0.4, col = \"grey60\") + #Brown reference   scale_color_manual(values = c(\"grey50\", \"#EFC000\"))+   guides(color = \"none\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"section-3","dir":"Articles","previous_headings":"","what":"The whole game","title":"The whole game","text":"Conclusion: geom_point solution combines lot information designwise slim figure uses two colors (+grey) get many points across.","code":"Plot <-  Plot +    geom_point(aes(col = Reference.Brown.check), size = 0.5)+   geom_line(aes(y=Reference.Brown,                  # group = consecutive_id(State.Brown)                 ),              col = \"grey40\",             lty = 2, size = 0.4) + #Brown reference   scale_color_manual(values = c(\"grey50\", \"#EFC000\"))+   guides(color = \"none\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Day.html","id":"final-touches","dir":"Articles","previous_headings":"Styling Data","what":"Final Touches","title":"The whole game","text":"figure needs final touches can use , namely labels. Automatic guides labels work well use color palettes. , mostly specified coloring . Thus disabled automatic guides. Instead solve trough annotations.  concludes task. gone importing multiple source files final figure ready used publication. LightLogR facilitated importing processing steps also enabled us test various decisions, like choice geom time.aggregation.","code":"x <- 900  Brown.times <-    Brown.times %>%    mutate(xmean = (xmax - xmin)/2 + xmin,          label.Brown = case_match(State.Brown,                                   \"night\" ~ \"sleep\",                                   \"evening\" ~ \"pre-bed\",                                   .default = State.Brown))  Plot +    # geom_vline(data = Brown.times[-1,],   #            aes(xintercept = xmin), lty = 2, col = \"grey40\", size = 0.4) + #adding vertical lines   geom_label(data = Brown.times[-4,],               aes(x = xmean, y = 0.3, label = label.Brown),               col = \"grey40\", alpha = 0.75) + #adding labels   annotate(\"rect\", fill = \"white\", xmin = 0, xmax = 7.5*60*60,             ymin = 2500, ymax = 60000)+   annotate(\"text\", x=x, y = 1.7, label = \"Brown et al. (2022)\",             hjust = 0, col = \"grey25\")+   annotate(\"text\", x=x, y = 40000, label = \"- Exposure within\",             hjust = 0, col = \"#EFC000\")+   annotate(\"text\", x=x, y = 19500, label = \"  recommended levels or\",             hjust = 0, col = \"black\")+   annotate(\"text\", x=x, y = 10000, label = \"  outside\",             hjust = 0, col = \"grey50\")+   annotate(\"text\", x=x, y = 4000, label = \"- Daylight Potential\",             hjust = 0, col = \"#0073C2DD\") ggplot2::ggsave(\"images/Day.png\", width = 7, height = 4, dpi = 600)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"from-which-devices-can-i-import-data","dir":"Articles","previous_headings":"","what":"From which devices can I import data?","title":"Import & cleaning","text":"LightLogR aims provide standard import routines devices used research personal light exposure. Currently, following devices supported: Information devices can found reference import_Dataset().","code":"supported_devices() #>  [1] \"Actiwatch_Spectrum\"    \"Actiwatch_Spectrum_de\" \"ActLumus\"              #>  [4] \"ActTrust\"              \"Circadian_Eye\"         \"DeLux\"                 #>  [7] \"GENEActiv_GGIR\"        \"Kronowise\"             \"LiDo\"                  #> [10] \"LightWatcher\"          \"LIMO\"                  \"LYS\"                   #> [13] \"MotionWatch8\"          \"nanoLambda\"            \"OcuWEAR\"               #> [16] \"Speccy\"                \"SpectraWear\"           \"VEET\""},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"what-if-my-device-is-not-listed","dir":"Articles","previous_headings":"From which devices can I import data?","what":"What if my device is not listed?","title":"Import & cleaning","text":"using device currently supported, please contact developers. always looking expand range supported devices. easiest trackable way get contact opening new issue Github repository. Please also provide sample file data, can test import function.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"what-if-my-device-is-listed-but-the-import-does-not-work-as-expected","dir":"Articles","previous_headings":"From which devices can I import data?","what":"What if my device is listed but the import does not work as expected?","title":"Import & cleaning","text":"regularly find files exported device model can differ structure. may due different settings, software hardware updates. encounter problems import, please get contact us, e.g. opening issue Github repository. Please provide sample file data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"are-there-other-ways-to-import-data","dir":"Articles","previous_headings":"From which devices can I import data?","what":"Are there other ways to import data?","title":"Import & cleaning","text":"Yes. LightLogR simply requires data.frame column containing datetime formatted data. Even light data column strictly necessary, LightLogR optimized , restricted , light data. , Id column used functions distinguish different participants. make life easier using functions LightLogR, datetime column named Datetime, id column Id, , present, melanopic EDI light information MEDI. Lastly, can modify add import functions build upon LightLogRs import functionality. See last chapter article information .","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing data","title":"Import & cleaning","text":"first step every analysis data import. work data collected part Master Thesis Insights real-world human light exposure: relating self-report eye-level light logging Carolina Guidolin (2023). data stored 17 text files data/ folder. can access data LightLogR GitHub repository. Next require time zone data collection. uncertain time zones valid, use OlsonNames() function. data collected “Europe/Berlin” time zone. Lastly, participant Ids stored file names. extract store column called Id. following code defines pattern regular expression, extract first three digits file name. Now can import data. Data collected ActLumus device Condor Instruments. right way specify import function.","code":"path <- \"data\" files <- list.files(path, full.names = TRUE) #show how many files are listes length(files) #> [1] 17 #first six time zones from OlsonNames() head(OlsonNames()) #> [1] \"Africa/Abidjan\"     \"Africa/Accra\"       \"Africa/Addis_Ababa\" #> [4] \"Africa/Algiers\"     \"Africa/Asmara\"      \"Africa/Asmera\"  #our time zone tz <- \"Europe/Berlin\" pattern <- \"^(\\\\d{3})\" data <- import$ActLumus(files, tz = tz, auto.id = pattern, print_n=33) #>  #> Successfully read in 1'034'650 observations across 17 Ids from 17 ActLumus-file(s). #> Timezone set is Europe/Berlin. #> The system timezone is UTC. Please correct if necessary! #> Observations in the following 2 file(s) cross to or from daylight savings time (DST):  #> 221_actlumus_Log_1607_20231030121531432 #> 222_actlumus_Log_1020_20231030140039534 #> Please make sure that the timestamps in the source files correctly reflect these changes from DST<>ST.  #> To adjust datetimes after a jump, set `dst_adjustment = TRUE` or see `?dst_change_handler` for manual adjustment. #>  #> First Observation: 2023-08-14 10:55:21 #> Last Observation: 2023-10-30 15:00:32 #> Timespan: 77 days #>  #> Observation intervals:  #>    Id    interval.time              n pct   #>  1 201   10s                    60042 100%  #>  2 202   10s                    59957 100%  #>  3 204   10s                    61980 100%  #>  4 205   10s                    61015 100%  #>  5 206   10s                    60691 100%  #>  6 206   23s                        1 0%    #>  7 206   59575s (~16.55 hours)      1 0%    #>  8 208   10s                    59853 100%  #>  9 209   10s                    60084 100%  #> 10 210   10s                    60701 100%  #> 11 212   10s                    59478 100%  #> 12 213   10s                    59720 100%  #> 13 214   10s                    61836 100%  #> 14 214   16s                        1 0%    #> 15 214   1197207s (~1.98 weeks)     1 0%    #> 16 215   7s                         1 0%    #> 17 215   10s                    60707 100%  #> 18 216   10s                    61760 100%  #> 19 216   19s                        1 0%    #> 20 216   240718s (~2.79 days)       1 0%    #> 21 218   8s                         1 0%    #> 22 218   10s                    60929 100%  #> 23 218   11s                        1 0%    #> 24 219   9s                         1 0%    #> 25 219   10s                    61634 100%  #> 26 219   16s                        1 0%    #> 27 219   583386s (~6.75 days)       1 0%    #> 28 221   9s                         1 0%    #> 29 221   10s                    62340 100%  #> 30 221   19s                        1 0%    #> 31 221   3610s (~1 hours)           1 0%    #> 32 222   10s                    61890 100%  #> 33 222   3610s (~1 hours)           1 0%"},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"my-import-is-slow--why-is-that-and-can-i-speed-it-up","dir":"Articles","previous_headings":"Importing data","what":"My import is slow. Why is that and can I speed it up?","title":"Import & cleaning","text":"several possibilities, import slow. common reasons : data files simply large. short measurement intervals, many participants, long measurement periods, files single study can easily reach several gigabytes. takes time import ok. data files contain many gaps. import, LightLogR checks visualizes gaps data. Especially large datasets small intervals contain many gaps, can slow import process. device model importing non-consistent data structures. devices varying number rows actual data starts. means small portion every file read correct starting row found. can slow import process many files. experiencing slow imports, can try following: read part datasets, split dataset several pieces, gets loaded separately. can combine afterwards join_datasets(). many gaps data, can set auto.plot = FALSE import function. eliminate call gg_overview(), calculates visualizes gaps data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"data-cleaning-1","dir":"Articles","previous_headings":"","what":"Data cleaning #1","title":"Import & cleaning","text":"can dive analysis part, need make sure clean dataset. import summary shows us two problems data: two files data crosses daylight saving time (DST) changes. ActLumus device adjust DST, need correct . Multiple Ids single datapoints beginning dataset gaps actual data collection starts. test measurements check equipment, must removed dataset. Let us first deal DST change. LightLogR -built function correct import. thus re-import data, make import silent clutter output. second problem requires filtering certain Ids. filter_Datetime_multiple() function ideal . can provide length (1 week), starting end data collection backwards. variable arguments provide variable arguments filter function, provided list form expressions quoted throughquote(). Fixed arguments, like length andlength_from_start\\ provided named arguments specified , Ids. Let’s look data gg_overview() function.  Looks much better now. Also, longer hint gaps lower right corner, can sure gaps removed. function gap_finder() shows us, however, still irregularities data function count_difftime() reveals . means look take care irregularities Ids 215, 218, 221.","code":"data <-    import$ActLumus(files, tz = tz, auto.id = pattern, dst_adjustment = TRUE, silent = TRUE) data <-    data %>%    filter_Datetime_multiple(     arguments = list(       list(only_Id = quote(Id == 216)),       list(only_Id = quote(Id == 219)),       list(only_Id = quote(Id == 214)),       list(only_Id = quote(Id == 206))     ), length = \"1 week\", length_from_start = FALSE) data %>% gg_overview() data %>% gap_finder() #> Found 183580 gaps. 847054 Datetimes fall into the regular sequence. data %>% count_difftime() %>% print(n=22) #> # A tibble: 22 × 3 #> # Groups:   Id [17] #>    Id    difftime       n #>    <fct> <Duration> <int> #>  1 221   10s        62341 #>  2 204   10s        61980 #>  3 222   10s        61891 #>  4 205   10s        61015 #>  5 218   10s        60929 #>  6 215   10s        60707 #>  7 210   10s        60701 #>  8 206   10s        60479 #>  9 214   10s        60479 #> 10 216   10s        60479 #> 11 219   10s        60479 #> 12 209   10s        60084 #> 13 201   10s        60042 #> 14 202   10s        59957 #> 15 208   10s        59853 #> 16 213   10s        59720 #> 17 212   10s        59478 #> 18 215   7s             1 #> 19 218   8s             1 #> 20 218   11s            1 #> 21 221   9s             1 #> 22 221   19s            1"},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"data-cleaning-2","dir":"Articles","previous_headings":"","what":"Data cleaning #2","title":"Import & cleaning","text":"Let us first visualize irregularities . can use gg_days() .  irregular data appear beginning data collection. interestet one whole week data, can similarly apply one week filter Ids see removed irregular data points. data now clean can proceed analysis. dataset needed articles, save RDS file.","code":"#create two columns to show the irregularities and gaps for relevant ids difftimes <-    data %>%    filter(Id %in% c(215, 218, 221)) %>%   mutate(difftime = difftime(lead(Datetime), Datetime, units = \"secs\"),                   end = Datetime + seconds(difftime))  #visualize where those points are difftimes %>%    gg_days(geom = \"point\",            x.axis.breaks = ~Datetime_breaks(.x, by = \"2 days\" )   ) +   geom_rect(data = difftimes %>% filter(difftime !=10),             aes(xmin = Datetime, xmax = end, ymin = -Inf, ymax = Inf),             fill = \"red\", col = \"red\", linewidth = 0.2, alpha = 0.2) +     gghighlight(difftime != 10 | lag(difftime !=10)) data <-    data %>%    filter_Datetime_multiple(     arguments = list(       list(only_Id = quote(Id == 215)),       list(only_Id = quote(Id == 218)),       list(only_Id = quote(Id == 221))     ), length = \"1 week\", length_from_start = FALSE)  data %>% gap_finder() #> No gaps found data %>% count_difftime() %>% print(n=17) #> # A tibble: 17 × 3 #> # Groups:   Id [17] #>    Id    difftime       n #>    <fct> <Duration> <int> #>  1 204   10s        61980 #>  2 222   10s        61891 #>  3 205   10s        61015 #>  4 221   10s        60839 #>  5 210   10s        60701 #>  6 206   10s        60479 #>  7 214   10s        60479 #>  8 215   10s        60479 #>  9 216   10s        60479 #> 10 218   10s        60479 #> 11 219   10s        60479 #> 12 209   10s        60084 #> 13 201   10s        60042 #> 14 202   10s        59957 #> 15 208   10s        59853 #> 16 213   10s        59720 #> 17 212   10s        59478 # saveRDS(data, \"cleaned_data/ll_data.rds\")"},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"other-import-arguments","dir":"Articles","previous_headings":"Importing data: Miscellaneous","what":"Other import arguments","title":"Import & cleaning","text":"potentially important arguments locale argument - useful special characters data (e.g. German ü ä) recognized default locale. Look readr::default_locale() information. ... argument passed whichever import function used data. devices, also used provide additional information, column_names Actiwatch devices, differ depending language setting device software. Whether device requires additional information can found import documentation (see import_Dataset()).","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"other-ways-to-call-import","dir":"Articles","previous_headings":"Importing data: Miscellaneous","what":"Other ways to call import","title":"Import & cleaning","text":"Instead using import function described (import$device()), can also use function import_Dataset() specify device character string first argument. might useful want import data programmatically different devices, e.g., purrr::map() function. supported_devices() accepted function. example: way, end list two dataframes, one ActLumus data one Speccy data.","code":"devices <- c(\"ActLumus\", \"Speccy\") files_AL <- c(\"path/to/ActLumus/file1.csv\", \"path/to/ActLumus/file2.csv\") files_Sy <- c(\"path/to/Speccy/file1.csv\", \"path/to/Speccy/file2.csv\") tz <- \"Europe/Berlin\"  data <- purrr::map2(devices, list(files_AL, files_Sy), import_Dataset, tz = tz)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Import.html","id":"creating-your-own-import-function","dir":"Articles","previous_headings":"Importing data: Miscellaneous","what":"Creating your own import function","title":"Import & cleaning","text":"Note: section advanced users . familiar expressions R manipulate . LightLogR comes number custom import routines different devices, implemented main import function, covers general aspects also creates summary overview. like write custom import function, LightLogR covered. First, can see makes import functions tick looking included data set ll_import_expr(). list individual routines. Let’s look ActLumus routine can see, rather simple, just lines code. can write expression create import function . expression create data variable contains import script files. end expression, data variable contain imported dataset include correctly formatted Datetime column, complete correct timezone. create variation old routine, just adds short message: can now create new import function expression. function called import$ActLumus_new(). Let us now import file previous dataset, setting main summary plotting function silent","code":"ll_import_expr()$ActLumus #> { #>     data <- suppressMessages(readr::read_delim(filename, skip = 32,  #>         delim = \";\", n_max = n_max, col_types = paste0(\"c\", paste0(rep(\"d\",  #>             32), collapse = \"\")), id = \"file.name\", locale = locale,  #>         name_repair = \"universal\", ...)) #>     data <- data %>% dplyr::rename(Datetime = DATE.TIME, MEDI = MELANOPIC.EDI) %>%  #>         dplyr::mutate(Datetime = Datetime %>% lubridate::dmy_hms(tz = tz)) #> } new_import_expr <- ll_import_expr() new_import_expr$ActLumus_new <- new_import_expr$ActLumus new_import_expr$ActLumus_new[[4]] <-    rlang::expr({ cat(\"**Congratulation, you made a new import function**\\n\")   data   }) new_import_expr$ActLumus_new #> { #>     data <- suppressMessages(readr::read_delim(filename, skip = 32,  #>         delim = \";\", n_max = n_max, col_types = paste0(\"c\", paste0(rep(\"d\",  #>             32), collapse = \"\")), id = \"file.name\", locale = locale,  #>         name_repair = \"universal\", ...)) #>     data <- data %>% dplyr::rename(Datetime = DATE.TIME, MEDI = MELANOPIC.EDI) %>%  #>         dplyr::mutate(Datetime = Datetime %>% lubridate::dmy_hms(tz = tz)) #>     { #>         cat(\"**Congratulation, you made a new import function**\\n\") #>         data #>     } #> } import <- import_adjustment(new_import_expr) data <- import$ActLumus_new(files[1], tz = tz, auto.id = pattern,                           auto.plot = FALSE, silent = TRUE) #> **Congratulation, you made a new import function**"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"Metrics","text":"use data imported cleaned already article Import & Cleaning. can seen using gg_overview(), dataset contains 17 ids one weeks worth data , one three participants per week.","code":"data <- readRDS(\"cleaned_data/ll_data.rds\") data %>% gg_overview()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"metric-principles","dir":"Articles","previous_headings":"","what":"Metric principles","title":"Metrics","text":"lot metrics associated personal light exposure. can find function reference appropriate reference section. important distinctions metrics important understand: metrics require work best specific time frame, usually one day, others calculated arbitrary length time. example, function interdaily_stability() calculates metric multiple days, function like midpointCE() calculates midpoint cumulative light exposure within given time series - less useful multiple days, midpoint just time point days. E.g., two similar light exposure patterns across two days, midpoint cumulative light exposure across two days around midnight, particularly informative. Much sensible midpoint light exposure day. enable , data grouped within days (relevant time frames, like sleep/wake-phase). metrics submetrics within family actively chosen arguments function. example duration_above_threshold() , despite name also provides metrics duration threshold duration within threshold. Depending comparison argument, whether one two thresholds provided, function calculate different metrics. metric functions calculate multiple submetrics , like bright_dark_period(). stated , type function contains metrics accessible function argument, period case, allows specify whether brightest darkest periods day required. Independent , function calculate multiple submetrics , onset, midpoint, offset respective period, also mean light level period. cover practical considerations following aspects following sections. , every function documentation explicitly states whether different metrics accessible parameters, metrics calculated default. Note: metrics require complete regular data sensible output. metrics can handle missing data, generally advisable clean data calculating metrics. LightLogR helps identify gaps irregularities can also aggregate data larger intervals, can acceptable small gaps. cases larger gaps, dates participants might removed analysis.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"metric-calculation-basics","dir":"Articles","previous_headings":"","what":"Metric calculation: basics","title":"Metrics","text":"metric functions default agnostic type data. require vectors numeric data (e.g., light data) commonly also datetimes. means functions can used outside LightLogR framework, applied correctly. Let us try simple example days worth light data one participant across two functions.","code":"data_Id201 <- data %>% filter(Id == 201 & date(Datetime) == \"2023-08-15\") data_Id201 %>% gg_day()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"time-above-threshold-tat","dir":"Articles","previous_headings":"Metric calculation: basics","what":"Time above threshold (TAT)","title":"Metrics","text":"first example metric calculate time threshold (TAT) threshold 250 lx mel EDI. TAT calculated function duration_above_threshold(). Specifying argument comparison = \"\" calculate time threshold. specifying two thresholds calculate time within thresholds.","code":"duration_above_threshold(   Light.vector = data_Id201$MEDI,   Time.vector = data_Id201$Datetime,   threshold = 250 ) #> [1] \"34500s (~9.58 hours)\" duration_above_threshold(   Light.vector = data_Id201$MEDI,   Time.vector = data_Id201$Datetime,   threshold = 250,   comparison = \"below\" ) #> [1] \"51900s (~14.42 hours)\" duration_above_threshold(   Light.vector = data_Id201$MEDI,   Time.vector = data_Id201$Datetime,   threshold = c(10,250) ) #> [1] \"15320s (~4.26 hours)\""},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"brightest-10-hours-of-the-day-l10","dir":"Articles","previous_headings":"Metric calculation: basics","what":"Brightest 10 hours of the day (L10)","title":"Metrics","text":"second example metric yields multiple submetrics . function bright_dark_period() calculates brightest darkest periods day. default, calculates brightest 10 hour period day. setting as_df = TRUE, function return data frame can pipe gt() nice output","code":"bright_dark_period(   Light.vector = data_Id201$MEDI,   Time.vector = data_Id201$Datetime,   as.df = TRUE ) %>% gt()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"looping","dir":"Articles","previous_headings":"Metric calculation: basics > Brightest 10 hours of the day (L10)","what":"Looping","title":"Metrics","text":"Calculating darkest period day tricky, likely traverses midnight. following code can see darkest 10-hour period day begins midnight ends 10 , coincidental. (Note commonly, darkest 5-hour period calculated. deviate make point.) also see makes little sense, visualize portion. yellow color indicates darkest 10-hour period day.  solve , bright_dark_period() functions option loop day. plausible, can also visualized easily.","code":"M10_wrong <-  bright_dark_period(   Light.vector = data_Id201$MEDI,   Time.vector = data_Id201$Datetime,   as.df = TRUE,   period = \"darkest\",   timespan = \"10 hours\" ) M10_wrong %>% gt() Onset <- M10_wrong$darkest_10h_onset Offset <- M10_wrong$darkest_10h_offset  data_Id201 %>%    gg_day(aes_col = Datetime >= Onset & Datetime <= Offset) +   guides(color = \"none\") M10 <-  bright_dark_period(   Light.vector = data_Id201$MEDI,   Time.vector = data_Id201$Datetime,   as.df = TRUE,   period = \"darkest\",   timespan = \"10 hours\",   loop = TRUE ) M10 %>% gt() Onset <- M10$darkest_10h_onset Offset <- M10$darkest_10h_offset  data_Id201 %>%    gg_day(aes_col = Datetime >= Onset | Datetime <= Offset) +   guides(color = \"none\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"metric-calculation-advanced","dir":"Articles","previous_headings":"","what":"Metric calculation: advanced","title":"Metrics","text":"often , metrics calculated many participants prolonged periods time. case, singular calculation shown inefficient. dplyr family dplyr::summarize() dplyr::reframe() make much easier.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"preparation","dir":"Articles","previous_headings":"Metric calculation: advanced","what":"Preparation","title":"Metrics","text":"want calculate metrics days full data, exclude Mondays data set.","code":"data <- data %>% dplyr::filter(weekdays(Datetime) != \"Monday\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"summarize","dir":"Articles","previous_headings":"Metric calculation: advanced","what":"Summarize","title":"Metrics","text":"dplyr::summarize() function used calculate metrics group data. following example, calculate Interdaily Stability () participants data set, giving us variability 24h light exposure patterns across full 6 days data compared average, ranging 0 (Gaussian noise) 1 (Perfect stability). brevity, first 6 Ids shown.","code":"data %>%    summarize(     IS = interdaily_stability(       Light.vector = MEDI,       Datetime.vector = Datetime     )   ) %>%    head() %>% gt()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"grouping","dir":"Articles","previous_headings":"Metric calculation: advanced","what":"Grouping","title":"Metrics","text":"default, data imported LightLogR grouped Id, represents individual participants. using dplyr family functions, grouping essential, specifies subgroups data metrics calculated. following example, calculate TAT 250 lx MEDI participants data set. show first 6 participants, becomes readily apparent time threshold 6 days might informative parametrization metric. Instead, can calculate TAT 250 lx MEDI participant day data. informative, allows us see metric changes time. final output first two Ids.","code":"data %>%    summarize(     TAT_250 = duration_above_threshold(       Light.vector = MEDI,       Time.vector = Datetime,       threshold = 250     )   ) %>% head() %>% gt() #create a new column in the data set with the weekday data$wDay <- wday(data$Datetime, label = TRUE, week_start = 1)  #group the data and calculate the metrics TAT_250 <-  data %>%    group_by(wDay, .add = TRUE) %>%    summarize(     TAT_250 = duration_above_threshold(       Light.vector = MEDI,       Time.vector = Datetime,       threshold = 250     ), .groups = \"drop_last\"   )  TAT_250 %>% head(12) %>% gt()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"metric-statistics","dir":"Articles","previous_headings":"Metric calculation: advanced","what":"Metric statistics","title":"Metrics","text":"dataframe TAT_250, can easily calculate statistics participant. can done manually, e.g., another call dplyr::summarize(), semi-automatic, e.g., packages like gtsummary. following example, calculate mean standard deviation TAT 250 lx MEDI participant, formatted HH:MM styling function.","code":"#styling formula for time style_time <- function(x, format = \"%H:%M\"){   x %>% as.numeric() %>%  hms::as_hms() %>% as.POSIXlt() %>% format(format) }  #Table output TAT_250 %>%    tbl_summary(by = Id, include = -wDay,                statistic = list(TAT_250 ~ \"{mean} ({sd})\"),                digits = list(TAT_250 ~ style_time),               label = list(TAT_250 = \"Time above 250 lx mel EDI\")               )"},{"path":"https://tscnlab.github.io/LightLogR/articles/Metrics.html","id":"metric-calculation-batch","dir":"Articles","previous_headings":"","what":"Metric calculation: batch","title":"Metrics","text":"final section, add metrics analysis, including ones multiple sub-metrics. , imagine want know metrics change first half experiment (August/September) second half (October/November). Finally, include column Time.data data set, used calculate metrics. column format excludes day information Datetime column, avoids date-related issues calculating mean metrics. Finally, unnest() call used flatten table dataframe substructure created MLIT250 TAT250. operation yields data frame six metrics across 102 participant days (6 days 17 participants). grouping Month add additional groups, participant day already solely \"Aug/Sep\" \"Oct/Nov\" group. Next, regroup data Month look summary table similar , metrics. need work metrics LightLogR. sure look documentation function understand parameters outputs reference section get overview available metrics.","code":"data <- data %>%    mutate(     Month = case_when(month(Datetime) %in% 8:9 ~ \"Aug/Sep\",                       month(Datetime) %in% 10:11 ~ \"Oct/Nov\")   ) %>%    create_Timedata()  metrics <-    data %>%    group_by(Month, Id, wDay) %>%    summarize(     MLIT250 =        timing_above_threshold(MEDI, Time.data, threshold = 250, as.df = TRUE),     TAT250 =        duration_above_threshold(MEDI, Time.data, threshold = 250, as.df = TRUE),     average_MEDI =        mean(MEDI),     light_exposure =        sum(MEDI)/360, # 10 second epochs means 360 epochs in one hour. dividing by 360 gives the light exposure in lx·h     .groups = \"drop_last\"     ) %>%    unnest(-Id)  #first 6 rows metrics %>% head() %>% gt() metrics <- metrics %>% group_by(Month) %>% select(-Id, -wDay)  #Table output metrics %>%    tbl_summary(by = Month,               statistic = list(all_continuous() ~ \"{mean} (±{sd})\"),               digits = list(                 c(                   mean_timing_above_250, first_timing_above_250,                    last_timing_above_250, duration_above_250                   ) ~ style_time),               label = list(                 mean_timing_above_250 =                    \"mean timing above 250 lx mel EDI (HH:MM)\",                 first_timing_above_250 =                    \"first time above 250 lx mel EDI (HH:MM)\",                 last_timing_above_250 =                    \"last time above 250 lx mel EDI (HH:MM)\",                 duration_above_250 = \"duration above 250 lx mel EDI (HH:MM)\",                 average_MEDI = \"average mel EDI (lx)\",                 light_exposure = \"light exposure (lx·h)\"                 )               )"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"Visualizations","text":"use data imported cleaned already article Import & Cleaning.","code":"data <- readRDS(\"cleaned_data/ll_data.rds\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"gg_overview","dir":"Articles","previous_headings":"","what":"gg_overview()","title":"Visualizations","text":"gg_overview() provides glance data available Id. Let’s call dataset.  can seen dataset contains 17 ids one weeks worth data , one three participants per week. gg_overview() default test whether gaps data show grey bars, well message lower right corner. Let us force behavior dataset removing two days.  Calculating gaps data can computationally expensive large datasets small epochs. just require overview data without concerned gaps, can provide empty tibble::tibble() gap.data argument. skip gap calculation speed graph generation.  Hint: gg_overview() automatically called import functions LightLogR, unless argument auto.plot = FALSE set. import slow, can also help speeding process.","code":"data %>% gg_overview() data %>%   filter(!(date(Datetime) %in% c(\"2023-08-16\", \"2023-08-17\"))) %>%    gg_overview() data %>%   filter(!(date(Datetime) %in% c(\"2023-08-16\", \"2023-08-17\"))) %>%    gg_overview(gap.data = tibble())"},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"basics","dir":"Articles","previous_headings":"gg_day()","what":"Basics","title":"Visualizations","text":"gg_day() compares days within dataset. default use date. Let’s call subset data. distinguish different Ids, can set aes_col argument Id.","code":"data %>%    filter(Id %in% c(205, 206)) %>%    gg_day(aes_col = Id, size = 0.5)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"facetting","dir":"Articles","previous_headings":"gg_day()","what":"Facetting","title":"Visualizations","text":"Note day represented facet, named date. can give Id facet using ggplot2::facet_wrap() function. Day.data column produced gg_day() contains structure daily facets. used facet_wrap() ensure facets shown correctly. also reduce breaks x-axis avoid overlap 00:00.","code":"data %>%    filter(Id %in% c(205, 206)) %>%    gg_day(aes_col = Id, size = 0.5,           x.axis.breaks = hms::hms(hours = c(0, 6, 12, 18))) +    guides(color = \"none\") +   facet_grid(rows = vars(Day.data), cols = vars(Id), switch = \"y\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"date-grouping","dir":"Articles","previous_headings":"gg_day()","what":"Date-grouping","title":"Visualizations","text":"Showing days date default behavior gg_day(). can also grouped formatting base::strptime(). Using format.day = \"%\" function call group output weekday. Putting many Participants facet makes plot unreadable, demonstrates gg_day() can configured combine observations different dates. provide different color scale compared default one, default 10 colors compared 17 need .","code":"data %>%    gg_day(aes_col = Id, size = 0.5, format.day = \"%A\") + scale_color_viridis_d() #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"customizing-geoms-and-miscellanea","dir":"Articles","previous_headings":"gg_day()","what":"Customizing geoms and miscellanea","title":"Visualizations","text":"gg_day() uses geom_point() default. can changed providing different geom function. use geom_line() connect points. make readable. Let us first recreate simpler version dataset filtering aggregating  Now can use different geom.  Also ribbon possible.","code":"data_subset <-    data %>%    filter(Id %in% c(205, 206)) %>% #choosing 2 ids   aggregate_Datetime(unit = \"15 mins\") %>% #aggregating to 15 min intervals   filter_Datetime(length = \"3 days\", full.day = TRUE) #restricting their length to 3 days  data_subset %>%  gg_day(aes_col = Id) data_subset %>%  gg_day(aes_col = Id, geom = \"line\") data_subset %>%     gg_day(aes_col = Id, aes_fill = Id, geom = \"ribbon\", alpha = 0.5)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"gg_days","dir":"Articles","previous_headings":"","what":"gg_days()","title":"Visualizations","text":"companion function gg_day(). Instead using individual days, create timeline days across Ids.  default, gg_days() always plot full days. Let us strip one participant data three days.  can see plots misaligned facets. can correct providing exact number days x.axis.limits argument. Datetime_limits() helper function LightLogR documentation reveals arguments.  gg_days() customization options gg_day(). customize plot ribbon, different naming breaks datetime axis.","code":"data_subset2 <-  data %>%    filter(Id %in% c(205, 216, 219)) %>% #choosing 2 ids   aggregate_Datetime(unit = \"15 mins\") #aggregating to 15 min intervals  data_subset2 %>%  gg_days() data_subset3 <-  data_subset2 %>%    filter(!(Id == 205 &               date(Datetime) %in% c(\"2023-08-28\", \"2023-08-29\", \"2023-08-30\")))  data_subset3 %>%  gg_days() data_subset3 %>%    gg_days(     x.axis.limits =        \\(x) Datetime_limits(x, length = ddays(7), midnight.rollover = TRUE)     ) data_subset3 %>%    gg_days(     geom = \"ribbon\", aes_col = Id, aes_fill = Id, alpha = 0.5, jco_color = TRUE,     x.axis.limits =        \\(x) Datetime_limits(x, length = ddays(7), midnight.rollover = TRUE),     x.axis.breaks =        \\(x) Datetime_breaks(x, by = \"6 hours\", shift = 0),     x.axis.format = \"%H\",     ) +   guides(color = \"none\", fill = \"none\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"gg_doubleplot","dir":"Articles","previous_headings":"","what":"gg_doubleplot()","title":"Visualizations","text":"gg_doubleplot() repeats days within plot, either horizontally vertically. Doubleplots generally useful visualize patterns center around midnight (horizontally) deviate 24-hour rhythms (vertically).","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"preparation","dir":"Articles","previous_headings":"gg_doubleplot()","what":"Preparation","title":"Visualizations","text":"use subset data used gg_day() : two Ids, aggregated 15-minute intervals, restricted three days. first day partly present Ids, use gap_handler() function fill implicitly missing data NA. ignore step, doubleplot incorrect, connect last point first day (around midnight) first point second day (somewhen noon), incorrect also looks bad.","code":"data_subset <- data_subset %>% gap_handler(full.days = TRUE)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"horizontal-doubleplot","dir":"Articles","previous_headings":"gg_doubleplot()","what":"Horizontal doubleplot","title":"Visualizations","text":"horizontal doubleplot activated default, one day present within provided groups, can set explicitly type = \"repeat\".  plot line thus day, plotted twice.","code":"data_subset %>%     gg_doubleplot(aes_fill = Id, jco_color = TRUE, type = \"repeat\") #identical: # data_subset %>% group_by(Date = date(Datetime), .add = TRUE) %>%  # gg_doubleplot(aes_fill = Id, jco_color = TRUE)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"vertical-doubleplot","dir":"Articles","previous_headings":"gg_doubleplot()","what":"Vertical doubleplot","title":"Visualizations","text":"vertical doubleplot activated default group one day. can set explicitly type = \"next\".  Note second day row first day next row. allows visualize non-24-hour rhythms, Entrainment lost due pathologies experimental conditions. Note x-axis labels change automatically depending whether doubleplot type \"next\" \"repeat\". cases (horizontally vertically) easy condense plots single line per day, ungrouping data structure (makes sense datetimes identical):","code":"data_subset %>%    gg_doubleplot(aes_fill = Id, jco_color = TRUE) #identical: # data_subset %>%  #  gg_doubleplot(aes_fill = Id, jco_color = TRUE, type = \"next\") data_subset %>% ungroup() %>%    gg_doubleplot(aes_fill = Id, jco_color = TRUE)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"aggregated-doubleplot","dir":"Articles","previous_headings":"gg_doubleplot()","what":"Aggregated doubleplot","title":"Visualizations","text":"Independent gg_doubleplot(), great concert aggregate_Date(), allows aggregate groups data single day . way, one can easily calculate average day participant group participants perform doubleplot (default type = \"next\"). Let us first group data whether participants first last two months experiment. Now can aggregate data single day per group make doubleplot . aggregate_Date() condense large dataset 10-second intervals single day two groups 15 minute interval. day assigned default median measurement day group.  can improve plot. First, overwrite default behavior setting specific (arbitrary) date groups. ungrouping data afterwards, can plot two groups single row, making two times easily comparable. Setting facetting = FALSE gets rid strip label, otherwise show (arbitrary) date.  clearly see now, daytime light exposure starts later ends earlier, lower daytime values overall. Conversely, nighttime light exposure increased second half experiment (Oct/Nov). using gg_doubleplot() feature, nighttime light pattern clearly visible even accross midnight.","code":"data_two_groups <- data %>%    mutate(     Month = case_when(month(Datetime) %in% 8:9 ~ \"Aug/Sep\",                       month(Datetime) %in% 10:11 ~ \"Oct/Nov\")   ) %>% group_by(Month) data_two_groups %>%    aggregate_Date(unit = \"15 mins\") %>%    gg_doubleplot(aes_fill = Month, jco_color = TRUE) +   guides(fill = \"none\") data_two_groups %>%    aggregate_Date(unit = \"15 mins\",                   date.handler = \\(x) as_date(\"2023-09-15\")                  ) %>%    ungroup() %>%    gg_doubleplot(aes_fill = Month, jco_color = TRUE, facetting = FALSE)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"interactivity","dir":"Articles","previous_headings":"","what":"Interactivity","title":"Visualizations","text":"plotting functions inbuilt option displayed interactively. great exploring data. plotly package used . LightLogR plotting functions interactive argument set FALSE default. Setting TRUE create interactive plot.","code":"data_subset %>%     gg_day(aes_col = Id, geom = \"line\",          interactive = TRUE          )"},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"non-light-properties","dir":"Articles","previous_headings":"Miscellaneous","what":"Non-Light properties","title":"Visualizations","text":"LightLogR designed work light data, can also used types data. Simply define y.axis argument plotting functions. following example, plot activity data data dataset. comparison, light data added background lower alpha value.","code":"data_subset2 %>%   gg_days(y.axis = PIM, y.axis.label = \"Activity (PIM)\") +   geom_line(aes(y=MEDI), color = \"red\", alpha = 0.2)"},{"path":"https://tscnlab.github.io/LightLogR/articles/Visualizations.html","id":"scales","dir":"Articles","previous_headings":"Miscellaneous","what":"Scales","title":"Visualizations","text":"default, LightLogR uses -called symlog scale visualizations. scale combination linear logarithmic scale, useful light data, allows visualize low high values plot, including 0 negative values. light data regularly zero, exact values 0 1 lux usually relevant devices measuring 10^5 lx, scale useful compared linear logarithmic scaling. way symlog works threshold absolute values kept linear, beyond transformed logarithmically. default threshold 1, good choice light data. However, can changed setting threshold argument plotting functions. See full documentation symlog scale symlog_trans(). example show transformation particularly useful differences cross zero. use single-day doubleplot data .  can clearly see difference light exposure crossing 0 several times. symlog scale values discarded, outside traditional range logarithmic scale. values 1 lux interest, parameters transformation can adjusted.","code":"#dataset from above data <-  data_two_groups %>%    aggregate_Date(unit = \"15 mins\",                   date.handler = \\(x) as_date(\"2023-09-15\")                  ) %>%    ungroup()  #original doubleplot from above original_db <- data %>%    gg_doubleplot(aes_fill = Month, jco_color = TRUE, facetting = FALSE) +   guides(fill = \"none\")  #difference doubleplot, showing the average difference between the to phases difference_db <-  data %>%    select(Datetime, MEDI, Month) %>%    pivot_wider(names_from = Month, values_from = MEDI) %>%    gg_doubleplot(y.axis = `Oct/Nov`-`Aug/Sep`, facetting = FALSE,                 y.axis.label = \"difference (lx, MEDI)\")  #plotting original_db / difference_db data %>%    select(Datetime, MEDI, Month) %>%    pivot_wider(names_from = Month, values_from = MEDI) %>%    gg_doubleplot(y.axis = `Oct/Nov`-`Aug/Sep`, facetting = FALSE,                 y.axis.label = \"difference (lx, MEDI)\",                 y.scale = symlog_trans(thr = 0.001),                 y.axis.breaks = c(-10^(-2:5), 0, 10^(5:-2))                 )"},{"path":"https://tscnlab.github.io/LightLogR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Zauner. Author, maintainer. Manuel Spitschan. Author. Steffen Hartmeyer. Author. MeLiDos. Funder. EURAMET. Funder.           European Association National Metrology Institutes. Website: www.euramet.org. Grant Number: 22NRM05 MeLiDos. Grant Statement: project (22NRM05 MeLiDos) received funding European Partnership Metrology, co-financed European Union’s Horizon Europe Research Innovation Programme Participating States. European Union. Funder.           Co-funded European Union. Views opinions expressed however author(s) necessarily reflect European Union EURAMET. Neither European Union granting authority can held responsible . TSCN-Lab. Copyright holder.           www.tscnlab.org","code":""},{"path":"https://tscnlab.github.io/LightLogR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zauner, J.; Hartmeyer, S.L.; Spitschan, M. (2023): LightLogR: Working Wearable Light Logger Data. R Package, Available https://github.com/tscnlab/LightLogR, doi:10.5281/zenodo.11562600, RRID:SCR_025408","code":"@Misc{,   title = {LightLogR: Working With Wearable Light Logger Data},   author = {{Zauner} and {Johannes} and {Hartmeyer} and Steffen L. and {Spitschan} and {Manuel}},   year = {2023},   url = {https://github.com/tscnlab/LightLogR},   doi = {10.5281/zenodo.11562600}, }"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"lightlogr-","dir":"","previous_headings":"","what":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"Personalized luminous exposure data progressively gaining importance various sectors, including research, occupational affairs, fitness tracking. Data collected proliferating selection wearable loggers dosimeters, varying size, shape, functionality, output format. Despite maybe numerous use cases, field lacks unified framework collecting, validating, analyzing accumulated data. issue increases time expertise necessary handle data also compromises FAIRness (Findability, Accessibility, Interoperability, Reusability) results, especially meta-analyses. Light logger data can powerfully convey insights personal light exposure LightLogR package development part MeLiDos project address issues. package aims provide tools : import common measurement devices (see list supported devices) Validation processing light logging data Visualization light exposure data, exploratory publication ready Calculation common analysis parameters (see list metrics) come: Import, creation, verification crucial metadata Semi-automated analysis visualization (command-line GUI-based) Integration data unified database cross-study analyses","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"please-note-that-lightlogr-is-work-in-progress-if-you-are-interested-in-the-project-and-want-to-know-more-you-can-subscribe-to-the-lightlogr-mailing-list-if-you-find-a-bug-or-would-like-to-see-new-or-improved-features-please-open-an-issue-on-the-github-repository","dir":"","previous_headings":"","what":"Please note that LightLogR is work in progress! If you are interested in the project and want to know more, you can subscribe to the LightLogR mailing list. If you find a bug or would like to see new or improved features, please open an issue on the GitHub repository.","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"look Example section get started, dive Articles get depth information work package generate images one , import data, visualization, metric calculation.","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"supported-devices","dir":"","previous_headings":"","what":"Supported devices","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"present, devices support LightLogR: Actiwatch_Spectrum Actiwatch_Spectrum_de ActLumus ActTrust Circadian_Eye DeLux Kronowise LiDo LightWatcher LYS nanoLambda Speccy SpectraWear VEET Information devices can found reference import_Dataset(). want know import data devices, look article Import & Cleaning. using device currently supported, please contact developers. always looking expand range supported devices. easiest trackable way get contact opening new issue Github repository. Please also provide sample file data, can test import function.","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"metrics","dir":"","previous_headings":"","what":"Metrics","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"LightLogR supports wide range metrics across different metric families. can find full documentation metrics functions reference section. also overview article use Metrics. like use metric don’t find represented LightLogR, please contact developers. easiest trackable way get contact opening new issue Github repository.","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"about-the-creation-and-funding-of-lightlogr","dir":"","previous_headings":"","what":"About the creation and funding of LightLogR","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"LightLogR developed Translational Sensory & Circadian Neuroscience lab, joint group Technical University Munich Max Planck Institute Biological Neuroscience Unit (MPS/TUM/TUMCREATE)*, joint group based Technical University Munich, TUMCREATE, Max Planck Institute Biological Cybernetics. MeLiDos joint, EURAMET-funded project involving sixteen partners across Europe, aimed developing metrology standard workflow wearable light logger data optical radiation dosimeters. primary contributions towards fostering FAIR data include development common file format, robust metadata descriptors, accompanying open-source software ecosystem.  project (22NRM05 MeLiDos) received funding European Partnership Metrology, co-financed European Union’s Horizon Europe Research Innovation Programme Participating States. Views opinions expressed however author(s) necessarily reflect European Union EURAMET. Neither European Union granting authority can held responsible .","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"can install LightLogR CRAN : can install latest development version LightLogR GitHub :","code":"install.packages(\"LightLogR\") # install.packages(\"devtools\") devtools::install_github(\"tscnlab/LightLogR\")"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"quick starter use LightLogR.","code":"library(LightLogR) #these packages are needed for the examples as shown below. library(flextable) library(dplyr) library(ggplot2)"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"import","dir":"","previous_headings":"Example","what":"Import","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"can import light logger dataset ease. import functions give quick, helpful feedback dataset.   . complex data, useful gg_overview() function get immediate grasp data. automatically called import (set auto.plot = FALSE suppress ), really shines datasets multiple participants. also indicates data missing, based measurement epochs found data.  note: example can executed copy paste, requires large dataset included package. available, however, article Import & cleaning.","code":"filename <- system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\") dataset <- import$LYS(filename, tz = \"Europe/Berlin\") #>  #> Successfully read in 11'422 observations across 1 Ids from 1 LYS-file(s). #> Timezone set is Europe/Berlin. #>  #> First Observation: 2023-06-21 02:00:12 #> Last Observation: 2023-06-23 01:59:48 #> Timespan: 2 days #>  #> Observation intervals:  #>   Id              interval.time     n pct     #> 1 sample_data_LYS 15s           10015 87.689% #> 2 sample_data_LYS 16s            1367 11.969% #> 3 sample_data_LYS 17s              23 0.201%  #> 4 sample_data_LYS 18s              16 0.140% dataset %>% ungroup() %>% select(Datetime, lux, kelvin, MEDI) %>%     slice(8000:8005) %>% flextable() %>% autofit() LLdata %>% gg_overview()"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"visualize","dir":"","previous_headings":"Example","what":"Visualize","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"imported, LightLogR allows conveniently visualize data.  wide range options gg_day() function customize output. look reference page (?gg_day) see options. can also override defaults, e.g., different color, facetting, theme options.","code":"dataset %>% gg_day() dataset %>%    gg_day(aes_col = MEDI < 250, size = 0.75) +    theme(legend.position = \"bottom\")"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"more-than-one-dataset","dir":"","previous_headings":"Example","what":"More than one dataset","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"built-dataset sample.data.environment shows combined dataset light logger data second set data - case unobstructed outdoor light measurements. Combined datasets can easily visualized gg_day(). col parameter used Id column dataset allows color separation.  want get feeling data course multiple days, gg_days() function comes handy. works similar gg_day(). also opinionated terms scaling linebreaks show whole days, can adjusted.  cut_Datetime() function, data can broken arbitrary time intervals. can used easily compare different datasets. Just put function dataset gg_day(). makes new variable available plotting: Datetime.rounded. Just make sure, geom parameter set boxplot group parameter uses info rounded time interval (Datetime.rounded) different datasets (Source). base::interaction() function can easily combine . default interval cut_Datetime() 3 hours.","code":"sample.data.environment %>%    gg_day(     start.date = \"2023-08-18\",     aes_col = Id,     scales = \"fixed\",     geom = \"line\") + theme(legend.position = \"bottom\") #> Only Dates will be used from start.date and end.date input. If you also want to set Datetimes or Times, consider using the `filter_Datetime()` function instead. sample.data.environment %>%    gg_days(geom = \"ribbon\", alpha = 0.25, col = \"black\") sample.data.environment %>%    cut_Datetime() %>%    gg_day(     end.date = \"2023-08-15\",     aes_col = Id,     scales = \"fixed\",     geom = \"boxplot\",     group = interaction(Id, Datetime.rounded)) +    theme(legend.position = \"bottom\") #> Only Dates will be used from start.date and end.date input. If you also want to set Datetimes or Times, consider using the `filter_Datetime()` function instead."},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"insights-validation-and-processing","dir":"","previous_headings":"Example","what":"Insights, Validation, and Processing","title":"Process Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"LightLogR provides range functions get insight light logger data. importantly, can search eliminate implicit gaps. huge amount gaps comes fact measurement intervals somewhat irregular 15 18 seconds case. leaves little intervals start regularly. got information import, can still get info count_difftime(). can eliminate gap_handler() function. function automatically fill gaps NA values. dominant interval dataset now 15 seconds anymore (intermediate datapoints added), need specify epoch gap_finder(). want force data regular, can use aggregate_Datetime() function. aggregate data specified epoch. sensible defaults aggregate numeric, categorical, logical data. can also specify aggregation functions. Now, gaps left (every time lagged epochs lead completely skipped regular epoch). function can also used conveniently change interval arbitrary values, e.g., \"5 mins\", \"1 hour\".","code":"dataset %>% gap_finder() #> Found 10758 gaps. 761 Datetimes fall into the regular sequence. dataset %>% ungroup() %>% count_difftime() #> # A tibble: 4 × 2 #>   difftime       n #>   <Duration> <int> #> 1 15s        10015 #> 2 16s         1367 #> 3 17s           23 #> 4 18s           16 dataset %>% gap_handler() %>% gap_finder(epoch = \"15 sec\") #> No gaps found dataset %>% aggregate_Datetime(unit = \"15 sec\") %>% gap_finder() #> Found 97 gaps. 11422 Datetimes fall into the regular sequence."},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"Adds several columns light logger dataset. requires column contains Brown states, e.g. \"daytime\", \"evening\", \"night\". function add column recommended illuminance, column checks illuminance dataset within recommended illuminance levels, column gives label reference.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"","code":"Brown2reference(   dataset,   MEDI.colname = MEDI,   Brown.state.colname = State.Brown,   Brown.rec.colname = Reference,   Reference.label = \"Brown et al. (2022)\",   overwrite = FALSE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"dataset dataframe contains column Brown states MEDI.colname name column contains MEDI values used checks Brown reference illuminance. Must part dataset. Brown.state.colname name column contains Brown states. Must part dataset. Brown.rec.colname name column contain recommended illuminance. Must part dataset, otherwise throw error. Reference.label label used reference. Expects character scalar. overwrite TRUE (defaults FALSE), function overwrite Brown.rec.colname column already exists. ... Additional arguments passed Brown_rec() Brown_check(). relevant correct names daytime states thresholds used within states. See documentation functions information.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"dataframe basis dataset contains added columns.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"lower level, function uses Brown_rec() Brown_check() create required information.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"","code":"#add Brown reference illuminance to some sample data testdata <- tibble::tibble(MEDI = c(100, 10, 1, 300),                   State.Brown = c(\"day\", \"evening\", \"night\", \"day\")) Brown2reference(testdata) #> # A tibble: 4 × 6 #>    MEDI State.Brown Reference Reference.check Reference.difference #>   <dbl> <chr>           <dbl> <lgl>                          <dbl> #> 1   100 day               250 FALSE                           -150 #> 2    10 evening            10 TRUE                               0 #> 3     1 night               1 TRUE                               0 #> 4   300 day               250 TRUE                              50 #> # ℹ 1 more variable: Reference.label <chr>"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","title":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","text":"lower level function. checks given value threshold states given Brown et al. (2022). function vectorized. day threshold lower limit, evening night threshold upper limit.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","text":"","code":"Brown_check(   value,   state,   Brown.day = \"day\",   Brown.evening = \"evening\",   Brown.night = \"night\",   Brown.day.th = 250,   Brown.evening.th = 10,   Brown.night.th = 1 )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","text":"value Illuminance value check recommendation. needs numeric, can vector. state state Brown et al. (2022). Needs character vector length value. Brown.day, Brown.evening, Brown.night names states Brown et al. (2022). default values (\"day\", \"evening\", \"night\"), can changed names state different. Needs character scalar. Brown.day.th, Brown.evening.th, Brown.night.th thresholds states Brown et al. (2022). default values (250, 10, 1), can changed thresholds different. Needs numeric scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","text":"logical vector length value indicates whether value within recommended illuminance levels.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_check.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a value is within the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_check","text":"","code":"states <- c(\"day\", \"evening\", \"night\", \"day\") values <- c(100, 10, 1, 300) Brown_check(values, states) #> [1] FALSE  TRUE  TRUE  TRUE Brown_check(values, states, Brown.day.th = 100) #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","text":"lower level function. sets recommended illuminance/MEDI levels Brown et al. (2022) given state. function vectorized.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","text":"","code":"Brown_rec(   state,   Brown.day = \"day\",   Brown.evening = \"evening\",   Brown.night = \"night\",   Brown.day.th = 250,   Brown.evening.th = 10,   Brown.night.th = 1 )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","text":"state state Brown et al. (2022). Needs character vector. Brown.day, Brown.evening, Brown.night names states Brown et al. (2022). default values (\"day\", \"evening\", \"night\"), can changed names state different. Needs character scalar. Brown.day.th, Brown.evening.th, Brown.night.th thresholds states Brown et al. (2022). default values (250, 10, 1), can changed thresholds different. Needs numeric scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","text":"dataframe length state contains recommended illuminance/MEDI levels.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_rec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown_rec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown_rec","text":"","code":"states <- c(\"day\", \"evening\", \"night\") Brown_rec(states) #> [1] 250  10   1 Brown_rec(states, Brown.day.th = 100) #> [1] 100  10   1"},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a (shifted) sequence of Datetimes for axis breaks — Datetime_breaks","title":"Create a (shifted) sequence of Datetimes for axis breaks — Datetime_breaks","text":"Take vector Datetimes create sequence Datetimes given shift interval. helper function create breaks plotting, e.g. gg_days(), best used conjunction Datetime_limits(). function thin wrapper around seq().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a (shifted) sequence of Datetimes for axis breaks — Datetime_breaks","text":"","code":"Datetime_breaks(x, shift = lubridate::duration(12, \"hours\"), by = \"1 day\")"},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a (shifted) sequence of Datetimes for axis breaks — Datetime_breaks","text":"x vector Datetimes shift numeric giving number  duration object, e.g. lubridate::duration(12, \"hours\") character scalar giving unit interval base::seq()","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_breaks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a (shifted) sequence of Datetimes for axis breaks — Datetime_breaks","text":"vector Datetimes","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_breaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a (shifted) sequence of Datetimes for axis breaks — Datetime_breaks","text":"","code":"dataset <- c(\"2023-08-15\", \"2023-08-20\") Datetime_breaks(dataset) #> [1] \"2023-08-15 12:00:00 UTC\" \"2023-08-16 12:00:00 UTC\" #> [3] \"2023-08-17 12:00:00 UTC\" \"2023-08-18 12:00:00 UTC\" #> [5] \"2023-08-19 12:00:00 UTC\" Datetime_breaks(dataset, shift = 0) #> [1] \"2023-08-15 UTC\" \"2023-08-16 UTC\" \"2023-08-17 UTC\" \"2023-08-18 UTC\" #> [5] \"2023-08-19 UTC\" \"2023-08-20 UTC\" Datetime_breaks(dataset, by = \"12 hours\") #>  [1] \"2023-08-15 12:00:00 UTC\" \"2023-08-16 00:00:00 UTC\" #>  [3] \"2023-08-16 12:00:00 UTC\" \"2023-08-17 00:00:00 UTC\" #>  [5] \"2023-08-17 12:00:00 UTC\" \"2023-08-18 00:00:00 UTC\" #>  [7] \"2023-08-18 12:00:00 UTC\" \"2023-08-19 00:00:00 UTC\" #>  [9] \"2023-08-19 12:00:00 UTC\" \"2023-08-20 00:00:00 UTC\""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_limits.html","id":null,"dir":"Reference","previous_headings":"","what":"Find or set sensible limits for Datetime axis — Datetime_limits","title":"Find or set sensible limits for Datetime axis — Datetime_limits","text":"Take vector Datetimes return start first end last day data. start length can adjusted durations, like lubridate::ddays(). used gg_days() function return sensible x-axis. function thin wrapper around lubridate::floor_date() lubridate::ceiling_date().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_limits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find or set sensible limits for Datetime axis — Datetime_limits","text":"","code":"Datetime_limits(   x,   start = NULL,   length = NULL,   unit = \"1 day\",   midnight.rollover = FALSE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_limits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find or set sensible limits for Datetime axis — Datetime_limits","text":"x vector Datetimes start optional duration object, e.g. lubridate::ddays(1) shifts start Datetime vector amount. length optional duration object, e.g. lubridate::ddays(7) shifts end Datetime vector amount (adjusted) start. Depending data, might subtract one day desired length get correct axis-scaling start midnight. unit character scalar giving unit rounding lubridate::floor_date() lubridate::ceiling_date() midnight.rollover logical scalar indicating whether rollover cases exact matches rounded values input values. Helpful cases fall exactly rounded values others don`t. ... arguments passed lubridate::floor_date() lubridate::ceiling_date()","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_limits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find or set sensible limits for Datetime axis — Datetime_limits","text":"2 item vector Datetimes (adjusted) start end input vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Datetime_limits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find or set sensible limits for Datetime axis — Datetime_limits","text":"","code":"dataset <- c(\"2023-08-15\", \"2023-08-20\") breaks <- Datetime_breaks(dataset) Datetime_limits(breaks) #> [1] \"2023-08-15 UTC\" \"2023-08-20 UTC\" Datetime_limits(breaks, start = lubridate::ddays(1)) #> [1] \"2023-08-16 UTC\" \"2023-08-20 UTC\" Datetime_limits(breaks, length = lubridate::ddays(2)) #> [1] \"2023-08-15 UTC\" \"2023-08-18 UTC\""},{"path":"https://tscnlab.github.io/LightLogR/reference/LightLogR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"LightLogR: Process Data from Wearable Light Loggers and Optical Radiation Dosimeters — LightLogR-package","title":"LightLogR: Process Data from Wearable Light Loggers and Optical Radiation Dosimeters — LightLogR-package","text":"Import, processing, validation, visualization personal light exposure measurement data wearable devices. package implements features import data metadata files, conversion common file formats, validation light logging data, verification crucial metadata, calculation common parameters, semi-automated analysis visualization.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/LightLogR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LightLogR: Process Data from Wearable Light Loggers and Optical Radiation Dosimeters — LightLogR-package","text":"Maintainer: Johannes Zauner johannes.zauner@tum.de (ORCID) Authors: Manuel Spitschan manuel.spitschan@tum.de (ORCID) Steffen Hartmeyer steffen.hartmeyer@epfl.ch (ORCID) contributors: MeLiDos [funder] EURAMET (European Association National Metrology Institutes. Website: www.euramet.org. Grant Number: 22NRM05 MeLiDos. Grant Statement: project (22NRM05 MeLiDos) received funding European Partnership Metrology, co-financed European Union’s Horizon Europe Research Innovation Programme Participating States.) [funder] European Union (Co-funded European Union. Views opinions expressed however author(s) necessarily reflect European Union EURAMET. Neither European Union granting authority can held responsible .) [funder] TSCN-Lab (www.tscnlab.org) [copyright holder]","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Date.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate dates to a single day — aggregate_Date","title":"Aggregate dates to a single day — aggregate_Date","text":"Condenses dataset aggregating data single day per group, resolution choice unit. aggregate_Date() opinionated sense sets default handlers data type numeric, character, logical, factor. can overwritten user. Columns fall one categories need handled individually user (... argument) removed aggregation. unit specified data simply aggregated common interval (dominant.epoch) every group. aggregate_Date() especially useful summary plots show average day.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate dates to a single day — aggregate_Date","text":"","code":"aggregate_Date(   dataset,   Datetime.colname = Datetime,   unit = \"none\",   type = c(\"round\", \"floor\", \"ceiling\"),   date.handler = stats::median,   numeric.handler = mean,   character.handler = function(x) names(which.max(table(x, useNA = \"ifany\"))),   logical.handler = function(x) mean(x) >= 0.5,   factor.handler = function(x) factor(names(which.max(table(x, useNA = \"ifany\")))),   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate dates to a single day — aggregate_Date","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. unit Unit binning. See lubridate::round_date() examples. default \"none\", aggregate data , recommended regular data, condensation across different days performed time. Another option \"dominant.epoch\", means everything aggregated common interval. especially useful slightly irregular data, can computationally expensive. type One \"round\"(default), \"ceiling\" \"floor\". Setting chooses relevant function lubridate. date.handler function calculates aggregated day group. default, set median. numeric.handler, character.handler, logical.handler, factor.handler functions handle respective data types. default handlers calculate mean numeric mode character, factor logical types. ... arguments given dplyr::summarize() handle columns fall one categories .","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate dates to a single day — aggregate_Date","text":"tibble aggregated Datetime data, maximum one day per group. handler arguments capture column types, number columns input dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate dates to a single day — aggregate_Date","text":"aggregate_Date() splits Datetime column Date.data Time.data column. create subgroups Time.data present group aggregate group single day, remove sub grouping. Use ... create summary statistics group, e.g. maximum minimum values time point group. Performing aggregate_Datetime() unit aggregate_Date() unit \"none\" equivalent just using aggregate_Date() unit directly (provided arguments set functions). Disentangling two functions can useful split computational cost small instances unit large datasets. can also useful apply different handlers aggregating data desired unit time, aggregation single day, handlers well ... used twice unit set \"none\".","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate dates to a single day — aggregate_Date","text":"","code":"library(ggplot2) #gg_days without aggregation sample.data.environment %>%  gg_days()   #with daily aggregation sample.data.environment %>%  aggregate_Date() %>%  gg_days()   #with daily aggregation and a different time aggregation sample.data.environment %>%  aggregate_Date(unit = \"15 mins\", type = \"floor\") %>%  gg_days()   #adding further summary statistics about the range of MEDI  sample.data.environment %>%  aggregate_Date(unit = \"15 mins\", type = \"floor\",                 MEDI_max = max(MEDI),                 MEDI_min = min(MEDI)) %>%  gg_days() +  geom_ribbon(aes(ymin = MEDI_min, ymax = MEDI_max), alpha = 0.5)"},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Datetime data — aggregate_Datetime","title":"Aggregate Datetime data — aggregate_Datetime","text":"Condenses dataset aggregating data given (shorter) interval unit. aggregate_Datetime() opinionated sense sets default handlers data type numeric, character, logical, factor. can overwritten user. Columns fall one categories need handled individually user (... argument) removed aggregation. unit specified data simply aggregated common interval (dominant.epoch), often aggregation rounding.)","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Datetime data — aggregate_Datetime","text":"","code":"aggregate_Datetime(   dataset,   Datetime.colname = Datetime,   unit = \"dominant.epoch\",   type = c(\"round\", \"floor\", \"ceiling\"),   numeric.handler = mean,   character.handler = function(x) names(which.max(table(x, useNA = \"ifany\"))),   logical.handler = function(x) mean(x) >= 0.5,   factor.handler = function(x) factor(names(which.max(table(x, useNA = \"ifany\")))),   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Datetime data — aggregate_Datetime","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. unit Unit binning. See lubridate::round_date() examples. default \"dominant.epoch\", means everything aggregated common interval. especially useful slightly irregular data, can computationally expensive. \"none\" aggregate data . type One \"round\"(default), \"ceiling\" \"floor\". Setting chooses relevant function lubridate. numeric.handler, character.handler, logical.handler, factor.handler functions handle respective data types. default handlers calculate mean numeric mode character, factor logical types. ... arguments given dplyr::summarize() handle columns fall one categories .","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Datetime data — aggregate_Datetime","text":"tibble aggregated Datetime data. Usually number rows smaller input dataset. handler arguments capture column types, number columns input dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/aggregate_Datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Datetime data — aggregate_Datetime","text":"","code":"#dominant epoch without aggregation sample.data.environment %>%  dominant_epoch() #> # A tibble: 2 × 3 #>   Id          dominant.epoch group.indices #>   <chr>       <Duration>             <int> #> 1 Environment 30s                        1 #> 2 Participant 10s                        2  #dominant epoch with 5 minute aggregation sample.data.environment %>%  aggregate_Datetime(unit = \"5 mins\") %>%  dominant_epoch() #> # A tibble: 2 × 3 #>   Id          dominant.epoch    group.indices #>   <chr>       <Duration>                <int> #> 1 Environment 300s (~5 minutes)             1 #> 2 Participant 300s (~5 minutes)             2  #dominant epoch with 1 day aggregation sample.data.environment %>%  aggregate_Datetime(unit = \"1 day\") %>%  dominant_epoch() #> # A tibble: 2 × 3 #>   Id          dominant.epoch   group.indices #>   <chr>       <Duration>               <int> #> 1 Environment 86400s (~1 days)             1 #> 2 Participant 86400s (~1 days)             2"},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"function calculates metrics proposed Barroso et al. (2014) light-dosimetry context research non-visual effects light. following metrics calculated:","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"","code":"barroso_lighting_metrics(   Light.vector,   Time.vector,   epoch = \"dominant.epoch\",   loop = FALSE,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". loop Logical. data looped? Defaults FALSE. na.rm Logical. missing values (NA) removed calculation? Defaults FALSE. TRUE, calculation bright_cluster dark_cluster, missing values replaced 0 (see period_above_threshold). .df Logical. data frame returned? TRUE, data frame seven columns returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"List dataframe seven values: bright_threshold, dark_threshold, bright_mean_level, dark_mean_level, bright_cluster, dark_cluster, circadian_variation. output type bright_cluster, dark_cluster, duration object.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"bright_threshold maximum light intensity least six hours measurements higher level. dark_threshold minimum light intensity least eight hours measurements lower level. bright_mean_level 20% trimmed mean light intensity measurements equal bright_threshold. dark_mean_level 20% trimmed mean light intensity measurements equal dark_threshold. bright_cluster longest continuous time interval bright_threshold. dark_cluster longest continuous time interval dark_threshold. circadian_variation measure periodicity daily lighting schedule given set days. Calculated coefficient variation input light data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"Barroso, ., Simons, K., & Jager, P. de. (2014). Metrics circadian lighting clinical investigations. Lighting Research & Technology, 46(6), 637–649. doi:10.1177/1477153513502664 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/barroso_lighting_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circadian lighting metrics from Barroso et al. (2014) — barroso_lighting_metrics","text":"","code":"dataset1 <-   tibble::tibble(     Id = rep(\"B\", 60 * 24),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*24-1)),     MEDI = c(rep(sample(seq(0,1,0.1), 60*8, replace = TRUE)),               rep(sample(1:1000, 16, replace = TRUE), each = 60))   )  dataset1 %>%   dplyr::reframe(barroso_lighting_metrics(MEDI, Datetime, as.df = TRUE)) #> # A tibble: 1 × 7 #>   bright_threshold dark_threshold bright_mean_level dark_mean_level #>              <dbl>          <dbl>             <dbl>           <dbl> #> 1              455              1              874.           0.503 #> # ℹ 3 more variables: bright_cluster <Duration>, dark_cluster <Duration>, #> #   circadian_variation <dbl>"},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":null,"dir":"Reference","previous_headings":"","what":"Brightest or darkest continuous period — bright_dark_period","title":"Brightest or darkest continuous period — bright_dark_period","text":"function finds brightest darkest continuous period given timespan calculates mean light level, well timing period's onset, midpoint, offset. defined period maximum minimum mean light level. Note data need regularly spaced (.e., gaps) correct results.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brightest or darkest continuous period — bright_dark_period","text":"","code":"bright_dark_period(   Light.vector,   Time.vector,   period = c(\"brightest\", \"darkest\"),   timespan = \"10 hours\",   epoch = \"dominant.epoch\",   loop = FALSE,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brightest or darkest continuous period — bright_dark_period","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. period String indicating type period look . Can either \"brightest\"(default) \"darkest\". timespan timespan across calculate. Can either duration duration string, e.g., \"1 day\" \"10 sec\". epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". loop Logical. data looped? TRUE, full copy data concatenated end data. Makes sense 24 h data. Defaults FALSE. na.rm Logical. missing values removed calculation? Defaults FALSE. .df Logical. output returned data frame? Defaults TRUE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brightest or darkest continuous period — bright_dark_period","text":"named list mean, onset, midpoint, offset calculated brightest darkest period, .df == TRUE data frame columns named {period}_{timespan}_{metric}. output type corresponds type Time.vector, e.g., Time.vector HMS, timing metrics also HMS, vice versa POSIXct.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Brightest or darkest continuous period — bright_dark_period","text":"Assumes regular 24h light data. Otherwise, results may meaningful. Looping data recommended finding darkest period.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Brightest or darkest continuous period — bright_dark_period","text":"Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/bright_dark_period.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brightest or darkest continuous period — bright_dark_period","text":"","code":"# Dataset with light > 250lx between 06:00 and 18:00 dataset1 <-   tibble::tibble(     Id = rep(\"A\", 24),     Datetime = lubridate::as_datetime(0) + lubridate::hours(0:23),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   )  dataset1 %>%   dplyr::reframe(bright_dark_period(MEDI, Datetime, \"brightest\", \"10 hours\",     as.df = TRUE)) #> # A tibble: 1 × 4 #>   brightest_10h_mean brightest_10h_midpoint brightest_10h_onset #>                <dbl> <dttm>                 <dttm>              #> 1                250 1970-01-01 10:00:00    1970-01-01 06:00:00 #> # ℹ 1 more variable: brightest_10h_offset <dttm> dataset1 %>%   dplyr::reframe(bright_dark_period(MEDI, Datetime, \"darkest\", \"7 hours\",     loop = TRUE, as.df = TRUE)) #> # A tibble: 1 × 4 #>   darkest_7h_mean darkest_7h_midpoint darkest_7h_onset    darkest_7h_offset   #>             <dbl> <dttm>              <dttm>              <dttm>              #> 1               1 1970-01-01 22:00:00 1970-01-01 19:00:00 1970-01-01 02:00:00  # Dataset with duration as Time.vector dataset2 <-   tibble::tibble(     Id = rep(\"A\", 24),     Datetime = lubridate::dhours(0:23),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   )  dataset2 %>%   dplyr::reframe(bright_dark_period(MEDI, Datetime, \"brightest\", \"10 hours\",                                     as.df = TRUE)) #> # A tibble: 1 × 4 #>   brightest_10h_mean brightest_10h_midpoint brightest_10h_onset #>                <dbl> <Duration>             <Duration>          #> 1                250 36000s (~10 hours)     21600s (~6 hours)   #> # ℹ 1 more variable: brightest_10h_offset <Duration> dataset2 %>%   dplyr::reframe(bright_dark_period(MEDI, Datetime, \"darkest\", \"5 hours\",                                     loop = TRUE, as.df = TRUE)) #> # A tibble: 1 × 4 #>   darkest_5h_mean darkest_5h_midpoint darkest_5h_onset darkest_5h_offset #>             <dbl> <Duration>          <Duration>       <Duration>        #> 1               1 7200s (~2 hours)    0s               18000s (~5 hours)"},{"path":"https://tscnlab.github.io/LightLogR/reference/centroidLE.html","id":null,"dir":"Reference","previous_headings":"","what":"Centroid of light exposure — centroidLE","title":"Centroid of light exposure — centroidLE","text":"function calculates centroid light exposure mean time vector weighted proportion corresponding binned light intensity.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/centroidLE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centroid of light exposure — centroidLE","text":"","code":"centroidLE(   Light.vector,   Time.vector,   bin.size = NULL,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/centroidLE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centroid of light exposure — centroidLE","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. bin.size Value specifying size bins average light data . Must either duration duration string, e.g., \"1 day\" \"10 sec\". nothing provided, binning performed. na.rm Logical. missing values removed calculation? Defaults FALSE. .df Logical. output returned data frame? TRUE, data frame single column named centroidLE returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/centroidLE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centroid of light exposure — centroidLE","text":"Single column data frame vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/centroidLE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Centroid of light exposure — centroidLE","text":"Phillips, . J. K., Clerx, W. M., O’Brien, C. S., Sano, ., Barger, L. K., Picard, R. W., Lockley, S. W., Klerman, E. B., & Czeisler, C. . (2017). Irregular sleep/wake patterns associated poorer academic performance delayed circadian sleep/wake timing. Scientific Reports, 7(1), 3216. doi:10.1038/s41598-017-03171-4 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/centroidLE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centroid of light exposure — centroidLE","text":"","code":"# Dataset with POSIXct time vector dataset1 <-   tibble::tibble(     Id = rep(\"A\", 24),     Datetime = lubridate::as_datetime(0) + lubridate::hours(0:23),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   ) dataset1 %>%   dplyr::reframe(     \"Centroid of light exposure\" = centroidLE(MEDI, Datetime, \"2 hours\")   ) #> # A tibble: 1 × 1 #>   `Centroid of light exposure` #>   <dttm>                       #> 1 1970-01-01 11:32:04           # Dataset with hms time vector dataset2 <-   tibble::tibble(     Id = rep(\"A\", 24),     Time = hms::as_hms(lubridate::as_datetime(0) + lubridate::hours(0:23)),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   ) dataset2 %>%   dplyr::reframe(     \"Centroid of light exposure\" = centroidLE(MEDI, Time, \"2 hours\")   ) #> # A tibble: 1 × 1 #>   `Centroid of light exposure` #>   <time>                       #> 1 11:32:04                      # Dataset with duration time vector dataset3 <-   tibble::tibble(     Id = rep(\"A\", 24),     Hour = lubridate::duration(0:23, \"hours\"),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   ) dataset3 %>%   dplyr::reframe(     \"Centroid of light exposure\" = centroidLE(MEDI, Hour, \"2 hours\")   ) #> # A tibble: 1 × 1 #>   `Centroid of light exposure` #>   <Duration>                   #> 1 41524s (~11.53 hours)"},{"path":"https://tscnlab.github.io/LightLogR/reference/count_difftime.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts the Time differences (epochs) per group (in a grouped dataset) — count_difftime","title":"Counts the Time differences (epochs) per group (in a grouped dataset) — count_difftime","text":"Counts Time differences (epochs) per group (grouped dataset)","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/count_difftime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts the Time differences (epochs) per group (in a grouped dataset) — count_difftime","text":"","code":"count_difftime(dataset, Datetime.colname = Datetime)"},{"path":"https://tscnlab.github.io/LightLogR/reference/count_difftime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts the Time differences (epochs) per group (in a grouped dataset) — count_difftime","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/count_difftime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts the Time differences (epochs) per group (in a grouped dataset) — count_difftime","text":"tibble number occurences time difference per group","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/count_difftime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts the Time differences (epochs) per group (in a grouped dataset) — count_difftime","text":"","code":"#get a dataset with irregular intervals filepath <- system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\") dataset <- import$LYS(filepath) #>  #> Successfully read in 11'422 observations across 1 Ids from 1 LYS-file(s). #> Timezone set is UTC. #>  #> First Observation: 2023-06-21 00:00:12 #> Last Observation: 2023-06-22 23:59:48 #> Timespan: 2 days #>  #> Observation intervals:  #>   Id              interval.time     n pct     #> 1 sample_data_LYS 15s           10015 87.689% #> 2 sample_data_LYS 16s            1367 11.969% #> 3 sample_data_LYS 17s              23 0.201%  #> 4 sample_data_LYS 18s              16 0.140%    #count_difftime returns the number of occurences of each time difference #and is more comprehensive in terms of a summary than `gap_finder` or  #`dominant_epoch` count_difftime(dataset) #> # A tibble: 4 × 3 #> # Groups:   Id [1] #>   Id              difftime       n #>   <fct>           <Duration> <int> #> 1 sample_data_LYS 15s        10015 #> 2 sample_data_LYS 16s         1367 #> 3 sample_data_LYS 17s           23 #> 4 sample_data_LYS 18s           16 dominant_epoch(dataset) #> # A tibble: 1 × 3 #>   Id              dominant.epoch group.indices #>   <fct>           <Duration>             <int> #> 1 sample_data_LYS 15s                        1 gap_finder(dataset) #> Found 10758 gaps. 761 Datetimes fall into the regular sequence.  #irregular data can be regularized with `aggregate_Datetime` dataset %>% aggregate_Datetime(unit = \"15 secs\") %>% count_difftime() #> # A tibble: 2 × 3 #> # Groups:   Id [1] #>   Id              difftime       n #>   <fct>           <Duration> <int> #> 1 sample_data_LYS 15s        11324 #> 2 sample_data_LYS 30s           97"},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Timedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Time-of-Day column in the dataset — create_Timedata","title":"Create a Time-of-Day column in the dataset — create_Timedata","text":"Create Time--Day column dataset","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Timedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Time-of-Day column in the dataset — create_Timedata","text":"","code":"create_Timedata(   dataset,   Datetime.colname = Datetime,   Time.data = Time.data,   output.dataset = TRUE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Timedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Time-of-Day column in the dataset — create_Timedata","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. Time.data Name newly created column. Expects symbol. default(Time.data) works well functions LightLogR. output.dataset output data.frame (Default TRUE) vector hms (FALSE) times? Expects logical scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Timedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Time-of-Day column in the dataset — create_Timedata","text":"data.frame object identical dataset added column Time--Day data, vector Time--Day-data","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Timedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Time-of-Day column in the dataset — create_Timedata","text":"","code":"sample.data.environment %>% create_Timedata() #> # A tibble: 69,120 × 4 #> # Groups:   Id [2] #>    Datetime             MEDI Id          Time.data #>    <dttm>              <dbl> <chr>       <time>    #>  1 2023-08-15 00:00:01     0 Participant 00'01\"    #>  2 2023-08-15 00:00:11     0 Participant 00'11\"    #>  3 2023-08-15 00:00:21     0 Participant 00'21\"    #>  4 2023-08-15 00:00:31     0 Participant 00'31\"    #>  5 2023-08-15 00:00:41     0 Participant 00'41\"    #>  6 2023-08-15 00:00:51     0 Participant 00'51\"    #>  7 2023-08-15 00:01:01     0 Participant 01'01\"    #>  8 2023-08-15 00:01:11     0 Participant 01'11\"    #>  9 2023-08-15 00:01:21     0 Participant 01'21\"    #> 10 2023-08-15 00:01:31     0 Participant 01'31\"    #> # ℹ 69,110 more rows"},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Datetime bins for visualization and calculation — cut_Datetime","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"cut_Datetime wrapper around lubridate::round_date() (friends) combined dplyr::mutate(), create new column light logger dataset specified binsize. can \"3 hours\", \"15 secs\", \"0.5 days\". useful step dataset visualization summary step.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"","code":"cut_Datetime(   dataset,   unit = \"3 hours\",   type = c(\"round\", \"floor\", \"ceiling\"),   Datetime.colname = Datetime,   New.colname = Datetime.rounded,   group_by = FALSE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. unit Unit binning. See lubridate::round_date() examples. default \"3 hours\". type One \"round\"(default), \"ceiling\" \"floor\". Setting chooses relevant function lubridate. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. New.colname Column name added column dataset. group_by data grouped new column? Defaults FALSE ... Parameter handed lubridate::round_date() siblings","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"data.frame object identical dataset added column binned datetimes.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"","code":"#compare Datetime and Datetime.rounded sample.data.environment %>%   cut_Datetime() %>%   dplyr::slice_sample(n = 5) #> # A tibble: 10 × 4 #> # Groups:   Id [2] #>    Datetime            Datetime.rounded        MEDI Id          #>    <dttm>              <dttm>                 <dbl> <chr>       #>  1 2023-08-15 01:30:02 2023-08-15 03:00:00     0    Environment #>  2 2023-08-19 09:34:02 2023-08-19 09:00:00 43415.   Environment #>  3 2023-08-20 18:00:02 2023-08-20 18:00:00 31626.   Environment #>  4 2023-08-17 23:00:32 2023-08-18 00:00:00     0    Environment #>  5 2023-08-17 16:49:02 2023-08-17 18:00:00 50903.   Environment #>  6 2023-08-18 23:19:31 2023-08-19 00:00:00     0    Participant #>  7 2023-08-15 06:05:51 2023-08-15 06:00:00     0.64 Participant #>  8 2023-08-15 12:31:21 2023-08-15 12:00:00  2514.   Participant #>  9 2023-08-15 14:02:01 2023-08-15 15:00:00   213.   Participant #> 10 2023-08-20 17:20:01 2023-08-20 18:00:00   245.   Participant"},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Create reference data from other data — data2reference","title":"Create reference data from other data — data2reference","text":"Create reference data almost data datetime column data column. reference data can even created subsets data. Examples one participant can used reference participants, first (second,...) day every participant data reference day. function needs carefully handled, reference data time intervals shorter data time intervals. case, use aggregate_Datetime() reference data beforehand lengthen interval.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create reference data from other data — data2reference","text":"","code":"data2reference(   dataset,   Reference.data = dataset,   Datetime.column = Datetime,   Data.column = MEDI,   Id.column = Id,   Reference.column = Reference,   overwrite = FALSE,   filter.expression.reference = NULL,   across.id = FALSE,   shift.start = FALSE,   length.restriction.seconds = 60,   shift.intervals = \"auto\",   Reference.label = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create reference data from other data — data2reference","text":"dataset light logger dataset Reference.data data used reference. default dataset used reference. Datetime.column Datetime column dataset Reference.data. Need sets. Default Datetime. Data.column Data column Reference.data converted reference. Default MEDI. Id.column Name Id.column dataset Reference.data. Reference.column Name reference column added dataset. Default Reference. column dataset throw error . overwrite TRUE (defaults FALSE), function overwrite Reference.colname column already exists. filter.expression.reference Expression used filter Reference.data used reference. Default NULL. See across.id Grouping variables ignored creating reference data. Default FALSE. TRUE, grouping variables ignored. FALSE, grouping variables ignored. vector grouping variables given, ignored. shift.start TRUE, reference data shifted start respective group. Default FALSE. shift ignores groups specified across.id. length.restriction.seconds Restricts application reference data maximum length seconds. Default 60 seconds. useful avoid reference data applied long periods time, e.g., gaps reference data shift.intervals Time shift seconds, applied every data point reference data. Default \"auto\". \"auto\", shift calculated halving frequent time difference two data points reference data. number given, number seconds used shift. Can also use lubridate::duration() specify shift. Reference.label Label added reference data. NULL, label added.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create reference data from other data — data2reference","text":"dataset new column Reference contains reference data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create reference data from other data — data2reference","text":"use subsets data, use filter.expression.reference argument specify subsets data. across.id argument specifies whether reference data used across grouping variables (e.g., across participants). shift.start argument enables shift reference data start time start respective group. @examples information. expression evaluated within dplyr::filter().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create reference data from other data — data2reference","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(ggplot2)  gg_reference <- function(dataset) { dataset %>% ggplot(aes(x = Datetime, y = MEDI, color = Id)) + geom_line(linewidth = 1) + geom_line(aes(y = Reference), color = \"black\", size = 0.25, linetype = \"dashed\") + theme_minimal() + facet_wrap(~ Id, scales = \"free_y\") }  #in this example, each data point is its own reference sample.data.environment %>%   data2reference() %>%   gg_reference() #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead.   #in this example, the first day of each ID is the reference for the other days #this requires grouping of the Data by Day, which is then specified in across.id #also, shift.start needs to be set to TRUE, to shift the reference data to the #start of the groupings sample.data.environment %>% group_by(Id, Day = as_date(Datetime)) %>% data2reference(   filter.expression.reference =  as_date(Datetime) == min(as_date(Datetime)),   shift.start = TRUE,   across.id = \"Day\") %>%   gg_reference() #> Joining with `by = join_by(Id, Day)` #> Adding missing grouping variables: `Id` #> Joining with `by = join_by(Id)` #> Joining with `by = join_by(Id, Day)` #> Joining with `by = join_by(Id, Day)` #> Adding missing grouping variables: `Day`   #in this example, the Environment Data will be used as a reference sample.data.environment %>% data2reference(   filter.expression.reference =  Id == \"Environment\",   across.id = TRUE) %>%   gg_reference()"},{"path":"https://tscnlab.github.io/LightLogR/reference/disparity_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Disparity index — disparity_index","title":"Disparity index — disparity_index","text":"function calculates continuous disparity index described Fernández-Martínez et al. (2018).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/disparity_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disparity index — disparity_index","text":"","code":"disparity_index(Light.vector, na.rm = FALSE, as.df = FALSE)"},{"path":"https://tscnlab.github.io/LightLogR/reference/disparity_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disparity index — disparity_index","text":"Light.vector Numeric vector containing light data. na.rm Logical. missing values removed? Defaults FALSE .df Logical. output returned data frame? TRUE, data frame single column named disparity_index returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/disparity_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disparity index — disparity_index","text":"Single column data frame vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/disparity_index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Disparity index — disparity_index","text":"Fernández-Martínez, M., Vicca, S., Janssens, . ., Carnicer, J., Martín-Vide, J., & Peñuelas, J. (2018). consecutive disparity index, D: measure temporal variability ecological studies. Ecosphere, 9(12), e02527. doi:10.1002/ecs2.2527 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/disparity_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disparity index — disparity_index","text":"","code":"dataset1 <-   tibble::tibble(     Id = rep(\"A\", 24),     Datetime = lubridate::as_datetime(0) + lubridate::hours(0:23),     MEDI = sample(0:1000, 24),   ) dataset1 %>%   dplyr::reframe(     \"Disparity index\" = disparity_index(MEDI)   ) #> # A tibble: 1 × 1 #>   `Disparity index` #>               <dbl> #> 1              1.00"},{"path":"https://tscnlab.github.io/LightLogR/reference/dominant_epoch.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the dominant epoch/interval of a dataset — dominant_epoch","title":"Determine the dominant epoch/interval of a dataset — dominant_epoch","text":"Calculate dominant epoch/interval dataset. dominant epoch/interval epoch/interval frequent dataset. calculation done per group, might get multiple variables. two epochs/intervals equally frequent, first one (shortest one) chosen.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dominant_epoch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the dominant epoch/interval of a dataset — dominant_epoch","text":"","code":"dominant_epoch(dataset, Datetime.colname = Datetime)"},{"path":"https://tscnlab.github.io/LightLogR/reference/dominant_epoch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the dominant epoch/interval of a dataset — dominant_epoch","text":"dataset light logger dataset. Needs dataframe. Datetime.colname column contains datetime. Needs POSIXct part dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dominant_epoch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the dominant epoch/interval of a dataset — dominant_epoch","text":"tibble one row per group column dominant.epoch lubridate::duration(). Also column group.indices, helpful referencing dominant.epoch across dataframes equal grouping.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/dominant_epoch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the dominant epoch/interval of a dataset — dominant_epoch","text":"","code":"dataset <- tibble::tibble(Id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"),               Datetime = lubridate::as_datetime(1) +                          lubridate::days(c(0:2, 4, 6, 8))) dataset #> # A tibble: 6 × 2 #>   Id    Datetime            #>   <chr> <dttm>              #> 1 A     1970-01-01 00:00:01 #> 2 A     1970-01-02 00:00:01 #> 3 A     1970-01-03 00:00:01 #> 4 B     1970-01-05 00:00:01 #> 5 B     1970-01-07 00:00:01 #> 6 B     1970-01-09 00:00:01 #get the dominant epoch by group dataset %>% dplyr::group_by(Id) %>% dominant_epoch() #> # A tibble: 2 × 3 #>   Id    dominant.epoch    group.indices #>   <chr> <Duration>                <int> #> 1 A     86400s (~1 days)              1 #> 2 B     172800s (~2 days)             2  #get the dominant epoch of the whole dataset dataset %>% dominant_epoch()               #> # A tibble: 1 × 2 #>   dominant.epoch    group.indices #>   <Duration>                <int> #> 1 172800s (~2 days)             1"},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","title":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","text":"data imported LightLogR timezone applied, assumed timestamps correct - case, e.g., timestamps stored UTC, local time. measurement devices set local time recording interval starts. recording daylight savings jump happens (either direction), device might adjust timestamps change. results unwanted shift data, starting time DST jump likely continues end file. dst_change_handler used detect jumps within group apply correct shift data (.e., shift applied device). important Note function useful time stamp raw data deviates actual date-time. Note also, function results gap DST jump, handled gap_handler() afterwards. also result potentially double timestamps jum back DST standard time. result inconsistencies functions, recommend use aggregate_Datetime() afterwards unit equal dominant epoch. Finally, function equipped handle one jump per group. jump based whether group starts DST . function remove datetime rows NA values.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","text":"","code":"dst_change_handler(   dataset,   Datetime.colname = Datetime,   filename.colname = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","text":"dataset dataset summarized, must dataframe Datetime.colname name column contains Datetime data, expects symbol filename.colname (optional) column name contains filename. provided, use column temporary grouping variable additionally dataset grouping.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","text":"tibble columns input dataset, shifted","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_handler.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","text":"detection DST jump based function lubridate::dst() jumps applied within group. import, function used dst_adjustment = TRUE set includes default filename grouping variable, additionally Id.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle jumps in Daylight Savings (DST) that are missing in the data — dst_change_handler","text":"","code":"#create some data that crosses a DST jump data <-   tibble::tibble(  Datetime = seq.POSIXt(from = as.POSIXct(\"2023-03-26 01:30:00\", tz = \"Europe/Berlin\"),                      to = as.POSIXct(\"2023-03-26 03:00:00\", tz = \"Europe/Berlin\"),                      by = \"30 mins\"),                      Value = 1)  #as can be seen next, there is a gap in the data - this is necessary when  #using a timezone with DST.   data$Datetime #> [1] \"2023-03-26 01:30:00 CET\"  \"2023-03-26 03:00:00 CEST\"  #Let us say now, that the device did not adjust for the DST - thus the 03:00   #timestamp is actually 04:00 in local time. This can be corrected for by:  data %>% dst_change_handler() %>% .$Datetime #> [1] \"2023-03-26 01:30:00 CET\"  \"2023-03-26 04:00:00 CEST\""},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a summary of groups where a daylight saving time change occurs. — dst_change_summary","title":"Get a summary of groups where a daylight saving time change occurs. — dst_change_summary","text":"Get summary groups daylight saving time change occurs.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a summary of groups where a daylight saving time change occurs. — dst_change_summary","text":"","code":"dst_change_summary(dataset, Datetime.colname = Datetime)"},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a summary of groups where a daylight saving time change occurs. — dst_change_summary","text":"dataset dataset summarized, must dataframe Datetime.colname name column contains Datetime data, expects symbol","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a summary of groups where a daylight saving time change occurs. — dst_change_summary","text":"tibble groups dst change occurs. column dst_start boolean indicates whether start group occurs daylight savings.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/dst_change_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a summary of groups where a daylight saving time change occurs. — dst_change_summary","text":"","code":"sample.data.environment %>%    dplyr::mutate(Datetime =    lubridate::with_tz(Datetime, \"Europe/Berlin\") + lubridate::dweeks(10)) %>%   dst_change_summary() #> # A tibble: 2 × 2 #>   Id          dst_start #>   <chr>       <lgl>     #> 1 Environment TRUE      #> 2 Participant TRUE"},{"path":"https://tscnlab.github.io/LightLogR/reference/duration_above_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Duration above/below threshold or within threshold range — duration_above_threshold","title":"Duration above/below threshold or within threshold range — duration_above_threshold","text":"function calculates duration spent /specified threshold light level within specified range light levels.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/duration_above_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duration above/below threshold or within threshold range — duration_above_threshold","text":"","code":"duration_above_threshold(   Light.vector,   Time.vector,   comparison = c(\"above\", \"below\"),   threshold,   epoch = \"dominant.epoch\",   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/duration_above_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duration above/below threshold or within threshold range — duration_above_threshold","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. comparison String specifying whether time threshold calculated. Can either \"\" (default) \"\". two values provided threshold, argument ignored. threshold Single numeric value two numeric values specifying threshold light level(s) compare . vector two values provided, time within two thresholds calculated. epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". na.rm Logical. missing values (NA) removed calculation? Defaults FALSE. .df Logical. data frame returned? TRUE, data frame single column named duration_{comparison}_{threshold} returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/duration_above_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duration above/below threshold or within threshold range — duration_above_threshold","text":"duration object single value, single column data frame.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/duration_above_threshold.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Duration above/below threshold or within threshold range — duration_above_threshold","text":"Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/duration_above_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duration above/below threshold or within threshold range — duration_above_threshold","text":"","code":"N <- 60 # Dataset with epoch = 1min dataset1 <-   tibble::tibble(     Id = rep(\"A\", N),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(1:N),     MEDI = sample(c(sample(1:249, N / 2), sample(250:1000, N / 2))),   ) # Dataset with epoch = 30s dataset2 <-   tibble::tibble(     Id = rep(\"B\", N),     Datetime = lubridate::as_datetime(0) + lubridate::seconds(seq(30, N * 30, 30)),     MEDI = sample(c(sample(1:249, N / 2), sample(250:1000, N / 2))),   ) dataset.combined <- rbind(dataset1, dataset2)  dataset1 %>%   dplyr::reframe(\"TAT >250lx\" = duration_above_threshold(MEDI, Datetime, threshold = 250)) #> # A tibble: 1 × 1 #>   `TAT >250lx`        #>   <Duration>          #> 1 1800s (~30 minutes)  dataset1 %>%   dplyr::reframe(duration_above_threshold(MEDI, Datetime, threshold = 250, as.df = TRUE)) #> # A tibble: 1 × 1 #>   duration_above_250  #>   <Duration>          #> 1 1800s (~30 minutes)  # Group by Id to account for different epochs dataset.combined %>%   dplyr::group_by(Id) %>%   dplyr::reframe(\"TAT >250lx\" = duration_above_threshold(MEDI, Datetime, threshold = 250)) #> # A tibble: 2 × 2 #>   Id    `TAT >250lx`        #>   <chr> <Duration>          #> 1 A     1800s (~30 minutes) #> 2 B     900s (~15 minutes)"},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving average filter (EMA) — exponential_moving_average","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"function smoothes data using exponential moving average filter specified decay half-life.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"","code":"exponential_moving_average(   Light.vector,   Time.vector,   decay = \"90 min\",   epoch = \"dominant.epoch\" )"},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"Light.vector Numeric vector containing light data. Missing values replaced 0. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. decay decay half-life controlling exponential smoothing. Can either duration string. string, needs valid duration string, e.g., \"1 day\" \"10 sec\". default set \"90 mins\" biologically relevant estimate (see reference paper). epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\".","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"numeric vector containing smoothed light data. output length Light.vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"timeseries assumed regular. Missing values light data replaced 0.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"Price, L. L. . (2014). Role Exponential Smoothing Circadian Dosimetry. Photochemistry Photobiology, 90(5), 1184-1192. doi:10.1111/php.12282 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/exponential_moving_average.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving average filter (EMA) — exponential_moving_average","text":"","code":"sample.data.environment.EMA = sample.data.environment %>%   dplyr::filter(Id == \"Participant\") %>%   filter_Datetime(length = lubridate::days(2)) %>%   dplyr::mutate(MEDI.EMA = exponential_moving_average(MEDI, Datetime))  # Plot to compare results sample.data.environment.EMA %>%   ggplot2::ggplot(ggplot2::aes(x = Datetime)) +   ggplot2::geom_line(ggplot2::aes(y = MEDI), colour = \"black\") +   ggplot2::geom_line(ggplot2::aes(y = MEDI.EMA), colour = \"red\")"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Datetimes in a dataset. — filter_Datetime","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"Filtering dataset based Dates Datetimes may often necessary prior calcuation visualization. functions allow filtering based simple strings Datetime scalars, specifying length. also support prior dplyr grouping, useful, e.g., want filter first two days measurement data every participant, regardless actual date. want filter based times day, look filter_Time().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"","code":"filter_Datetime(   dataset,   Datetime.colname = Datetime,   start = NULL,   end = NULL,   length = NULL,   length_from_start = TRUE,   full.day = FALSE,   tz = NULL,   only_Id = NULL,   filter.expr = NULL )  filter_Date(..., start = NULL, end = NULL)"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. start, end filter_Datetime() POSIXct character scalar form \"yyyy-mm-dd hh-mm-ss\" giving respective start end time positions filtered dataframe. want provide dates form \"yyyy-mm-dd\", use wrapper function filter_Date(). one start/end provided, times taken respective extreme values dataset. length provided one start/end , calculated based given value. length provided start/end NULL, time respective start taken. length Either Period Duration lubridate. E.g., days(2) + hours(12) give period 2.5 days, whereas ddays(2) + dhours(12) give duration. difference periods durations look documentation lubridate. Basically, periods model clocktimes, whereas durations model physical processes. matters several occasions, like leap years, daylight savings. can also provide character scalar form e.g. \"1 day\", converted period. length_from_start logical indicating whether length argument applied start (default, TRUE) end data (FALSE). relevant neither start end arguments provided. full.day logical indicating whether start param rounded full day, length argument provided (Default FALSE). useful, e.g., first observation dataset slightly midnight. TRUE, count length midnight avoid empty days plotting gg_day(). tz Timezone start/end times. NULL (default), take timezone Datetime.colname column. only_Id expression ids filtering applied . NULL (default), filtering applied ids. Based expression, dataset split two given expression evaluates TRUE, filtering take place. Afterwards sets recombined sorted Datetime. filter.expr Advanced filtering conditions. NULL (default) given expression, used dplyr::filter() results. can useful filter, e.g. group-specific conditions, like starting first two days measurement (see examples). ... Parameter handed lubridate::round_date() siblings","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"data.frame object identical dataset specified Dates/Times.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"","code":"library(lubridate) library(dplyr) #baseline range.unfiltered <- sample.data.environment$Datetime %>% range() range.unfiltered #> [1] \"2023-08-15 00:00:01 UTC\" \"2023-08-20 23:59:51 UTC\"  #setting the start of a dataset sample.data.environment %>% filter_Datetime(start = \"2023-08-18 12:00:00\") %>% pull(Datetime) %>% range() #> [1] \"2023-08-18 12:00:01 UTC\" \"2023-08-20 23:59:41 UTC\"  #setting the end of a dataset sample.data.environment %>% filter_Datetime(end = \"2023-08-18 12:00:00\") %>% pull(Datetime) %>% range() #> [1] \"2023-08-15 00:00:01 UTC\" \"2023-08-18 11:59:51 UTC\"  #setting a period of a dataset sample.data.environment %>% filter_Datetime(end = \"2023-08-18 12:00:00\", length = days(2)) %>% pull(Datetime) %>% range() #> [1] \"2023-08-16 12:00:01 UTC\" \"2023-08-18 11:59:51 UTC\"  #setting only the period of a dataset sample.data.environment %>% filter_Datetime(length = days(2)) %>% pull(Datetime) %>% range() #> [1] \"2023-08-15 00:00:01 UTC\" \"2023-08-16 23:59:51 UTC\"  #advanced filtering based on grouping (second day of each group) sample.data.environment %>% #shift the \"Environment\" group by one day mutate( Datetime = ifelse(Id == \"Environment\", Datetime + ddays(1), Datetime) %>% as_datetime()) -> sample sample %>% summarize(Daterange = paste(min(Datetime), max(Datetime), sep = \" - \")) #> # A tibble: 2 × 2 #>   Id          Daterange                                 #>   <chr>       <chr>                                     #> 1 Environment 2023-08-16 00:00:02 - 2023-08-21 23:59:32 #> 2 Participant 2023-08-15 00:00:01 - 2023-08-20 23:59:51 #now we can use the `filter.expr` argument to filter from the second day of each group sample %>% filter_Datetime(filter.expr = Datetime > Datetime[1] + days(1)) %>% summarize(Daterange = paste(min(Datetime), max(Datetime), sep = \" - \")) #> # A tibble: 2 × 2 #>   Id          Daterange                                 #>   <chr>       <chr>                                     #> 1 Environment 2023-08-17 00:00:32 - 2023-08-21 23:59:02 #> 2 Participant 2023-08-16 00:00:11 - 2023-08-20 23:59:51 sample.data.environment %>% filter_Date(end = \"2023-08-17\") #> # A tibble: 34,560 × 3 #> # Groups:   Id [2] #>    Datetime             MEDI Id          #>    <dttm>              <dbl> <chr>       #>  1 2023-08-15 00:00:01     0 Participant #>  2 2023-08-15 00:00:11     0 Participant #>  3 2023-08-15 00:00:21     0 Participant #>  4 2023-08-15 00:00:31     0 Participant #>  5 2023-08-15 00:00:41     0 Participant #>  6 2023-08-15 00:00:51     0 Participant #>  7 2023-08-15 00:01:01     0 Participant #>  8 2023-08-15 00:01:11     0 Participant #>  9 2023-08-15 00:01:21     0 Participant #> 10 2023-08-15 00:01:31     0 Participant #> # ℹ 34,550 more rows"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter multiple times based on a list of arguments. — filter_Datetime_multiple","title":"Filter multiple times based on a list of arguments. — filter_Datetime_multiple","text":"filter_Datetime_multiple() wrapper around filter_Datetime() filter_Date() allows cumulative filtering Datetimes based varying filter conditions. useful conjunction only_Id argument, e.g., selectively cut dates depending participants (see examples)","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter multiple times based on a list of arguments. — filter_Datetime_multiple","text":"","code":"filter_Datetime_multiple(   dataset,   arguments,   filter_function = filter_Datetime,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter multiple times based on a list of arguments. — filter_Datetime_multiple","text":"dataset light logger dataset arguments list arguments passed filter_Datetime() filter_Date(). list entry must list arguments, e.g, list(start = \"2021-01-01\", only_Id = quote(Id == 216)). Expressions quoted quote() rlang::expr(). filter_function function used filtering, either filter_Datetime (default) filter_Date ... Additional arguments passed filter function. length argument provided instead argument, written string, e.g., length = \"1 day\", instead length = lubridate::days(1).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter multiple times based on a list of arguments. — filter_Datetime_multiple","text":"dataframe filtered data","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter multiple times based on a list of arguments. — filter_Datetime_multiple","text":"","code":"arguments <- list(  list(start = \"2023-08-17\", only_Id = quote(Id == \"Participant\")),  list(end = \"2023-08-17\", only_Id = quote(Id == \"Environment\")))  #compare the unfiltered dataset  sample.data.environment %>% gg_overview(Id.colname = Id)   #compare the unfiltered dataset  sample.data.environment %>%  filter_Datetime_multiple(arguments = arguments, filter_Date) %>%  gg_overview(Id.colname = Id)"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Times in a dataset. — filter_Time","title":"Filter Times in a dataset. — filter_Time","text":"Filter Times dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Times in a dataset. — filter_Time","text":"","code":"filter_Time(   dataset,   Datetime.colname = Datetime,   start = NULL,   end = NULL,   length = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Times in a dataset. — filter_Time","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. start, end, length character scalar form \"hh-mm-ss\" giving respective start, end, length filtered dataframe. input can also come POSIXct datetime, time component used. one start/end provided, times taken respective extreme values dataset. length provided one start/end , calculated based given value. length provided start/end , time respective start taken.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Times in a dataset. — filter_Time","text":"data.frame object identical dataset specified Times.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Times in a dataset. — filter_Time","text":"","code":"sample.data.environment %>% filter_Time(start = \"4:00:34\", length = \"12:00:00\") %>% dplyr::pull(Time.data) %>% range() %>% hms::as_hms() #> 04:00:41 #> 16:00:32"},{"path":"https://tscnlab.github.io/LightLogR/reference/frequency_crossing_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency of crossing light threshold — frequency_crossing_threshold","title":"Frequency of crossing light threshold — frequency_crossing_threshold","text":"functions calculates number times given threshold light level crossed.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/frequency_crossing_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency of crossing light threshold — frequency_crossing_threshold","text":"","code":"frequency_crossing_threshold(   Light.vector,   threshold,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/frequency_crossing_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency of crossing light threshold — frequency_crossing_threshold","text":"Light.vector Numeric vector containing light data. threshold Single numeric value specifying threshold light level compare . na.rm Logical. missing light values removed? Defaults FALSE. .df Logical. output returned data frame? TRUE, data frame single column named frequency_crossing_{threshold} returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/frequency_crossing_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency of crossing light threshold — frequency_crossing_threshold","text":"Data frame matrix pairs threshold calculated values.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/frequency_crossing_threshold.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Frequency of crossing light threshold — frequency_crossing_threshold","text":"Alvarez, . ., & Wildsoet, C. F. (2013). Quantifying light exposure patterns young adult students. Journal Modern Optics, 60(14), 1200–1208. doi:10.1080/09500340.2013.845700 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/frequency_crossing_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency of crossing light threshold — frequency_crossing_threshold","text":"","code":"N = 60 dataset1 <-   tibble::tibble(     Id = rep(\"A\", N),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(1:N),     MEDI = sample(c(sample(1:249, N / 2), sample(250:1000, N / 2))),   )  dataset1 %>%   dplyr::reframe(\"Frequency crossing 250lx\" = frequency_crossing_threshold(MEDI, threshold = 250)) #> # A tibble: 1 × 1 #>   `Frequency crossing 250lx` #>                        <int> #> 1                         28  dataset1 %>%   dplyr::reframe(frequency_crossing_threshold(MEDI, threshold = 250, as.df = TRUE)) #> # A tibble: 1 × 1 #>   frequency_crossing_250 #>                    <int> #> 1                     28"},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_finder.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for and output gaps in a dataset — gap_finder","title":"Check for and output gaps in a dataset — gap_finder","text":"Quickly check implicit missing Datetime data. Outputs message short summary, can optionally return gaps tibble. Uses gap_handler() internally.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_finder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for and output gaps in a dataset — gap_finder","text":"","code":"gap_finder(   dataset,   Datetime.colname = Datetime,   epoch = \"dominant.epoch\",   gap.data = FALSE,   silent = FALSE,   full.days = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_finder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for and output gaps in a dataset — gap_finder","text":"dataset light logger dataset. Needs dataframe. Datetime.colname column contains datetime. Needs POSIXct part dataset. epoch epoch use gapless sequence. Can either lubridate::duration() string. string, needs either '\"dominant.epoch\"' (default) guess based data valid lubridate::duration() string, e.g., \"1 day\" \"10 sec\". gap.data Logical. TRUE, returns tibble gaps dataset. Default FALSE. silent Logical. TRUE, suppresses message summary gaps dataset. Default FALSE. used unit tests. full.days TRUE, gapless sequence include whole first last day data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_finder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for and output gaps in a dataset — gap_finder","text":"Prints message short summary gaps dataset. gap.data = TRUE, returns tibble gaps dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_finder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for and output gaps in a dataset — gap_finder","text":"gap_finder() function wrapper around gap_handler() behavior argument set \"gaps\". main difference gap_finder() returns message short summary gaps dataset, tibble gaps contains column gap.id indicates gap number, useful determine, e.g., consecutive number gaps measurement data.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_finder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for and output gaps in a dataset — gap_finder","text":"","code":"dataset <- tibble::tibble(Id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"),               Datetime = lubridate::as_datetime(1) +                          lubridate::days(c(0:2, 4, 6, 8)) +                          lubridate::hours(c(0,12,rep(0,4)))) %>% dplyr::group_by(Id) dataset #> # A tibble: 6 × 2 #> # Groups:   Id [2] #>   Id    Datetime            #>   <chr> <dttm>              #> 1 A     1970-01-01 00:00:01 #> 2 A     1970-01-02 12:00:01 #> 3 A     1970-01-03 00:00:01 #> 4 B     1970-01-05 00:00:01 #> 5 B     1970-01-07 00:00:01 #> 6 B     1970-01-09 00:00:01  #look for gaps assuming the epoch is the dominant epoch of each group gap_finder(dataset) #> Found 2 gaps. 6 Datetimes fall into the regular sequence.  #return the gaps as a tibble gap_finder(dataset, gap.data = TRUE) #> Found 2 gaps. 6 Datetimes fall into the regular sequence. #> # A tibble: 2 × 3 #> # Groups:   Id [1] #>   gap.id Datetime            Id    #>    <dbl> <dttm>              <chr> #> 1      1 1970-01-01 12:00:01 A     #> 2      1 1970-01-02 00:00:01 A      #assuming the epoch is 1 day, we have different gaps, and the datapoint at noon is now `irregular` gap_finder(dataset, epoch = \"1 day\") #> Found 3 gaps. 5 Datetimes fall into the regular sequence."},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill implicit gaps in a light logger dataset — gap_handler","title":"Fill implicit gaps in a light logger dataset — gap_handler","text":"Datasets light loggers often implicit gaps. gaps implicit sense consecutive timestamps (Datetimes) might follow regular epoch/interval. function fills implicit gaps creating gapless sequence Datetimes joining dataset. gapless sequence determined minimum maximum Datetime dataset (per group) epoch. epoch can either guessed dataset specified user. sequence gapless Datetimes can created gapless_Datetimes() function, whereas dominant epoch data can checked dominant_epoch() function. behaviour argument specifies data combined. default, data joined full join, means rows gapless sequence kept, even matching row dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill implicit gaps in a light logger dataset — gap_handler","text":"","code":"gap_handler(   dataset,   Datetime.colname = Datetime,   epoch = \"dominant.epoch\",   behavior = c(\"full_sequence\", \"regulars\", \"irregulars\", \"gaps\"),   full.days = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill implicit gaps in a light logger dataset — gap_handler","text":"dataset light logger dataset. Needs dataframe. Datetime.colname column contains datetime. Needs POSIXct part dataset. epoch epoch use gapless sequence. Can either lubridate::duration() string. string, needs either '\"dominant.epoch\"' (default) guess based data valid lubridate::duration() string, e.g., \"1 day\" \"10 sec\". behavior behavior join dataset gapless sequence. Can one \"full_sequence\" (default), \"regulars\", \"irregulars\", \"gaps\". See @return details. full.days TRUE, gapless sequence include whole first last day data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill implicit gaps in a light logger dataset — gap_handler","text":"modified tibble similar dataset handling implicit gaps, depending behavior argument: \"full_sequence\" adds timestamps dataset missing based full sequence Datetimes (.e., gapless sequence). dataset equal (gaps) greater number rows input. One column added. .implicit indicates whether row added (TRUE) (FALSE). helps differentiating measurement values values might imputed later . \"regulars\" keeps rows gapless sequence matching row dataset. can interpreted row-reduced dataset regular timestamps according epoch. case gaps tibble number rows input. \"irregulars\" keeps rows dataset follow regular sequence Datetimes according epoch. case gaps tibble 0 rows. \"gaps\" returns tibble implicit gaps dataset. case gaps tibble 0 rows.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/gap_handler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill implicit gaps in a light logger dataset — gap_handler","text":"","code":"dataset <- tibble::tibble(Id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"),               Datetime = lubridate::as_datetime(1) +                          lubridate::days(c(0:2, 4, 6, 8)) +                          lubridate::hours(c(0,12,rep(0,4)))) %>%  dplyr::group_by(Id) dataset #> # A tibble: 6 × 2 #> # Groups:   Id [2] #>   Id    Datetime            #>   <chr> <dttm>              #> 1 A     1970-01-01 00:00:01 #> 2 A     1970-01-02 12:00:01 #> 3 A     1970-01-03 00:00:01 #> 4 B     1970-01-05 00:00:01 #> 5 B     1970-01-07 00:00:01 #> 6 B     1970-01-09 00:00:01 #assuming the epoch is 1 day, we can add implicit data to our dataset dataset %>% gap_handler(epoch = \"1 day\") #> # A tibble: 9 × 3 #> # Groups:   Id [2] #>   Id    Datetime            is.implicit #>   <chr> <dttm>              <lgl>       #> 1 A     1970-01-01 00:00:01 FALSE       #> 2 A     1970-01-02 00:00:01 TRUE        #> 3 A     1970-01-02 12:00:01 FALSE       #> 4 A     1970-01-03 00:00:01 FALSE       #> 5 B     1970-01-05 00:00:01 FALSE       #> 6 B     1970-01-06 00:00:01 TRUE        #> 7 B     1970-01-07 00:00:01 FALSE       #> 8 B     1970-01-08 00:00:01 TRUE        #> 9 B     1970-01-09 00:00:01 FALSE        #we can also check whether there are irregular Datetimes in our dataset dataset %>% gap_handler(epoch = \"1 day\", behavior = \"irregulars\") #> # A tibble: 1 × 3 #> # Groups:   Id [1] #>   Id    Datetime            is.implicit #>   <chr> <dttm>              <lgl>       #> 1 A     1970-01-02 12:00:01 FALSE        #to get to the gaps, we can use the \"gaps\" behavior dataset %>% gap_handler(epoch = \"1 day\", behavior = \"gaps\") #> # A tibble: 3 × 2 #> # Groups:   Id [2] #>   Id    Datetime            #>   <chr> <dttm>              #> 1 A     1970-01-02 00:00:01 #> 2 B     1970-01-06 00:00:01 #> 3 B     1970-01-08 00:00:01   #finally, we can also get just the regular Datetimes dataset %>% gap_handler(epoch = \"1 day\", behavior = \"regulars\") #> # A tibble: 5 × 3 #> # Groups:   Id [2] #>   Id    Datetime            is.implicit #>   <chr> <dttm>              <lgl>       #> 1 A     1970-01-01 00:00:01 FALSE       #> 2 A     1970-01-03 00:00:01 FALSE       #> 3 B     1970-01-05 00:00:01 FALSE       #> 4 B     1970-01-07 00:00:01 FALSE       #> 5 B     1970-01-09 00:00:01 FALSE"},{"path":"https://tscnlab.github.io/LightLogR/reference/gapless_Datetimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gapless sequence of Datetimes — gapless_Datetimes","title":"Create a gapless sequence of Datetimes — gapless_Datetimes","text":"Create gapless sequence Datetimes. Datetimes determined minimum maximum Datetime dataset epoch. epoch can either guessed dataset specified user.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gapless_Datetimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gapless sequence of Datetimes — gapless_Datetimes","text":"","code":"gapless_Datetimes(   dataset,   Datetime.colname = Datetime,   epoch = \"dominant.epoch\",   full.days = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gapless_Datetimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gapless sequence of Datetimes — gapless_Datetimes","text":"dataset light logger dataset. Needs dataframe. Datetime.colname column contains datetime. Needs POSIXct part dataset. epoch epoch use gapless sequence. Can either lubridate::duration() string. string, needs either '\"dominant.epoch\"' (default) guess based data valid lubridate::duration() string, e.g., \"1 day\" \"10 sec\". full.days TRUE, gapless sequence include whole first last day data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gapless_Datetimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gapless sequence of Datetimes — gapless_Datetimes","text":"tibble gapless sequence Datetime specified epoch.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/gapless_Datetimes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gapless sequence of Datetimes — gapless_Datetimes","text":"","code":"dataset <-    tibble::tibble(Id = c(\"A\", \"A\", \"A\", \"B\", \"B\", \"B\"),                  Datetime = lubridate::as_datetime(1) +                  lubridate::days(c(0:2, 4, 6, 8))) %>%                   dplyr::group_by(Id)      dataset %>% gapless_Datetimes() #> # A tibble: 6 × 2 #> # Groups:   Id [2] #>   Id    Datetime            #>   <chr> <dttm>              #> 1 A     1970-01-01 00:00:01 #> 2 A     1970-01-02 00:00:01 #> 3 A     1970-01-03 00:00:01 #> 4 B     1970-01-05 00:00:01 #> 5 B     1970-01-07 00:00:01 #> 6 B     1970-01-09 00:00:01   dataset %>% dplyr::ungroup() %>%  gapless_Datetimes() #> # A tibble: 5 × 1 #>   Datetime            #>   <dttm>              #> 1 1970-01-01 00:00:01 #> 2 1970-01-03 00:00:01 #> 3 1970-01-05 00:00:01 #> 4 1970-01-07 00:00:01 #> 5 1970-01-09 00:00:01   dataset %>% gapless_Datetimes(epoch = \"1 day\") #> # A tibble: 8 × 2 #> # Groups:   Id [2] #>   Id    Datetime            #>   <chr> <dttm>              #> 1 A     1970-01-01 00:00:01 #> 2 A     1970-01-02 00:00:01 #> 3 A     1970-01-03 00:00:01 #> 4 B     1970-01-05 00:00:01 #> 5 B     1970-01-06 00:00:01 #> 6 B     1970-01-07 00:00:01 #> 7 B     1970-01-08 00:00:01 #> 8 B     1970-01-09 00:00:01"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","title":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","text":"gg_day() create simple ggplot every data dataset. result can manipulated like ggplot. sensible refine styling guides.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","text":"","code":"gg_day(   dataset,   start.date = NULL,   end.date = NULL,   x.axis = Datetime,   y.axis = MEDI,   aes_col = NULL,   aes_fill = NULL,   group = Id,   geom = \"point\",   scales = c(\"fixed\", \"free_x\", \"free_y\", \"free\"),   x.axis.breaks = hms::hms(hours = seq(0, 24, by = 3)),   y.axis.breaks = c(-10^(5:0), 0, 10^(0:5)),   y.scale = \"symlog\",   y.scale.sc = FALSE,   x.axis.label = \"Time of Day\",   y.axis.label = \"Illuminance (lx, MEDI)\",   format.day = \"%d/%m\",   title = NULL,   subtitle = NULL,   interactive = FALSE,   facetting = TRUE,   jco_color = TRUE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable x.axis.. start.date, end.date Choose optional start end date within dataset. Expects date, can also character interpretable date, e.g., \"2023-06-03\". need Datetime want cut specific times day, use filter_Datetime() function. Defaults NULL, means plot starts/ends earliest/latest date within dataset. x.axis, y.axis column name contains datetime (x, defaults \"Datetime\" automatically correct data imported LightLogR) dependent variable (y, defaults \"MEDI\", melanopic EDI, standard measure stimulus strength nonvisual effects light). Expects symbol. Needs part dataset. aes_col, aes_fill optional arguments define separate sets colors fills . Expects anything works layer data ggplot2::aes(). default color palette can overwritten outside function (see examples). group Optional column name defines separate sets. Useful certain geoms like boxplot.Expects anything works layer data ggplot2::aes() geom geom used visualization? Expects character \"point\" ggplot2::geom_point() \"line\"  ggplot2::geom_line() \"ribbon\" ggplot2::geom_ribbon() value just input geom_ function ggplot2, variants work well, extensively tested. scales ggplot2::facet_wrap(), scales \"fixed\", \"free\" free one dimension (\"free_y\" default). Expects character. x.axis.breaks, y.axis.breaks breaks occur x y.axis? Expects numeric vector breaks. want activate default behaviour ggplot2, need put ggplot2::waiver(). y.scale y-axis scaled? Defaults \"symlog\", logarithmic scale can also handle negative values. \"log10\" straight logarithmic scale, handle negative values. \"identity\" nothing (continuous scaling). transforming function, symlog_trans() scales::identity_trans(), allow control. y.scale.sc logical whether scientific notation shall used. Defaults FALSE. x.axis.label, y.axis.label labels x- y-axis. Expects character. format.day Label day. Default %d/%m, shows day month. Expects character. overview sensible options look base::strptime() title Plot title. Expects character. subtitle Plot subtitle. Expects character. interactive plot interactive? Expects logical. Defaults FALSE. facetting automated facet day applied? Default TRUE uses Day.data variable function also creates present. jco_color ggsci::scale_color_jco() color palette used? Defaults TRUE. ... options get passed main geom function. Can used adjust adjust size, linewidth, linetype.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","text":"ggplot object","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","text":"Besides plotting, function creates two new variables given Datetime: Day.data factor used facetting ggplot2::facet_wrap(). Make sure use variable, change faceting manually. Also, function checks, whether variable already exists. , convert factor faceting variable. Time.data hms created hms::as_hms() used x.axis default scaling y-axis symlog scale, logarithmic scale starts scaling given threshold (default = 0). enables values 0 plot, common light logger data, even enables negative values, might sensible non-light data. See symlog_trans() details tweaking scale. scale can also changed normal logarithmic scale - see y.scale argument . default scaling color fill scales discrete, ggsci::scale_color_jco() ggsci::scale_fill_jco() scales. use continuous scale, use jco_color = FALSE setting. fill color aesthetics set NULL default. geoms, important, geoms automatically use aesthetics (like geom_bin2d, fill = stat(count)) affected . Manually adding required aesthetic (like aes_fill = ggplot2::stat(count) fix ).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simple Time-of-Day plot of light logger data, faceted by Date — gg_day","text":"","code":"#use `col`for separation of different sets plot <- gg_day( sample.data.environment, scales = \"fixed\", end.date = \"2023-08-16\", y.axis.label = \"mEDI (lx)\", aes_col = Id) #> Only Dates will be used from start.date and end.date input. If you also want to set Datetimes or Times, consider using the `filter_Datetime()` function instead. plot   #you can easily overwrite the color scale afterwards plot + ggplot2::scale_color_discrete() #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   #or change the facetting plot + ggplot2::facet_wrap(~Day.data + Id)"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simple datetime plot of light logger data, faceted by group — gg_days","title":"Create a simple datetime plot of light logger data, faceted by group — gg_days","text":"gg_days() create simple ggplot along timeline. result can manipulated like ggplot. sensible refine styling guides. x.axis.limits arguments, plot can much refined align several groups differing datetime ranges. uses Datetime_limits() function calculate limits x-axis. Another notable functions used Datetime_breaks() calculate breaks x-axis.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simple datetime plot of light logger data, faceted by group — gg_days","text":"","code":"gg_days(   dataset,   x.axis = Datetime,   y.axis = MEDI,   aes_col = NULL,   aes_fill = NULL,   group = NULL,   geom = \"line\",   scales = c(\"free_x\", \"free_y\", \"fixed\", \"free\"),   x.axis.breaks = Datetime_breaks,   y.axis.breaks = c(-10^(5:0), 0, 10^(0:5)),   y.scale = \"symlog\",   y.scale.sc = FALSE,   x.axis.label = \"Datetime\",   y.axis.label = \"Illuminance (lx, MEDI)\",   x.axis.limits = Datetime_limits,   x.axis.format = \"%a %D\",   title = NULL,   subtitle = NULL,   interactive = FALSE,   facetting = TRUE,   jco_color = FALSE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simple datetime plot of light logger data, faceted by group — gg_days","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable x.axis.. x.axis, y.axis column name contains datetime (x, defaults \"Datetime\" automatically correct data imported LightLogR) dependent variable (y, defaults \"MEDI\", melanopic EDI, standard measure stimulus strength nonvisual effects light). Expects symbol. Needs part dataset. aes_col, aes_fill optional input defines separate sets colors fills . Expects anything works layer data ggplot2::aes(). group Optional column name defines separate sets. Useful certain geoms like boxplot.Expects anything works layer data ggplot2::aes() geom geom used visualization? Expects character \"point\" ggplot2::geom_point() \"line\"  ggplot2::geom_line() \"ribbon\" ggplot2::geom_ribbon() value just input geom_ function ggplot2, variants work well, extensively tested. scales ggplot2::facet_wrap(), scales \"fixed\", \"free\" \"free\" one dimension (\"free_x\" default). Expects character. x.axis.breaks (major) breaks x-axis. Defaults Datetime_breaks(). function several options adjustment. default setting place major break every 12 hours, starting 12:00 first day. y.axis.breaks breaks occur y.axis? Expects numeric vector breaks function calculates based limits. want activate default behaviour ggplot2, need put ggplot2::waiver(). y.scale y-axis scaled? Defaults \"symlog\", logarithmic scale can also handle negative values. \"log10\" straight logarithmic scale, handle negative values. \"identity\" nothing (continuous scaling). transforming function, symlog_trans() scales::identity_trans(), allow control. y.scale.sc logical whether scientific notation shall used. Defaults FALSE. x.axis.label, y.axis.label labels x- y-axis. Expects character. x.axis.limits limits x-axis. Defaults Datetime_limits(). Can adjusted shift x-axis align different groups data. x.axis.format format x-axis labels. Defaults \"%%D\", weekday date. See base::strptime() options. title Plot title. Expects character. subtitle Plot subtitle. Expects character. interactive plot interactive? Expects logical. Defaults FALSE. facetting automated facet grouping applied? Default TRUE. jco_color ggsci::scale_color_jco() color palette used? Defaults TRUE. ... options get passed main geom function. Can used adjust adjust size, linewidth, linetype.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simple datetime plot of light logger data, faceted by group — gg_days","text":"ggplot object","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_days.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a simple datetime plot of light logger data, faceted by group — gg_days","text":"default scaling y-axis symlog scale, logarithmic scale starts scaling given threshold (default = 0). enables values 0 plot, common light logger data, even enables negative values, might sensible non-light data. See symlog_trans() details tweaking scale. scale can also changed normal logarithmic scale - see y.scale argument .","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simple datetime plot of light logger data, faceted by group — gg_days","text":"","code":"dataset <- sample.data.environment %>% aggregate_Datetime(unit = \"5 mins\")  dataset %>% gg_days()  #restrict the x-axis to 3 days dataset %>% gg_days( x.axis.limits = \\(x) Datetime_limits(x, length = lubridate::ddays(3)) ) #> Warning: Removed 864 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_doubleplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Double Plots — gg_doubleplot","title":"Double Plots — gg_doubleplot","text":"function default opinionated, automatically select best way display double date plot. However, user can also manually select type double date plot displayed: repeating day (default one day groups), displaying consecutive days (default multiple days groups).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_doubleplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double Plots — gg_doubleplot","text":"","code":"gg_doubleplot(   dataset,   Datetime.colname = Datetime,   type = c(\"auto\", \"repeat\", \"next\"),   geom = \"ribbon\",   alpha = 0.5,   col = \"grey40\",   fill = \"#EFC000FF\",   linewidth = 0.4,   x.axis.breaks.next = Datetime_breaks,   x.axis.format.next = \"%a %D\",   x.axis.breaks.repeat = ~Datetime_breaks(.x, by = \"6 hours\", shift =     lubridate::duration(0, \"hours\")),   x.axis.format.repeat = \"%H:%M\",   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_doubleplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Double Plots — gg_doubleplot","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. type One \"auto\", \"repeat\", \"next\". default \"auto\", automatically select best way display double date plot based amount days dataset (= 1 >> \"repeat\", else \"next). \"repeat\" repeat day plot, \"next\" display consecutive days. geom type geom used plot. default \"ribbon\". alpha, linewidth alpha linewidth setting geom. default 0.5 0.4, respectively. col, fill color fill geom. default \"#EFC000FF\". parameters aes_col aes_fill used ..., override respective col fill parameters. x.axis.breaks.next, x.axis.breaks.repeat Datetime breaks consecutive days displayed (type = \"next\") days repeated (type = \"repeat\"). Must function. default next label 12:00 day, repeat label every 6 hours. x.axis.format.next, x.axis.format.repeat Datetime label format consecutive days displayed (type = \"next\") days repeated (type = \"repeat\"). default next \"%%D\", showing date, repeat ist \"%H:%M\", showing hours minutes. See base::strptime() options. ... Arguments passed gg_days(). arguments aes_col aes_fill used, invalidate col fill parameters.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_doubleplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Double Plots — gg_doubleplot","text":"ggplot object","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_doubleplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Double Plots — gg_doubleplot","text":"gg_doubleplot() wrapper function gg_days(), combined internal function duplicate reorganize dates dataset double plot view. means day displayed multiple times within plot order reveal pattern across days.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_doubleplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double Plots — gg_doubleplot","text":"","code":"#take only the Participant data from sample data, and three days library(dplyr) library(lubridate) library(ggplot2) sample.data <-  sample.data.environment %>%  dplyr::filter(Id == \"Participant\") %>%  filter_Date(length = ddays(3))  #create a double plot with the default settings sample.data %>% gg_doubleplot()   #repeat the same day in the plot sample.data %>% gg_doubleplot(type = \"repeat\")   #use the function with more than one Id sample.data.environment %>%  filter_Date(length = ddays(3)) %>%  gg_doubleplot(aes_fill = Id, aes_col = Id) + facet_wrap(~ Date.data, ncol = 1, scales = \"free_x\", strip.position = \"left\")   #if data is already grouped by days, type = \"repeat\" will be automatic sample.data.environment %>%  dplyr::group_by(Date = date(Datetime), .add = TRUE) %>%  filter_Date(length = ddays(3)) %>%  gg_doubleplot(aes_fill = Id, aes_col = Id) +  guides(fill = \"none\", col = \"none\") + #remove the legend facet_wrap(~ Date.data, ncol = 1, scales = \"free_x\", strip.position = \"left\")   #combining `aggregate_Date()` with `gg_doubleplot()` easily creates a good #overview of the data sample.data.environment %>% aggregate_Date() %>% gg_doubleplot()"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an overview of dataset intervals with implicit missing data — gg_overview","title":"Plot an overview of dataset intervals with implicit missing data — gg_overview","text":"Plot overview dataset intervals implicit missing data","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an overview of dataset intervals with implicit missing data — gg_overview","text":"","code":"gg_overview(   dataset,   Datetime.colname = Datetime,   Id.colname = Id,   gap.data = NULL,   ...,   interactive = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an overview of dataset intervals with implicit missing data — gg_overview","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable x.axis.. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. Id.colname column name Id column (default Id), needs dataset. also used y-axis variable minimum grouping variable. gap.data Optionally provide tibble start end Datetimes gaps per group. provided, function uses gap_finder() calculate implicit missing data. might computationally intensive large datasets many missing data. cases can make sense calculate gaps beforehand provide function. empty tibble (tibble::tibble()) provided, function just plot start end dates dataset, computationally fast cost additional info. ... Additional arguments given main ggplot2::aes() used styling depending data within dataset interactive plot interactive? Expects logical. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an overview of dataset intervals with implicit missing data — gg_overview","text":"ggplot object","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_overview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an overview of dataset intervals with implicit missing data — gg_overview","text":"","code":"sample.data.environment %>% gg_overview()"},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a light logger dataset or related data — import_Dataset","title":"Import a light logger dataset or related data — import_Dataset","text":"Imports dataset necessary transformations get right column formats. Unless specified otherwise, function set timezone data UTC. also enforce Id separate different datasets order/arrange dataset within Id Datetime. See Details Devices section information full list arguments.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a light logger dataset or related data — import_Dataset","text":"","code":"import_Dataset(device, ...)  import"},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Import a light logger dataset or related data — import_Dataset","text":"object class list length 18.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a light logger dataset or related data — import_Dataset","text":"device device want import? devices, sample data file can use test function (see examples). See supported_devices() list supported devices see information devices specific requirements. ... Parameters get handed specific import functions","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a light logger dataset or related data — import_Dataset","text":"Tibble/Dataframe POSIXct column datetime","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a light logger dataset or related data — import_Dataset","text":"specific general import function. general import function described , whereas specific import functions take form import$device(). general import function thin wrapper around specific import functions. specific import functions take following arguments: filename: Filename(s) Dataset. Can also contain filepath, path must NULL. Expects character. vector longer 1, multiple files read one Tibble. path: Optional path dataset(s). NULL default. Expects character. n_max: maximum number lines read. Default Inf. tz: Timezone data. \"UTC\" default. Expects character. can look supported timezones OlsonNames(). Id.colname: Lets specify column id dataset. Expects symbol (Default Id). column used grouping (dplyr::group_by()). auto.id: Id.colname column part dataset, Id can automatically extracted filename. argument expects regular expression regex default just give whole filename without file extension. manual.id: argument NULL, Id column part dataset, character scalar used. discourage use arguments importing one file silent: set TRUE, function print summary message import plot overview. Default FALSE. locale: locale controls defaults vary place place. dst_adjustment: file crosses daylight savings time, device adjust time stamps accordingly, can set argument TRUE, apply shift manually. selective, done files cross DST standard time. Default FALSE. Uses dst_change_handler() adjustment. Look infos. equipped handle two jumps one file (back forth DST standard time), work fine jums occur separate files. auto.plot: logical whether call gg_overview() import. Default TRUE. set FALSE argument silent set TRUE. ...: supply additional arguments readr import functions, like na. Might also used supply arguments specific import functions, like column_names Actiwatch_Spectrum devices. devices always throw helpful error message forget supply necessary arguments. Id column already part dataset just use column. column present add column fill filename importfile (see param auto.id). print_n can used want see rows observation intervals","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"devices","dir":"Reference","previous_headings":"","what":"Devices","title":"Import a light logger dataset or related data — import_Dataset","text":"set import functions provide convenient way import light logger data perfectly formatted add metadata, make visualizations analyses. number devices supported, import just work box. get overview, can simply call supported_devices() dataset. list grow continuously package maintained.","code":"supported_devices() #>  [1] \"ActLumus\"              \"ActTrust\"              \"Actiwatch_Spectrum\" #>  [4] \"Actiwatch_Spectrum_de\" \"Circadian_Eye\"         \"DeLux\" #>  [7] \"GENEActiv_GGIR\"        \"Kronowise\"             \"LIMO\" #> [10] \"LYS\"                   \"LiDo\"                  \"LightWatcher\" #> [13] \"MotionWatch8\"          \"OcuWEAR\"               \"Speccy\" #> [16] \"SpectraWear\"           \"VEET\"                  \"nanoLambda\""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"actlumus","dir":"Reference","previous_headings":"","what":"ActLumus","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Condor Instruments Model: ActLumus Implemented: Sep 2023 sample file provided package, can accessed system.file(\"extdata/205_actlumus_Log_1020_20230904101707532.txt.zip\", package = \"LightLogR\"). need unzipped imported. sample file good example regular dataset without gaps","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"lys","dir":"Reference","previous_headings":"","what":"LYS","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: LYS Technologies Model: LYS Button Implemented: Sep 2023 sample file provided package, can accessed system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\"). sample file good example irregular dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"actiwatch-spectrum-amp-actiwatch-spectrum-de","dir":"Reference","previous_headings":"","what":"Actiwatch_Spectrum & Actiwatch_Spectrum_de","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Philips Respironics Model: Actiwatch Spectrum Implemented: Nov 2023 / July 2024 Important note: Actiwatch_Spectrum function international/english formatting. Actiwatch_Spectrum_de function german formatting, slightly differs datetime format, column names, decimal separator.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"acttrust","dir":"Reference","previous_headings":"","what":"ActTrust","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Condor Instruments Model: ActTrust1, ActTrust2 Implemented: Mar 2024 function works ActTrust 1 2 devices","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"speccy","dir":"Reference","previous_headings":"","what":"Speccy","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Monash University Model: Speccy Implemented: Feb 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"delux","dir":"Reference","previous_headings":"","what":"DeLux","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Intelligent Automation Inc Model: DeLux Implemented: Dec 2023","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"lido","dir":"Reference","previous_headings":"","what":"LiDo","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: University Lucerne Model: LiDo Implemented: Nov 2023","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"spectrawear","dir":"Reference","previous_headings":"","what":"SpectraWear","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: University Manchester Model: SpectraWear Implemented: May 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"nanolambda","dir":"Reference","previous_headings":"","what":"NanoLambda","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: NanoLambda Model: XL-500 BLE Implemented: May 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"lightwatcher","dir":"Reference","previous_headings":"","what":"LightWatcher","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Object-Tracker Model: LightWatcher Implemented: June 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"veet","dir":"Reference","previous_headings":"","what":"VEET","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Meta Reality Labs Model: VEET Implemented: July 2024 Required Argument: modality character scalar describing modality imported . Can one \"ALS\" (Ambient light sensor), \"IMU\" (Inertial Measurement Unit), \"INF\" (Information), \"PHO\" (Spectral Sensor), \"TOF\" (Time Flight)","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"circadian-eye","dir":"Reference","previous_headings":"","what":"Circadian_Eye","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Max-Planck-Institute Biological Cybernetics, Tübingen Model: melanopiQ Circadian Eye (Prototype) Implemented: July 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"kronowise","dir":"Reference","previous_headings":"","what":"Kronowise","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Kronohealth Model: Kronowise Implemented: July 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"geneactiv-with-ggir-preprocessing","dir":"Reference","previous_headings":"","what":"GENEActiv with GGIR preprocessing","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Activeinsights Model: GENEActiv Note: import function takes GENEActiv data preprocessed GGIR package. default, GGIR aggregates light data intervals 15 minutes. can set windows argument GGIR, set 900 seconds default. import preprocessed data LightLogR, filename argument requires path parent directory GGIR output folders, specifically meta folder, contains light exposure data. Multiple filenames can specified, needs path different GGIR parent directory. GGIR exports can contain data multiple participants, always imported fully providing parent directory. Use pattern argument extract sensible Ids .RData filenames within meta/basic/ folder.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"motionwatch-","dir":"Reference","previous_headings":"","what":"MotionWatch 8","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: CamNtech Implemented: September 2024","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"limo","dir":"Reference","previous_headings":"","what":"LIMO","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: ENTPE Implemented: September 2024 LIMO exports LIGHT data IMU (inertia measurements, also UV) separate files. can read function, time. Please decide type data need provide respective filenames.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"ocuwear","dir":"Reference","previous_headings":"","what":"OcuWEAR","title":"Import a light logger dataset or related data — import_Dataset","text":"Manufacturer: Ocutune Implemented: September 2024 OcuWEAR data contains spectral data. Due format data file, spectrum directly part tibble, rather list column tibbles within imported data, containing Wavelength (nm) Intensity (mW/m^2) column.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Dataset.html","id":"imports-made-easy","dir":"Reference","previous_headings":"","what":"Imports made easy","title":"Import a light logger dataset or related data — import_Dataset","text":"import file, simple specify filename (path) feed import_Dataset function. sample datasets devices. import functions provide basic overview data import, intervals measurements start end dates.   Import functions can also called directly:","code":"filepath <- system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\") dataset <- import_Dataset(\"LYS\", filepath, auto.plot = FALSE) #> #> Successfully read in 11'422 observations across 1 Ids from 1 LYS-file(s). #> Timezone set is UTC. #> The system timezone is Europe/Berlin. Please correct if necessary! #> #> First Observation: 2023-06-21 00:00:12 #> Last Observation: 2023-06-22 23:59:48 #> Timespan: 2 days #> #> Observation intervals: #>   Id              interval.time     n pct #> 1 sample_data_LYS 15s           10015 87.689% #> 2 sample_data_LYS 16s            1367 11.969% #> 3 sample_data_LYS 17s              23 0.201% #> 4 sample_data_LYS 18s              16 0.140% filepath <- system.file(\"extdata/205_actlumus_Log_1020_20230904101707532.txt.zip\", package = \"LightLogR\") dataset <- import$ActLumus(filepath, auto.plot = FALSE) #> #> Successfully read in 61'016 observations across 1 Ids from 1 ActLumus-file(s). #> Timezone set is UTC. #> The system timezone is Europe/Berlin. Please correct if necessary! #> #> First Observation: 2023-08-28 08:47:54 #> Last Observation: 2023-09-04 10:17:04 #> Timespan: 7.1 days #> #> Observation intervals: #>   Id                                          interval.time     n pct #> 1 205_actlumus_Log_1020_20230904101707532.txt 10s           61015 100% dataset %>% gg_days() dataset %>% dplyr::select(Datetime, TEMPERATURE, LIGHT, MEDI, Id) %>% dplyr::slice(1500:1505) #> # A tibble: 6 x 5 #> # Groups:   Id [1] #>   Datetime            TEMPERATURE LIGHT  MEDI Id #>   <dttm>                    <dbl> <dbl> <dbl> <fct> #> 1 2023-08-28 12:57:44        26.9  212.  202. 205_actlumus_Log_1020_20230904101~ #> 2 2023-08-28 12:57:54        26.9  208.  199. 205_actlumus_Log_1020_20230904101~ #> 3 2023-08-28 12:58:04        26.9  205.  196. 205_actlumus_Log_1020_20230904101~ #> 4 2023-08-28 12:58:14        26.8  204.  194. 205_actlumus_Log_1020_20230904101~ #> 5 2023-08-28 12:58:24        26.9  203.  194. 205_actlumus_Log_1020_20230904101~ #> 6 2023-08-28 12:58:34        26.8  204.  195. 205_actlumus_Log_1020_20230904101~"},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Statechanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data that contain Datetimes of Statechanges — import_Statechanges","title":"Import data that contain Datetimes of Statechanges — import_Statechanges","text":"Auxiliary data greatly enhances data analysis. function allows import files contain Statechanges, .e., specific time points State (like sleep wake) starts.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Statechanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data that contain Datetimes of Statechanges — import_Statechanges","text":"","code":"import_Statechanges(   filename,   path = NULL,   sep = \",\",   dec = \".\",   structure = c(\"wide\", \"long\"),   Datetime.format = \"ymdHMS\",   tz = \"UTC\",   State.colnames,   State.encoding = State.colnames,   Datetime.column = Datetime,   Id.colname,   State.newname = State,   Id.newname = Id,   keep.all = FALSE,   silent = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Statechanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data that contain Datetimes of Statechanges — import_Statechanges","text":"filename Filename(s) Dataset. Can also contain filepath, path must NULL. Expects character. vector longer 1, multiple files read one Tibble. path Optional path dataset(s). NULL default. Expects character. sep String separates columns import file. Defaults \",\". dec String indicates decimal separator import file. Defaults \".\". structure String specifies whether import file long wide format. Defaults \"wide\". Datetime.format String specifies format Datetimes file. default \"ymdHMS\" specifies format like \"2023-07-10 10:00:00\". function, lubridate::parse_date_time() actual conversion - documentation can searched valid inputs. tz Timezone data. \"UTC\" default. Expects character. can look supported timezones OlsonNames(). State.colnames Column name vector column names (latter wide format). Expects character. wide format, column names indicate State must contain Datetimes. columns pivoted columns specified Datetime.column State.newname. long format, column contains State State.encoding wide format, enables recoding column names state names, differences. default uses State.colnames argument. Expects character (vector) length State.colnames. Datetime.column Symbol Datetime column (also default). wide format, newly created column Datetimes State.colnames. long format, existing column contains Datetimes. Id.colname Symbol column contains ID subject. State.newname Symbol column contain State subject. wide format, newly created column State.colnames. long format, argument used rename State column. Id.newname Column name used renaming Id.colname column. keep.Logical specifies whether columns kept output. Defaults FALSE. silent Logical specifies whether summary imported data shown. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Statechanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data that contain Datetimes of Statechanges — import_Statechanges","text":"dataset ID, State, Datetime columns. May contain additional columns keep.TRUE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Statechanges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data that contain Datetimes of Statechanges — import_Statechanges","text":"Data can present long wide format. wide format, multiple Datetime columns indicate state column name. get pivoted long format can recoded State.encoding argument. long format, one column indicates State, gives Datetime.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_Statechanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data that contain Datetimes of Statechanges — import_Statechanges","text":"","code":"#get the example file from within the package path <- system.file(\"extdata/\", package = \"LightLogR\") file.sleep <- \"205_sleepdiary_all_20230904.csv\"  #import Data in the wide format (sleep/wake times) import_Statechanges(file.sleep, path, Datetime.format = \"dmyHM\", State.colnames = c(\"sleep\", \"offset\"), State.encoding = c(\"sleep\", \"wake\"), Id.colname = record_id, sep = \";\", dec = \",\") #>  #> Successfully read in 14 observations across 1 Ids from 1 Statechanges-file(s). #> Timezone set is UTC. #>  #> First Observation: 2023-08-28 23:20:00 #> Last Observation: 2023-09-04 07:25:00 #> Timespan: 6.3 days #>  #> Observation intervals:  #>    Id    interval.time             n pct   #>  1 205   34860s (~9.68 hours)      1 8%    #>  2 205   35520s (~9.87 hours)      1 8%    #>  3 205   35700s (~9.92 hours)      1 8%    #>  4 205   36000s (~10 hours)        1 8%    #>  5 205   36900s (~10.25 hours)     1 8%    #>  6 205   37020s (~10.28 hours)     1 8%    #>  7 205   37920s (~10.53 hours)     1 8%    #>  8 205   45780s (~12.72 hours)     1 8%    #>  9 205   48480s (~13.47 hours)     1 8%    #> 10 205   49200s (~13.67 hours)     1 8%    #> # ℹ 3 more rows #> # A tibble: 14 × 3 #> # Groups:   Id [1] #>    Id    State Datetime            #>    <fct> <chr> <dttm>              #>  1 205   sleep 2023-08-28 23:20:00 #>  2 205   wake  2023-08-29 09:37:00 #>  3 205   sleep 2023-08-29 23:40:00 #>  4 205   wake  2023-08-30 09:21:00 #>  5 205   sleep 2023-08-30 23:15:00 #>  6 205   wake  2023-08-31 09:47:00 #>  7 205   sleep 2023-08-31 23:15:00 #>  8 205   wake  2023-09-01 09:30:00 #>  9 205   sleep 2023-09-01 23:10:00 #> 10 205   wake  2023-09-02 09:10:00 #> 11 205   sleep 2023-09-02 22:55:00 #> 12 205   wake  2023-09-03 08:47:00 #> 13 205   sleep 2023-09-03 21:30:00 #> 14 205   wake  2023-09-04 07:25:00  #import in the long format (Comments on sleep) import_Statechanges(file.sleep, path,                    Datetime.format = \"dmyHM\",                    State.colnames = \"comments\",                    Datetime.column = sleep,                    Id.colname = record_id,                    sep = \";\",                    dec = \",\", structure = \"long\") #>  #> Successfully read in 7 observations across 1 Ids from 1 Statechanges-file(s). #> Timezone set is UTC. #>  #> First Observation: 2023-08-28 23:20:00 #> Last Observation: 2023-09-03 21:30:00 #> Timespan: 5.9 days #>  #> Observation intervals:  #>   Id    interval.time             n pct   #> 1 205   81300s (~22.58 hours)     1 17%   #> 2 205   84900s (~23.58 hours)     1 17%   #> 3 205   85500s (~23.75 hours)     1 17%   #> 4 205   86100s (~23.92 hours)     1 17%   #> 5 205   86400s (~1 days)          1 17%   #> 6 205   87600s (~1.01 days)       1 17%   #> # A tibble: 7 × 3 #> # Groups:   Id [1] #>   Id    State                                                Datetime            #>   <fct> <chr>                                                <dttm>              #> 1 205   Slept longer than usual since my kids are on Summer… 2023-08-28 23:20:00 #> 2 205   no                                                   2023-08-29 23:40:00 #> 3 205   Kids slept in my bed                                 2023-08-30 23:15:00 #> 4 205   none                                                 2023-08-31 23:15:00 #> 5 205   woke Up and could Not Fall asleep. went to the dini… 2023-09-01 23:10:00 #> 6 205   none                                                 2023-09-02 22:55:00 #> 7 205   no                                                   2023-09-03 21:30:00"},{"path":"https://tscnlab.github.io/LightLogR/reference/import_adjustment.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust device imports or make your own — import_adjustment","title":"Adjust device imports or make your own — import_adjustment","text":"Adjust device imports make ","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_adjustment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust device imports or make your own — import_adjustment","text":"","code":"import_adjustment(import_expr)"},{"path":"https://tscnlab.github.io/LightLogR/reference/import_adjustment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust device imports or make your own — import_adjustment","text":"import_expr named list import expressions. basis LightLogR's import functions included dataset ll_import_expr(). function given exact dataset, bound variable called import, identical import function. See details.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_adjustment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust device imports or make your own — import_adjustment","text":"list import functions","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_adjustment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust device imports or make your own — import_adjustment","text":"function used knowledge expressions work R. minimal required output expression work expected, must lead data frame containing Datetime column correct time zone. access arguments defined description import_Dataset(). ... argument passed whatever csv reader function used, works expected. Look ll_import_expr()$LYS quite minimal example.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import_adjustment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust device imports or make your own — import_adjustment","text":"","code":"#create a new import function for the LYS device, same as the old new_import <- import_adjustment(ll_import_expr()) #the new one is identical to the old one in terms of the function body identical(body(import$LYS), body(new_import$LYS)) #> [1] TRUE  #change the import expression for the LYS device to add a message at the top new_import_expr <- ll_import_expr() new_import_expr$LYS[[4]] <- rlang::expr({ cat(\"**This is a new import function**\\n\") data }) new_import <- import_adjustment(new_import_expr) filepath <- system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\") #Now, a message is printed when the import function is called new_import <- new_import$LYS(filepath) #> **This is a new import function** #>  #> Successfully read in 11'422 observations across 1 Ids from 1 LYS-file(s). #> Timezone set is UTC. #>  #> First Observation: 2023-06-21 00:00:12 #> Last Observation: 2023-06-22 23:59:48 #> Timespan: 2 days #>  #> Observation intervals:  #>   Id              interval.time     n pct     #> 1 sample_data_LYS 15s           10015 87.689% #> 2 sample_data_LYS 16s            1367 11.969% #> 3 sample_data_LYS 17s              23 0.201%  #> 4 sample_data_LYS 18s              16 0.140%"},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Interdaily stability (IS) — interdaily_stability","title":"Interdaily stability (IS) — interdaily_stability","text":"function calculates variability 24h light exposure patterns across multiple days. Calculated ratio variance average daily pattern total variance across days. Calculated mean hourly light levels. Ranges 0 (Gaussian noise) 1 (Perfect Stability).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interdaily stability (IS) — interdaily_stability","text":"","code":"interdaily_stability(   Light.vector,   Datetime.vector,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interdaily stability (IS) — interdaily_stability","text":"Light.vector Numeric vector containing light data. Datetime.vector Vector containing time data. Must POSIXct. na.rm Logical. missing values removed? Defaults FALSE. .df Logical. output returned data frame? TRUE, data frame single column named interdaily_stability returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interdaily stability (IS) — interdaily_stability","text":"Numeric value dataframe column ''.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interdaily stability (IS) — interdaily_stability","text":"Note metric always 1 data contains one 24 h day.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interdaily stability (IS) — interdaily_stability","text":"Van Someren, E. J. W., Swaab, D. F., Colenda, C. C., Cohen, W., McCall, W. V., & Rosenquist, P. B. (1999). Bright Light Therapy: Improved Sensitivity Effects Rest-Activity Rhythms Alzheimer Patients Application Nonparametric Methods. Chronobiology International, 16(4), 505–518. doi:10.3109/07420529908998724 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/interdaily_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interdaily stability (IS) — interdaily_stability","text":"","code":"set.seed(1) N <- 24 * 7 # Calculate metric for seven 24 h days with two measurements per hour dataset1 <-   tibble::tibble(     Id = rep(\"A\", N * 2),     Datetime = lubridate::as_datetime(0) + c(lubridate::minutes(seq(0, N * 60 - 30, 30))),     MEDI = sample(1:1000, N * 2)   ) dataset1 %>%   dplyr::summarise(     \"Interdaily stability\" = interdaily_stability(MEDI, Datetime)   ) #> # A tibble: 1 × 1 #>   `Interdaily stability` #>                    <dbl> #> 1                  0.153"},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a state column to a dataset from interval data — interval2state","title":"Adds a state column to a dataset from interval data — interval2state","text":"function can make use Interval data contain States (like \"sleep\", \"wake\", \"wear\") add column light logger dataset, State  every Datetime specified, based participant's Id.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a state column to a dataset from interval data — interval2state","text":"","code":"interval2state(   dataset,   State.interval.dataset,   Datetime.colname = Datetime,   State.colname = State,   Interval.colname = Interval,   Id.colname.dataset = Id,   Id.colname.interval = Id,   overwrite = FALSE,   output.dataset = TRUE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a state column to a dataset from interval data — interval2state","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. State.interval.dataset Name dataset contains State Interval columns. Interval data can created, e.g., sc2interval(). Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. State.colname, Interval.colname Column names State Interval State.interval.dataset. Expects symbol. State dataset yet function give error. can also set overwrite = TRUE. Id.colname.dataset, Id.colname.interval Column names participant's Id dataset State.interval.dataset. -chance inconsistencies, names can different. datasets imported preprocessed LightLogR, just works. datasets need Id, states added based Datetime, also depending dataset. overwrite TRUE (defaults FALSE), function overwrite State.colname column already exists. output.dataset output data.frame (Default TRUE) vector hms (FALSE) times? Expects logical scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a state column to a dataset from interval data — interval2state","text":"One data.frame object identical dataset state column added vector states","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a state column to a dataset from interval data — interval2state","text":"","code":"#create a interval dataset library(tibble) library(dplyr) library(lubridate) library(rlang) library(purrr) #>  #> Attaching package: ‘purrr’ #> The following objects are masked from ‘package:rlang’: #>  #>     %@%, flatten, flatten_chr, flatten_dbl, flatten_int, flatten_lgl, #>     flatten_raw, invoke, splice states <- tibble::tibble(Datetime = c(\"2023-08-15 6:00:00\",                                       \"2023-08-15 23:00:00\",                                       \"2023-08-16 6:00:00\",                                       \"2023-08-16 22:00:00\",                                       \"2023-08-17 6:30:00\",                                       \"2023-08-18 1:00:00\",                                       \"2023-08-18 6:00:00\",                                       \"2023-08-18 22:00:00\",                                       \"2023-08-19 6:00:00\",                                       \"2023-08-19 23:00:00\",                                       \"2023-08-20 6:00:00\",                                       \"2023-08-20 22:00:00\"),                          State = rep(c(\"wake\", \"sleep\"), 6),                          Wear = rep(c(\"wear\", \"no wear\"), 6),                          Performance = rep(c(100, 0), 6),                          Id = \"Participant\") intervals <- sc2interval(states)  #create a dataset with states dataset_with_states <- sample.data.environment %>% interval2state(State.interval.dataset = intervals)  #visualize the states - note that the states are only added to the respective ID in the dataset library(ggplot2) ggplot(dataset_with_states, aes(x = Datetime, y = MEDI, color = State)) +  geom_point() +  facet_wrap(~Id, ncol = 1)   #import multiple State columns from the interval dataset #interval2state will only add a single State column to the dataset,  #which represents sleep/wake in our case dataset_with_states[8278:8283,] #> # A tibble: 6 × 4 #> # Groups:   Id [1] #>   Datetime             MEDI Id          State #>   <dttm>              <dbl> <chr>       <chr> #> 1 2023-08-15 22:59:31  2.38 Participant wake  #> 2 2023-08-15 22:59:41  2.34 Participant wake  #> 3 2023-08-15 22:59:51  2.25 Participant wake  #> 4 2023-08-15 23:00:01  1.95 Participant sleep #> 5 2023-08-15 23:00:11  2.6  Participant sleep #> 6 2023-08-15 23:00:21  2.36 Participant sleep  #if we want to add multiple columns we can either perfom the function  #multiple times with different states: dataset_with_states2 <-  dataset_with_states %>% interval2state(State.interval.dataset = intervals, State.colname = Wear) dataset_with_states2[8278:8283,] #> # A tibble: 6 × 5 #> # Groups:   Id [1] #>   Datetime             MEDI Id          State Wear    #>   <dttm>              <dbl> <chr>       <chr> <chr>   #> 1 2023-08-15 22:59:31  2.38 Participant wake  wear    #> 2 2023-08-15 22:59:41  2.34 Participant wake  wear    #> 3 2023-08-15 22:59:51  2.25 Participant wake  wear    #> 4 2023-08-15 23:00:01  1.95 Participant sleep no wear #> 5 2023-08-15 23:00:11  2.6  Participant sleep no wear #> 6 2023-08-15 23:00:21  2.36 Participant sleep no wear  #or we can use `purrr::reduce` to add multiple columns at once dataset_with_states3 <- syms(c(\"State\", \"Wear\", \"Performance\")) %>%  reduce(\\(x,y) interval2state(x, State.interval.dataset = intervals, State.colname = !!y),  .init = sample.data.environment)  #Note:  # - the State.colnames have to be provided as symbols (`rlang::syms`) # - the reduce function requires a two argument function `\\(x,y)`, where `x`  #   is the dataset to be continiously modified and `y` is the symbol of the #   State column name to be added # - the `!!` operator from `rlang` is used to exchange `y` with each symbol # - the `.init` argument is the initial dataset to be modified  #this results in all states being applied dataset_with_states3[8278:8283,] #> # A tibble: 6 × 6 #> # Groups:   Id [1] #>   Datetime             MEDI Id          State Wear    Performance #>   <dttm>              <dbl> <chr>       <chr> <chr>         <dbl> #> 1 2023-08-15 22:59:31  2.38 Participant wake  wear            100 #> 2 2023-08-15 22:59:41  2.34 Participant wake  wear            100 #> 3 2023-08-15 22:59:51  2.25 Participant wake  wear            100 #> 4 2023-08-15 23:00:01  1.95 Participant sleep no wear           0 #> 5 2023-08-15 23:00:11  2.6  Participant sleep no wear           0 #> 6 2023-08-15 23:00:21  2.36 Participant sleep no wear           0"},{"path":"https://tscnlab.github.io/LightLogR/reference/intradaily_variability.html","id":null,"dir":"Reference","previous_headings":"","what":"Intradaily variability (IV) — intradaily_variability","title":"Intradaily variability (IV) — intradaily_variability","text":"function calculates variability consecutive Light levels within 24h day. Calculated ratio variance differences consecutive Light levels total variance across day. Calculated mean hourly Light levels. Higher values indicate fragmentation.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/intradaily_variability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intradaily variability (IV) — intradaily_variability","text":"","code":"intradaily_variability(   Light.vector,   Datetime.vector,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/intradaily_variability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intradaily variability (IV) — intradaily_variability","text":"Light.vector Numeric vector containing light data. Datetime.vector Vector containing time data. Must POSIXct. na.rm Logical. missing values removed? Defaults FALSE. .df Logical. output returned data frame? TRUE, data frame single column named intradaily_variability returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/intradaily_variability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intradaily variability (IV) — intradaily_variability","text":"Numeric value dataframe column 'IV'.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/intradaily_variability.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Intradaily variability (IV) — intradaily_variability","text":"Van Someren, E. J. W., Swaab, D. F., Colenda, C. C., Cohen, W., McCall, W. V., & Rosenquist, P. B. (1999). Bright Light Therapy: Improved Sensitivity Effects Rest-Activity Rhythms Alzheimer Patients Application Nonparametric Methods. Chronobiology International, 16(4), 505–518. doi:10.3109/07420529908998724 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/intradaily_variability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intradaily variability (IV) — intradaily_variability","text":"","code":"set.seed(1) N <- 24 * 2 # Calculate metric for two 24 h days with two measurements per hour dataset1 <-   tibble::tibble(     Id = rep(\"A\", N * 2),     Datetime = lubridate::as_datetime(0) + c(lubridate::minutes(seq(0, N * 60 - 30, 30))),     MEDI = sample(1:1000, N * 2)   ) dataset1 %>%   dplyr::summarise(     \"Intradaily variability\" = intradaily_variability(MEDI, Datetime)   ) #> # A tibble: 1 × 1 #>   `Intradaily variability` #>                      <dbl> #> 1                     1.71"},{"path":"https://tscnlab.github.io/LightLogR/reference/join_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Join similar Datasets — join_datasets","title":"Join similar Datasets — join_datasets","text":"Join Light logging datasets common structure. least commonality identical columns Datetime Id across sets.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/join_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join similar Datasets — join_datasets","text":"","code":"join_datasets(   ...,   Datetime.column = Datetime,   Id.column = Id,   add.origin = FALSE,   debug = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/join_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join similar Datasets — join_datasets","text":"... Object names datasets need joined. Datetime.column, Id.column Column names Datetime id columns. defaults (Datetime, Id) already set data imported LightLogR. add.origin column named dataset joined data indicate dataset observation originated? Defaults FALSE Id column suffice. Expects logical. debug Output changes tibble indicating dataset missing respective Datetime Id column. Expects logical defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/join_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join similar Datasets — join_datasets","text":"One data.frame joined datasets tibble datasets missing columns. debug = TRUE","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/join_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join similar Datasets — join_datasets","text":"","code":"#load in two datasets path <- system.file(\"extdata\",  package = \"LightLogR\") file.LL <- \"205_actlumus_Log_1020_20230904101707532.txt.zip\" file.env <- \"cyepiamb_CW35_Log_1431_20230904081953614.txt.zip\" dataset.LL <- import$ActLumus(file.LL, path, auto.id = \"^(\\\\d{3})\") #>  #> Successfully read in 61'016 observations across 1 Ids from 1 ActLumus-file(s). #> Timezone set is UTC. #>  #> First Observation: 2023-08-28 08:47:54 #> Last Observation: 2023-09-04 10:17:04 #> Timespan: 7.1 days #>  #> Observation intervals:  #>   Id    interval.time     n pct   #> 1 205   10s           61015 100%   dataset.env <- import$ActLumus(file.env, path, manual.id = \"CW35\") #>  #> Successfully read in 20'143 observations across 1 Ids from 1 ActLumus-file(s). #> Timezone set is UTC. #>  #> First Observation: 2023-08-28 08:28:39 #> Last Observation: 2023-09-04 08:19:38 #> Timespan: 7 days #>  #> Observation intervals:  #>   Id    interval.time     n pct   #> 1 CW35  29s               1 0%    #> 2 CW35  30s           20141 100%    #join the datasets joined <- join_datasets(dataset.LL, dataset.env)  #compare the number of rows nrow(dataset.LL) + nrow(dataset.env) == nrow(joined) #> [1] TRUE  #debug, when set to TRUE, will output a tibble of datasets with missing necessary columns dataset.LL <- dataset.LL %>% dplyr::select(-Datetime) join_datasets(dataset.LL, dataset.env, debug = TRUE) #> # A tibble: 2 × 2 #>   column.names.in dataset.LL #>   <chr>           <lgl>      #> 1 Datetime        FALSE      #> 2 Id              TRUE"},{"path":"https://tscnlab.github.io/LightLogR/reference/ll_import_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the import expression for a device — ll_import_expr","title":"Get the import expression for a device — ll_import_expr","text":"Returns import expression device LightLogR.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/ll_import_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the import expression for a device — ll_import_expr","text":"","code":"ll_import_expr()"},{"path":"https://tscnlab.github.io/LightLogR/reference/ll_import_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the import expression for a device — ll_import_expr","text":"list import expressions supported devices","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/ll_import_expr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the import expression for a device — ll_import_expr","text":"expressions used import prepare data specific devices. list made explicit, user, requiring slight changes import functions, (e.g., timestamp formatted differently) can modify add list. list can turned fully functional import function import_adjustment().","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/ll_import_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the import expression for a device — ll_import_expr","text":"","code":"ll_import_expr()[1] #> $ActLumus #> { #>     data <- suppressMessages(readr::read_delim(filename, skip = 32,  #>         delim = \";\", n_max = n_max, col_types = paste0(\"c\", paste0(rep(\"d\",  #>             32), collapse = \"\")), id = \"file.name\", locale = locale,  #>         name_repair = \"universal\", ...)) #>     data <- data %>% dplyr::rename(Datetime = DATE.TIME, MEDI = MELANOPIC.EDI) %>%  #>         dplyr::mutate(Datetime = Datetime %>% lubridate::dmy_hms(tz = tz)) #> } #>"},{"path":"https://tscnlab.github.io/LightLogR/reference/midpointCE.html","id":null,"dir":"Reference","previous_headings":"","what":"Midpoint of cumulative light exposure. — midpointCE","title":"Midpoint of cumulative light exposure. — midpointCE","text":"function calculates timing corresponding half cumulative light exposure within given time series.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/midpointCE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Midpoint of cumulative light exposure. — midpointCE","text":"","code":"midpointCE(Light.vector, Time.vector, na.rm = FALSE, as.df = FALSE)"},{"path":"https://tscnlab.github.io/LightLogR/reference/midpointCE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Midpoint of cumulative light exposure. — midpointCE","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. na.rm Logical. missing values removed calculation? TRUE, missing values replaced zero. Defaults FALSE. .df Logical. output returned data frame? TRUE, data frame single column named midpointCE returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/midpointCE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Midpoint of cumulative light exposure. — midpointCE","text":"Single column data frame vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/midpointCE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Midpoint of cumulative light exposure. — midpointCE","text":"Shochat, T., Santhi, N., Herer, P., Flavell, S. ., Skeldon, . C., & Dijk, D.-J. (2019). Sleep Timing Late Autumn Late Spring Associates Light Exposure Rather Sun Time College Students. Frontiers Neuroscience, 13. doi:10.3389/fnins.2019.00882 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/midpointCE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Midpoint of cumulative light exposure. — midpointCE","text":"","code":"dataset1 <-   tibble::tibble(     Id = rep(\"A\", 24),     Datetime = lubridate::as_datetime(0) + lubridate::hours(0:23),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   ) dataset1 %>%   dplyr::reframe(     \"Midpoint of cmulative exposure\" = midpointCE(MEDI, Datetime)   ) #> # A tibble: 1 × 1 #>   `Midpoint of cmulative exposure` #>   <dttm>                           #> 1 1970-01-01 11:00:00               # Dataset with HMS time vector dataset2 <-   tibble::tibble(     Id = rep(\"A\", 24),     Time = hms::as_hms(lubridate::as_datetime(0) + lubridate::hours(0:23)),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   ) dataset2 %>%   dplyr::reframe(     \"Midpoint of cmulative exposure\" = midpointCE(MEDI, Time)   ) #> # A tibble: 1 × 1 #>   `Midpoint of cmulative exposure` #>   <time>                           #> 1 11:00                             # Dataset with duration time vector dataset3 <-   tibble::tibble(     Id = rep(\"A\", 24),     Hour = lubridate::duration(0:23, \"hours\"),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   ) dataset3 %>%   dplyr::reframe(     \"Midpoint of cmulative exposure\" = midpointCE(MEDI, Hour)   ) #> # A tibble: 1 × 1 #>   `Midpoint of cmulative exposure` #>   <Duration>                       #> 1 39600s (~11 hours)"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-visual circadian response — nvRC","title":"Non-visual circadian response — nvRC","text":"function calculates non-visual circadian response (nvRC). takes account assumed response dynamics non-visual system circadian rhythm processes light exposure signal quantify effective circadian-weighted input non-visual system (see Details).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-visual circadian response — nvRC","text":"","code":"nvRC(   MEDI.vector,   Illuminance.vector,   Time.vector,   epoch = \"dominant.epoch\",   sleep.onset = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-visual circadian response — nvRC","text":"MEDI.vector Numeric vector containing melanopic EDI data. Illuminance.vector Numeric vector containing Illuminance data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". sleep.onset time habitual sleep onset. Can HMS, numeric, NULL. NULL (default), data assumed start habitual sleep onset. Time.vector HMS POSIXct, sleep.onset must HMS. Likewise, Time.vector numeric, sleep.onset must numeric.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-visual circadian response — nvRC","text":"numeric vector containing nvRC data. output length Time.vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-visual circadian response — nvRC","text":"timeseries assumed regular. Missing values light data replaced 0.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-visual circadian response — nvRC","text":"Amundadottir, M.L. (2016). Light-driven model identifying indicators non-visual health potential built environment [Doctoral dissertation, EPFL]. EPFL infoscience. doi:10.5075/epfl-thesis-7146","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-visual circadian response — nvRC","text":"","code":"dataset1 <-   tibble::tibble(     Id = rep(\"B\", 60 * 48),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*48-1)),     Illuminance = c(rep(0, 60*8), rep(sample(1:1000, 16, replace = TRUE), each = 60),                     rep(0, 60*8), rep(sample(1:1000, 16, replace = TRUE), each = 60)),     MEDI = Illuminance * rep(sample(0.5:1.5, 48, replace = TRUE), each = 60)   ) # Time.vector as POSIXct dataset1.nvRC <- dataset1 %>%   dplyr::mutate(     nvRC = nvRC(MEDI, Illuminance, Datetime, sleep.onset = hms::as_hms(\"22:00:00\"))   )  # Time.vector as difftime dataset2 <- dataset1 %>%    dplyr::mutate(Datetime = Datetime - lubridate::as_datetime(lubridate::dhours(22))) dataset2.nvRC <- dataset2 %>%   dplyr::mutate(     nvRC = nvRC(MEDI, Illuminance, Datetime, sleep.onset = lubridate::dhours(0))   )"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Performance metrics for circadian response — nvRC_metrics","title":"Performance metrics for circadian response — nvRC_metrics","text":"functions compare non-visual circadian response (see nvRC) measured personal light exposure nvRC reference light exposure pattern, daylight.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performance metrics for circadian response — nvRC_metrics","text":"","code":"nvRC_circadianDisturbance(nvRC, nvRC.ref, as.df = FALSE)  nvRC_circadianBias(nvRC, nvRC.ref, as.df = FALSE)  nvRC_relativeAmplitudeError(nvRC, nvRC.ref, as.df = FALSE)"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performance metrics for circadian response — nvRC_metrics","text":"nvRC Time series non-visual circadian response (see nvRC. nvRC.ref Time series non-visual circadian response circadian response (see nvRC reference light exposure pattern (e.g., daylight). Must length nvRC. .df Logical. output returned data frame? Defaults TRUE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performance metrics for circadian response — nvRC_metrics","text":"numeric value single column data frame.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Performance metrics for circadian response — nvRC_metrics","text":"nvRC_circadianDisturbance() calculates circadian disturbance (CD). expressed $$CD(,T)=\\frac{1}{T}\\int_{t_{}}^{t_{}+T}    {\\lvert r_{C}(t)-r_{C}^{ref}(t)\\rvert dt},$$ quantifies total difference measured circadian response circadian response reference profile. nvRC_circadianBias() calculates circadian bias (CB). expressed $$CB(,T)=\\frac{1}{T}\\int_{t_{}}^{t_{}+T}    {(r_{C}(t)-r_{C}^{ref}(t))dt},$$ provides measure overall trend difference circadian response, .e. positive values overestimating negative underestimating measured circadian response circadian response reference profile. nvRC_relativeAmplitudeError() calculates relative amplitude error (RAE). expressed $$RAE(,T)=r_{C,max}-r_{C,max}^{ref},$$ quantifies difference maximum response achieved period reference signal.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performance metrics for circadian response — nvRC_metrics","text":"Amundadottir, M.L. (2016). Light-driven model identifying indicators non-visual health potential built environment [Doctoral dissertation, EPFL]. EPFL infoscience. doi:10.5075/epfl-thesis-7146","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRC_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performance metrics for circadian response — nvRC_metrics","text":"","code":"dataset1 <-    tibble::tibble(     Id = rep(\"B\", 60 * 24),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*24-1)),     Illuminance = c(rep(0, 60*8), rep(sample(1:1000, 16, replace = TRUE), each = 60)),     MEDI = Illuminance * rep(sample(0.5:1.5, 24, replace = TRUE), each = 60),   ) %>%   dplyr::mutate(     nvRC = nvRC(MEDI, Illuminance, Datetime, sleep.onset = hms::as_hms(\"22:00:00\"))   )  dataset.reference <-   tibble::tibble(     Id = rep(\"Daylight\", 60 * 24),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*24-1)),     Illuminance = c(rep(0, 60*6), rep(10000, 12*60), rep(0, 60*6)),     MEDI = Illuminance   ) %>%   dplyr::mutate(     nvRC = nvRC(MEDI, Illuminance, Datetime, sleep.onset = hms::as_hms(\"22:00:00\"))   )  # Circadian disturbance nvRC_circadianDisturbance(dataset1$nvRC, dataset.reference$nvRC) #> [1] 0.2605862  # Circadian bias nvRC_circadianBias(dataset1$nvRC, dataset.reference$nvRC) #> [1] -0.04904808  # Relative amplitude error nvRC_relativeAmplitudeError(dataset1$nvRC, dataset.reference$nvRC) #> [1] 0.3263525"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-visual direct response — nvRD","title":"Non-visual direct response — nvRD","text":"function calculates non-visual direct response (nvRD). takes account assumed response dynamics non-visual system processes light exposure signal quantify effective direct input non-visual system (see Details).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-visual direct response — nvRD","text":"","code":"nvRD(MEDI.vector, Illuminance.vector, Time.vector, epoch = \"dominant.epoch\")"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-visual direct response — nvRD","text":"MEDI.vector Numeric vector containing melanopic EDI data. Illuminance.vector Numeric vector containing Illuminance data. Time.vector Vector containing time data. Can POSIXct(),hms::hms(), lubridate::duration(), difftime(). epoch epoch data sampled. Can either lubridate::duration() string. string, needs either \"dominant.epoch\" (default) guess based data, valid lubridate::duration() string, e.g., \"1 day\" \"10 sec\".","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-visual direct response — nvRD","text":"numeric vector containing nvRD data. output length Time.vector.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-visual direct response — nvRD","text":"timeseries assumed regular. Missing values light data replaced 0.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-visual direct response — nvRD","text":"Amundadottir, M.L. (2016). Light-driven model identifying indicators non-visual health potential built environment [Doctoral dissertation, EPFL]. EPFL infoscience. doi:10.5075/epfl-thesis-7146","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-visual direct response — nvRD","text":"","code":"# Dataset 1 with 24h measurement dataset1 <-   tibble::tibble(     Id = rep(\"A\", 60 * 24),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*24-1)),     Illuminance = c(rep(0, 60*8), rep(sample(1:1000, 16, replace = TRUE), each = 60)),     MEDI = Illuminance * rep(sample(0.5:1.5, 24, replace = TRUE), each = 60)   )  # Dataset 2 with 48h measurement dataset2 <-   tibble::tibble(     Id = rep(\"B\", 60 * 48),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*48-1)),     Illuminance = c(rep(0, 60*8), rep(sample(1:1000, 16, replace = TRUE), each = 60),                      rep(0, 60*8), rep(sample(1:1000, 16, replace = TRUE), each = 60)),     MEDI = Illuminance * rep(sample(0.5:1.5, 48, replace = TRUE), each = 60)   ) # Combined datasets dataset.combined <- rbind(dataset1, dataset2)  # Calculate nvRD per ID dataset.combined.nvRD <- dataset.combined %>%    dplyr::group_by(Id) %>%    dplyr::mutate(     nvRD = nvRD(MEDI, Illuminance, Datetime)   )"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD_cumulative_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative non-visual direct response — nvRD_cumulative_response","title":"Cumulative non-visual direct response — nvRD_cumulative_response","text":"function calculates cumulative non-visual direct response (nvRD). basically integral nvRD provided time period hours. unit resulting value thus \"nvRD*h\".","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD_cumulative_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative non-visual direct response — nvRD_cumulative_response","text":"","code":"nvRD_cumulative_response(   nvRD,   Time.vector,   epoch = \"dominant.epoch\",   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD_cumulative_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative non-visual direct response — nvRD_cumulative_response","text":"nvRD Numeric vector containing non-visual direct response. See nvRD. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". .df Logical. data frame returned? TRUE, data frame single column named nvRD_cumulative returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD_cumulative_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative non-visual direct response — nvRD_cumulative_response","text":"numeric value single column data frame.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD_cumulative_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cumulative non-visual direct response — nvRD_cumulative_response","text":"Amundadottir, M.L. (2016). Light-driven model identifying indicators non-visual health potential built environment [Doctoral dissertation, EPFL]. EPFL infoscience. doi:10.5075/epfl-thesis-7146","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/nvRD_cumulative_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative non-visual direct response — nvRD_cumulative_response","text":"","code":"dataset1 <-   tibble::tibble(     Id = rep(\"A\", 60 * 24),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(0:(60*24-1)),     Illuminance = c(rep(0, 60*8), rep(sample(1:1000, 14, replace = TRUE), each = 60), rep(0, 60*2)),     MEDI = Illuminance * rep(sample(0.5:1.5, 24, replace = TRUE), each = 60)   ) %>%   dplyr::mutate(     nvRD = nvRD(MEDI, Illuminance, Datetime)   )  dataset1 %>%    dplyr::summarise(     \"cumulative nvRD\" = nvRD_cumulative_response(nvRD, Datetime)   ) #> # A tibble: 1 × 1 #>   `cumulative nvRD` #>               <dbl> #> 1              8.72"},{"path":"https://tscnlab.github.io/LightLogR/reference/period_above_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Length of longest continuous period above/below threshold — period_above_threshold","title":"Length of longest continuous period above/below threshold — period_above_threshold","text":"function finds length longest continous period /specified threshold light level within specified range light levels.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/period_above_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length of longest continuous period above/below threshold — period_above_threshold","text":"","code":"period_above_threshold(   Light.vector,   Time.vector,   comparison = c(\"above\", \"below\"),   threshold,   epoch = \"dominant.epoch\",   loop = FALSE,   na.replace = FALSE,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/period_above_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length of longest continuous period above/below threshold — period_above_threshold","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. comparison String specifying whether period light levels threshold calculated. Can either \"\" (default) \"\". two values provided threshold, argument ignored. threshold Single numeric value two numeric values specifying threshold light level(s) compare . vector two values provided, period light levels within two thresholds calculated. epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". loop Logical. data looped? Defaults FALSE. na.replace Logical. missing values (NA) replaced calculation? TRUE missing values removed result FALSE comparing Light.vector threshold. Defaults FALSE. na.rm Logical. missing values (NA) removed calculation? TRUE, argument override na.replace. Defaults FALSE. .df Logical. data frame returned? TRUE, data frame single column named period_{comparison}_{threshold} returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/period_above_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of longest continuous period above/below threshold — period_above_threshold","text":"duration object (see duration) single value, single column data frame.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/period_above_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of longest continuous period above/below threshold — period_above_threshold","text":"","code":"N <- 60 # Dataset with continous period of >250lx for 35min dataset1 <-   tibble::tibble(     Id = rep(\"A\", N),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(1:N),     MEDI = c(sample(1:249, N-35, replace = TRUE),               sample(250:1000, 35, replace = TRUE))   )  dataset1 %>%   dplyr::reframe(\"Period >250lx\" = period_above_threshold(MEDI, Datetime, threshold = 250)) #> # A tibble: 1 × 1 #>   `Period >250lx`     #>   <Duration>          #> 1 2100s (~35 minutes)  dataset1 %>%   dplyr::reframe(\"Period <250lx\" = period_above_threshold(MEDI, Datetime, \"below\", threshold = 250)) #> # A tibble: 1 × 1 #>   `Period <250lx`     #>   <Duration>          #> 1 1500s (~25 minutes)  # Dataset with continous period of 100-250lx for 20min dataset2 <-   tibble::tibble(     Id = rep(\"B\", N),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(1:N),     MEDI = c(sample(c(1:99, 251-1000), N-20, replace = TRUE),               sample(100:250, 20, replace = TRUE)),   ) dataset2 %>%   dplyr::reframe(\"Period 250lx\" = period_above_threshold(MEDI, Datetime, threshold = c(100,250))) #> # A tibble: 1 × 1 #>   `Period 250lx`      #>   <Duration>          #> 1 1200s (~20 minutes)  # Return data frame dataset1 %>%   dplyr::reframe(period_above_threshold(MEDI, Datetime, threshold = 250, as.df = TRUE)) #> # A tibble: 1 × 1 #>   period_above_250    #>   <Duration>          #> 1 2100s (~35 minutes)"},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulses above threshold — pulses_above_threshold","title":"Pulses above threshold — pulses_above_threshold","text":"function clusters light data continuous clusters (pulses) light /given threshold. Clustering may fine-tuned setting minimum length clusters allowing brief interruptions included single cluster, specified maximum length interruption episodes proportion total amount interruptions light threshold.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulses above threshold — pulses_above_threshold","text":"","code":"pulses_above_threshold(   Light.vector,   Time.vector,   comparison = c(\"above\", \"below\"),   threshold,   min.length = \"2 mins\",   max.interrupt = \"8 mins\",   prop.interrupt = 0.25,   epoch = \"dominant.epoch\",   return.indices = FALSE,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulses above threshold — pulses_above_threshold","text":"Light.vector Numeric vector containing light data. Missing values considered FALSE comparing light levels threshold. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. comparison String specifying whether time threshold calculated. Can either \"\" (default) \"\". two values provided threshold, argument ignored. threshold Single numeric value two numeric values specifying threshold light level(s) compare . vector two values provided, timing corresponding light levels two thresholds calculated. min.length minimum length pulse. Can either duration string. string, needs valid duration string, e.g., \"1 day\" \"10 sec\". Defaults \"2 mins\" Wilson et al. (2018). max.interrupt Maximum length episode interruptions. Can either duration string. string, needs valid duration string, e.g., \"1 day\" \"10 sec\". Defaults \"8 mins\" Wilson et al. (2018). prop.interrupt Numeric value 0 1 specifying maximum proportion total number interruptions. Defaults 0.25 Wilson et al. (2018). epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". return.indices Logical. cluster indices returned? works .df FALSE. Defaults FALSE. na.rm Logical. missing values removed calculation pulse metrics? Defaults FALSE. .df Logical. data frame returned? TRUE, data frame seven columns (\"n\", \"mean_level\", \"mean_duration\", \"total_duration\", \"mean_onset\", \"mean_midpoint\", \"mean_offset\") threshold (e.g., _{threshold}) returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pulses above threshold — pulses_above_threshold","text":"List data frame calculated values.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pulses above threshold — pulses_above_threshold","text":"timeseries assumed regular. Missing values light data replaced 0.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pulses above threshold — pulses_above_threshold","text":"Wilson, J., Reid, K. J., Braun, R. ., Abbott, S. M., & Zee, P. C. (2018). Habitual light exposure relative circadian timing delayed sleep-wake phase disorder. Sleep, 41(11). doi:10.1093/sleep/zsy166","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/pulses_above_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pulses above threshold — pulses_above_threshold","text":"","code":"# Sample data data = sample.data.environment %>%   dplyr::filter(Id == \"Participant\") %>%   filter_Datetime(length = lubridate::days(1)) %>%    dplyr::mutate(     Time = hms::as_hms(Datetime),   )  # Time vector as datetime data %>%   dplyr::reframe(pulses_above_threshold(MEDI, Datetime, threshold = 250, as.df = TRUE)) #> # A tibble: 1 × 8 #>   Id          n_pulses_above_250 mean_level_pulses_abov…¹ mean_duration_pulses…² #>   <chr>                    <int>                    <dbl> <Duration>             #> 1 Participant                 10                    1579. 3149s (~52.48 minutes) #> # ℹ abbreviated names: ¹​mean_level_pulses_above_250, #> #   ²​mean_duration_pulses_above_250 #> # ℹ 4 more variables: total_duration_pulses_above_250 <Duration>, #> #   mean_onset_pulses_above_250 <dttm>, mean_midpoint_pulses_above_250 <dttm>, #> #   mean_offset_pulses_above_250 <dttm>  # Time vector as hms time data %>%   dplyr::reframe(pulses_above_threshold(MEDI, Time, threshold = 250, as.df = TRUE)) #> # A tibble: 1 × 8 #>   Id          n_pulses_above_250 mean_level_pulses_abov…¹ mean_duration_pulses…² #>   <chr>                    <int>                    <dbl> <Duration>             #> 1 Participant                 10                    1579. 3149s (~52.48 minutes) #> # ℹ abbreviated names: ¹​mean_level_pulses_above_250, #> #   ²​mean_duration_pulses_above_250 #> # ℹ 4 more variables: total_duration_pulses_above_250 <Duration>, #> #   mean_onset_pulses_above_250 <time>, mean_midpoint_pulses_above_250 <time>, #> #   mean_offset_pulses_above_250 <time>  # Pulses below threshold  data %>%   dplyr::reframe(pulses_above_threshold(MEDI, Datetime, \"below\", threshold = 250, as.df = TRUE)) #> # A tibble: 1 × 8 #>   Id          n_pulses_below_250 mean_level_pulses_belo…¹ mean_duration_pulses…² #>   <chr>                    <int>                    <dbl> <Duration>             #> 1 Participant                 13                     124. 3677s (~1.02 hours)    #> # ℹ abbreviated names: ¹​mean_level_pulses_below_250, #> #   ²​mean_duration_pulses_below_250 #> # ℹ 4 more variables: total_duration_pulses_below_250 <Duration>, #> #   mean_onset_pulses_below_250 <dttm>, mean_midpoint_pulses_below_250 <dttm>, #> #   mean_offset_pulses_below_250 <dttm>  # Pulses within threshold range data %>%   dplyr::reframe(pulses_above_threshold(MEDI, Datetime, threshold = c(250,1000), as.df = TRUE)) #> # A tibble: 1 × 8 #>   Id        n_pulses_within_250-…¹ mean_level_pulses_wi…² mean_duration_pulses…³ #>   <chr>                      <int>                  <dbl> <Duration>             #> 1 Particip…                     11                   568. 449s (~7.48 minutes)   #> # ℹ abbreviated names: ¹​`n_pulses_within_250-1000`, #> #   ²​`mean_level_pulses_within_250-1000`, #> #   ³​`mean_duration_pulses_within_250-1000` #> # ℹ 4 more variables: `total_duration_pulses_within_250-1000` <Duration>, #> #   `mean_onset_pulses_within_250-1000` <dttm>, #> #   `mean_midpoint_pulses_within_250-1000` <dttm>, #> #   `mean_offset_pulses_within_250-1000` <dttm>"},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample of wearable data combined with environmental data — sample.data.environment","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"subset data study TSCN-Lab using ActLumus light logger. dataset contains personal light exposure information one participant course five full days. dataset measured 10 second epoch complete (missing values). Additionally environmental light data captured second light logger mounted horizontally TUM university roof, without obstructions (besides transparent plastic halfdome). epoch data 30 seconds. dataset allows interesting calculations based available daylight given point time.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"","code":"sample.data.environment"},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"sample.data.environment tibble 69,120 rows 3 columns: Datetime POSIXct Datetime MEDI melanopic EDI measurement data. Unit lux. Id character vector indicating whether data Participant Environment.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"https://www.tscnlab.org","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Statechange (sc) Timestamps to Intervals — sc2interval","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"Takes input datetimes Statechanges creates column Intervals. full = TRUE, also create intervals day prior first state change last. output.dataset = FALSE give named vector, otherwise tibble. state change info requires description name state (like \"sleep\" \"wake\", \"wear\") goes effect given Datetime. Works grouped data mix intervals participants. Missing data explicit possible. Also, maximum allowed length interval can set, implicit missing timestamps set period times can enforced.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"","code":"sc2interval(   dataset,   Datetime.colname = Datetime,   Statechange.colname = State,   State.colname = State,   Interval.colname = Interval,   full = TRUE,   starting.state = NA,   output.dataset = TRUE,   Datetime.keep = FALSE,   length.restriction = 60 * 60 * 24 )"},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. Statechange.colname, Interval.colname, State.colname Column names contain name/description state change contain Interval State (also default). Expects symbol. Statechange column needs part dataset. full, starting.state arguments handle state first day first state change last state change last day. full = TRUE(default, expects logical), create interval first day 00:00:00 state change. interval given state specified starting.state, NA default, can character scalar. extend interval last state change end last given day (specifically 00:00:00 next day). output.dataset output data.frame (Default TRUE) vector hms (FALSE) times? Expects logical scalar. Datetime.keep TRUE, original Datetime column kept. length.restriction length intervals great, interval state can set NA, effectively produces gap data. makes sense intervals implausibly wrong (e.g. someone slept 50 hours), data combined light logger data, e.g., interval2state(), metrics visualizations remove interval.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"One data.frame object identical dataset interval instead datetime. original Statechange column now indicates State Interval. named vector intervals, names states","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"","code":"library(tibble) library(lubridate) library(dplyr) sample <- tibble::tibble(Datetime = c(\"2023-08-15 6:00:00\",                                       \"2023-08-15 23:00:00\",                                       \"2023-08-16 6:00:00\",                                       \"2023-08-16 22:00:00\",                                       \"2023-08-17 6:30:00\",                                       \"2023-08-18 1:00:00\"),                          State = rep(c(\"wake\", \"sleep\"), 3),                          Id = \"Participant\") #intervals from sample sc2interval(sample) #> # A tibble: 7 × 3 #>   State Id          Interval                                         #>   <chr> <chr>       <Interval>                                       #> 1 NA    NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #> 2 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 3 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> 4 wake  Participant 2023-08-16 06:00:00 UTC--2023-08-16 22:00:00 UTC #> 5 sleep Participant 2023-08-16 22:00:00 UTC--2023-08-17 06:30:00 UTC #> 6 wake  Participant 2023-08-17 06:30:00 UTC--2023-08-18 01:00:00 UTC #> 7 sleep Participant 2023-08-18 01:00:00 UTC--2023-08-19 00:00:00 UTC  #compare sample (y) and intervals (x) sc2interval(sample) %>%  mutate(Datetime = int_start(Interval)) %>%  dplyr::left_join(sample, by = c(\"Id\", \"State\"),                   relationship = \"many-to-many\") %>%  head() #> # A tibble: 6 × 5 #>   State Id          Interval                                         #>   <chr> <chr>       <Interval>                                       #> 1 NA    NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #> 2 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 3 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 4 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 5 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> 6 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> # ℹ 2 more variables: Datetime.x <dttm>, Datetime.y <chr>"},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"Takes dataset sleep/wake intervals recodes Brown state intervals. Specifically, recodes sleep intervals night, reduces wake intervals specified evening.length recodes evening day intervals. evening.length time day night. result can used input interval2state() might used subsequently Brown2reference().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"","code":"sleep_int2Brown(   dataset,   Interval.colname = Interval,   Sleep.colname = State,   wake.state = \"wake\",   sleep.state = \"sleep\",   Brown.day = \"day\",   Brown.evening = \"evening\",   Brown.night = \"night\",   evening.length = lubridate::dhours(3),   Brown.state.colname = State.Brown,   output.dataset = TRUE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"dataset dataset sleep/wake intervals. Interval.colname name column intervals. Defaults Interval. Sleep.colname name column sleep/wake states. Defaults State. wake.state, sleep.state names wake sleep states Sleep.colname. Default \"wake\" \"sleep\". Expected character scalar must exact match. Brown.day, Brown.evening, Brown.night names Brown states used. Defaults \"day\", \"evening\" \"night\". evening.length length evening interval seconds. Can also use lubridate duration period objects. Defaults 3 hours. Brown.state.colname name column newly created Brown states. Works simple renaming Sleep.colname. output.dataset Whether return whole dataset vector Brown states.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"dataset Brown states vector Brown states. Brown states created new column name specified Brown.state.colname. dataset rows original dataset, wake intervals split day evening intervals.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"function filter non-sleep intervals shorter specified evening.length. prevents problematic behaviour evening.length longer wake intervals , e.g., first state sleep midnight prior NA interval midnight till sleep. behavior might, however, result problematic results specialized experimental setups ultra short wake/sleep cycles. sleep_int2Brown() function applicable cases anyways.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep_int2Brown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep_int2Brown","text":"","code":"#create a sample dataset sample <- tibble::tibble(Datetime = c(\"2023-08-15 6:00:00\",                                          \"2023-08-15 23:00:00\",                                          \"2023-08-16 6:00:00\",                                          \"2023-08-16 22:00:00\",                                          \"2023-08-17 6:30:00\",                                          \"2023-08-18 1:00:00\"),                          State = rep(c(\"wake\", \"sleep\"), 3),                          Id = \"Participant\") #intervals from sample sc2interval(sample)  #> # A tibble: 7 × 3 #>   State Id          Interval                                         #>   <chr> <chr>       <Interval>                                       #> 1 NA    NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #> 2 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 3 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> 4 wake  Participant 2023-08-16 06:00:00 UTC--2023-08-16 22:00:00 UTC #> 5 sleep Participant 2023-08-16 22:00:00 UTC--2023-08-17 06:30:00 UTC #> 6 wake  Participant 2023-08-17 06:30:00 UTC--2023-08-18 01:00:00 UTC #> 7 sleep Participant 2023-08-18 01:00:00 UTC--2023-08-19 00:00:00 UTC #recoded intervals                        sc2interval(sample) %>% sleep_int2Brown() #> # A tibble: 10 × 3 #>    State.Brown Id          Interval                                         #>    <chr>       <chr>       <Interval>                                       #>  1 NA          NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #>  2 day         Participant 2023-08-15 06:00:00 UTC--2023-08-15 20:00:00 UTC #>  3 evening     Participant 2023-08-15 20:00:00 UTC--2023-08-15 23:00:00 UTC #>  4 night       Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #>  5 day         Participant 2023-08-16 06:00:00 UTC--2023-08-16 19:00:00 UTC #>  6 evening     Participant 2023-08-16 19:00:00 UTC--2023-08-16 22:00:00 UTC #>  7 night       Participant 2023-08-16 22:00:00 UTC--2023-08-17 06:30:00 UTC #>  8 day         Participant 2023-08-17 06:30:00 UTC--2023-08-17 22:00:00 UTC #>  9 evening     Participant 2023-08-17 22:00:00 UTC--2023-08-18 01:00:00 UTC #> 10 night       Participant 2023-08-18 01:00:00 UTC--NA"},{"path":"https://tscnlab.github.io/LightLogR/reference/supported_devices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the supported devices in LightLogR — supported_devices","title":"Get all the supported devices in LightLogR — supported_devices","text":"Returns vector supported devices LightLogR.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/supported_devices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the supported devices in LightLogR — supported_devices","text":"","code":"supported_devices()"},{"path":"https://tscnlab.github.io/LightLogR/reference/supported_devices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the supported devices in LightLogR — supported_devices","text":"character vector supported devices","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/supported_devices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all the supported devices in LightLogR — supported_devices","text":"supported devices dedicated import function. Import functions can called either import_Dataset() respective device = \"device\" argument, directly, e.g., import$ActLumus().","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/supported_devices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the supported devices in LightLogR — supported_devices","text":"","code":"supported_devices() #>  [1] \"ActLumus\"              \"ActTrust\"              \"Actiwatch_Spectrum\"    #>  [4] \"Actiwatch_Spectrum_de\" \"Circadian_Eye\"         \"DeLux\"                 #>  [7] \"GENEActiv_GGIR\"        \"Kronowise\"             \"LIMO\"                  #> [10] \"LYS\"                   \"LiDo\"                  \"LightWatcher\"          #> [13] \"MotionWatch8\"          \"OcuWEAR\"               \"Speccy\"                #> [16] \"SpectraWear\"           \"VEET\"                  \"nanoLambda\""},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale positive and negative values on a log scale — symlog_trans","title":"Scale positive and negative values on a log scale — symlog_trans","text":"create plot positive negative (unscaled) values log-transformed axis, values need scaled accordingly. R ggplot2 built-function , following function can used create transformation function purpose. function coded based post stack overflow. symlog transformation standard transformation used e.g., gg_day().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale positive and negative values on a log scale — symlog_trans","text":"","code":"symlog_trans(base = 10, thr = 1, scale = 1)"},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale positive and negative values on a log scale — symlog_trans","text":"base Base logarithmic transformation. default 10. thr Threshold logarithmic transformation applied. absolute value threshold, value transformed. default 1. scale Scaling factor logarithmically transformed values threshold. default 1.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale positive and negative values on a log scale — symlog_trans","text":"transformation function can used ggplot2 plotly scale positive negative values log scale.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale positive and negative values on a log scale — symlog_trans","text":"symlog transformation can accessed either via trans = \"symlog\" argument scaling function, via trans = symlog_trans(). latter allows setting individual arguments.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scale positive and negative values on a log scale — symlog_trans","text":"function`s code straight copy post stack overflow. author answer Julius Vainora, author question Brian B","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/symlog_trans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale positive and negative values on a log scale — symlog_trans","text":"","code":"dataset <-  sample.data.environment %>% filter_Date(end = \"2023-08-15\") %>%  dplyr::mutate(MEDI = dplyr::case_when(                                      Id == \"Environment\" ~ -MEDI,                                      .default = MEDI)) #basic application where transformation, breaks and labels are set manually dataset %>%                                      gg_day(aes_col = Id) + ggplot2::scale_y_continuous( trans = \"symlog\") #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   #the same plot, but with breaks and labels set manually                             dataset %>%                                      gg_day(aes_col = Id) + ggplot2::scale_y_continuous( trans = \"symlog\",  breaks = c(-10^(5:0), 0, 10^(0:5)), labels = function(x) format(x, scientific = FALSE, big.mark = \" \")) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   #setting individual arguments of the symlog function manually allows #e.g., to emphasize values smaller than 1 dataset %>%                                      gg_day(aes_col = Id) + ggplot2::scale_y_continuous( trans = symlog_trans(thr = 0.01), breaks = c(-10^(5:-1), 0, 10^(-1:5)), labels = function(x) format(x, scientific = FALSE, big.mark = \" \")) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale."},{"path":"https://tscnlab.github.io/LightLogR/reference/threshold_for_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Find threshold for given duration — threshold_for_duration","title":"Find threshold for given duration — threshold_for_duration","text":"function finds threshold light levels /given duration. function can considered inverse duration_above_threshold.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/threshold_for_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find threshold for given duration — threshold_for_duration","text":"","code":"threshold_for_duration(   Light.vector,   Time.vector,   duration,   comparison = c(\"above\", \"below\"),   epoch = \"dominant.epoch\",   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/threshold_for_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find threshold for given duration — threshold_for_duration","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. duration duration threshold found. Can either duration string. string, needs valid duration string, e.g., \"1 day\" \"10 sec\". comparison String specifying whether light levels threshold considered. Can either \"\" (default) \"\". epoch epoch data sampled. Can either duration string. string, needs either \"dominant.epoch\" (default) guess based data, valid duration string, e.g., \"1 day\" \"10 sec\". na.rm Logical. missing values (NA) removed calculation? Defaults FALSE. .df Logical. data frame returned? TRUE, data frame single column named threshold_{comparison}_for_{duration} returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/threshold_for_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find threshold for given duration — threshold_for_duration","text":"Single numeric value single column data frame.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/threshold_for_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find threshold for given duration — threshold_for_duration","text":"","code":"N <- 60 # Dataset with 30 min < 250lx and 30min > 250lx dataset1 <-   tibble::tibble(     Id = rep(\"A\", N),     Datetime = lubridate::as_datetime(0) + lubridate::minutes(1:N),     MEDI = sample(c(sample(1:249, N / 2, replace = TRUE),                      sample(250:1000, N / 2, replace = TRUE))),   )  dataset1 %>%   dplyr::reframe(\"Threshold above which for 30 mins\" =                     threshold_for_duration(MEDI, Datetime, duration = \"30 mins\")) #> # A tibble: 1 × 1 #>   `Threshold above which for 30 mins` #>                                 <int> #> 1                                 291  dataset1 %>%   dplyr::reframe(\"Threshold below which for 30 mins\" =                     threshold_for_duration(MEDI, Datetime, duration = \"30 mins\",                                           comparison = \"below\")) #> # A tibble: 1 × 1 #>   `Threshold below which for 30 mins` #>                                 <int> #> 1                                 248  dataset1 %>%   dplyr::reframe(threshold_for_duration(MEDI, Datetime, duration = \"30 mins\",                                         as.df = TRUE)) #> # A tibble: 1 × 1 #>   threshold_above_for_30_minutes #>                            <int> #> 1                            291"},{"path":"https://tscnlab.github.io/LightLogR/reference/timing_above_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean/first/last timing above/below threshold. — timing_above_threshold","title":"Mean/first/last timing above/below threshold. — timing_above_threshold","text":"function calculates mean, first, last timepoint (MLiT, FLiT, LLiT) light levels given threshold intensity within given time interval.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/timing_above_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean/first/last timing above/below threshold. — timing_above_threshold","text":"","code":"timing_above_threshold(   Light.vector,   Time.vector,   comparison = c(\"above\", \"below\"),   threshold,   na.rm = FALSE,   as.df = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/timing_above_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean/first/last timing above/below threshold. — timing_above_threshold","text":"Light.vector Numeric vector containing light data. Time.vector Vector containing time data. Can POSIXct, hms, duration, difftime. comparison String specifying whether time threshold calculated. Can either \"\" (default) \"\". two values provided threshold, argument ignored. threshold Single numeric value two numeric values specifying threshold light level(s) compare . vector two values provided, timing corresponding light levels two thresholds calculated. na.rm Logical. missing values removed calculation? Defaults FALSE. .df Logical. data frame returned? TRUE, data frame three columns (MLiT, FLiT, LLiT) threshold (e.g., MLiT_{threshold}) returned. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/timing_above_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean/first/last timing above/below threshold. — timing_above_threshold","text":"List dataframe three values: mean, first, last timing threshold. output type corresponds type Time.vector, e.g., Time.vector HMS, timing metrics also HMS, vice versa POSIXct numeric.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/timing_above_threshold.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mean/first/last timing above/below threshold. — timing_above_threshold","text":"Reid, K. J., Santostasi, G., Baron, K. G., Wilson, J., Kang, J., & Zee, P. C. (2014). Timing Intensity Light Correlate Body Weight Adults. PLOS ONE, 9(4), e92251. doi:10.1371/journal.pone.0092251 Hartmeyer, S.L., Andersen, M. (2023). Towards framework light-dosimetry studies: Quantification metrics. Lighting Research & Technology. doi:10.1177/14771535231170500","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/timing_above_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean/first/last timing above/below threshold. — timing_above_threshold","text":"","code":"# Dataset with light > 250lx between 06:00 and 18:00 dataset1 <-   tibble::tibble(     Id = rep(\"A\", 24),     Datetime = lubridate::as_datetime(0) + lubridate::hours(0:23),     MEDI = c(rep(1, 6), rep(250, 13), rep(1, 5))   )  # Above threshold dataset1 %>%   dplyr::reframe(timing_above_threshold(MEDI, Datetime, \"above\", 250, as.df = TRUE)) #> # A tibble: 1 × 3 #>   mean_timing_above_250 first_timing_above_250 last_timing_above_250 #>   <dttm>                <dttm>                 <dttm>                #> 1 1970-01-01 12:00:00   1970-01-01 06:00:00    1970-01-01 18:00:00    # Below threshold dataset1 %>%   dplyr::reframe(timing_above_threshold(MEDI, Datetime, \"below\", 10, as.df = TRUE)) #> # A tibble: 1 × 3 #>   mean_timing_below_10 first_timing_below_10 last_timing_below_10 #>   <dttm>               <dttm>                <dttm>               #> 1 1970-01-01 10:54:33  1970-01-01 00:00:00   1970-01-01 23:00:00   # Input = HMS -> Output = HMS dataset1 %>%   dplyr::reframe(timing_above_threshold(MEDI, hms::as_hms(Datetime), \"above\", 250, as.df = TRUE)) #> # A tibble: 1 × 3 #>   mean_timing_above_250 first_timing_above_250 last_timing_above_250 #>   <time>                <time>                 <time>                #> 1 12:00                 06:00                  18:00"},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-042","dir":"Changelog","previous_headings":"","what":"LightLogR 0.4.2","title":"LightLogR 0.4.2","text":"updated license MIT: LightLogR now permissively licensed import functions now give warning message identical observations provided data files, stop import process return tibble duplicate rows. remove_duplicates parameter, user can decide automatically remove duplicates import. Note: identical observations refers identical rows disregarding filename.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-041","dir":"Changelog","previous_headings":"","what":"LightLogR 0.4.1","title":"LightLogR 0.4.1","text":"added support OcuWEAR devices added support MotionWatch 8 devices #32 added support LIMO devices added support GENEActiv devices, data preprocessed GGIR package. function import$GENEActiv_GGIR() takes GGIR output imports LightLogR naming schemes. #27","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-040-nautical-dawn","dir":"Changelog","previous_headings":"","what":"LightLogR 0.4.0 “Nautical dawn”","title":"LightLogR 0.4.0 “Nautical dawn”","text":"release CRAN! changed supported.devices list function supported_devices() instead, documentation automatically updates list supported devices. Similarly, ll_import_expr now ll_import_expr(). added support Meta VEET device visual experience measurements added support Kronowise device added support MPI melanopiQ Circadian Eye (Prototype) rewrote import function Actiwatch_Spectrum, sample file original based , specific formatting German standards. Now, German version can still called Actiwatch_Spectrum_de, wheras main function refers english/international format. updated landing page website list supported devices table metrics small changes documentation","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-038","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.8","title":"LightLogR 0.3.8","text":"CRAN release: 2024-07-04 Submission CRAN","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-037-astronomical-dawn","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.7 “Astronomical dawn”","title":"LightLogR 0.3.7 “Astronomical dawn”","text":"Changes tutorial articles website Integration community survey website Github Readme.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-036","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.6","title":"LightLogR 0.3.6","text":"bright_dark_period() now maintains date looping data. Added articles Import & Cleaning, Metrics, Visualizations website. Added option print rows observation intervals import. Added option set length dataset starting end filter_Datetime() family.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-035","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.5","title":"LightLogR 0.3.5","text":"Added function aggregate_Date() aggregate long datasets one day per group. New function gg_doubleplot() … well, double plots.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-034","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.4","title":"LightLogR 0.3.4","text":"Backup Zenodo, DOI ","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-033","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.3","title":"LightLogR 0.3.3","text":"New updated metric functions. LightLogR now contains 16 metric families 60 sub-metrics.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-032","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.2","title":"LightLogR 0.3.2","text":"added import functions nanoLambdaand LightWatcher devices new Logo!","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-031","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.1","title":"LightLogR 0.3.1","text":"fixed bug interval2state() dismiss first state starts actual data fixed bug interval2state() add columns State column present interval dataset output dataset, leave empty. Added example shows add multiple columns output dataset correctly. aggregate_Datetime(), added option set dominant.epoch, .e., common interval, unit parameter, effectively deal irregular data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-030","dir":"Changelog","previous_headings":"","what":"LightLogR 0.3.0","title":"LightLogR 0.3.0","text":"Added functions dst_change_summary() dst_change_handler() detect deal Daylight Savings. functionality also integrated import functions, user can automatically apply import process. Added Steffen Hartmeyer collaborator, added number light metrics lightdosimetry package. Added import_adjustment() function flexibility importing light logger data conform standard format. goes hand hand ll_import_expr list contains specific expressions supported devices. lots bug fixes improvements","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-022","dir":"Changelog","previous_headings":"","what":"LightLogR 0.2.2","title":"LightLogR 0.2.2","text":"Bugfix LiDo import Added import support new devices: LiDo, DeLux, Speccy Removed minor inconsistencies naming conventions. Also, imported columns syntactic naming now Added option gap functions, extend gapless Datetime range full days.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-021","dir":"Changelog","previous_headings":"","what":"LightLogR 0.2.1","title":"LightLogR 0.2.1","text":"Exports now internal function count_difftime() basis dominant_epoch(). whereas latter gets common epoch, count_difftime() returns table counts epochs. useful conjunction gap_finder(), check distribution data intervals. Added gg_days() function visualize multiple days data single plot. Alongside come two helper functions, Datetime_limits() Datetime_breaks(), set limits breaks x-axis. Added filter_Datetime_multiple() function filter multiple Datetime ranges depending certain conditions, e.g. different filter cutoffs different participants. wraps around filter_Datetime() filter_Date(). Reworked internals light logger data import functions. now use straightforward function factory approach. users visible change device specific functions now form import$device() instead old import.device(). Added symlog_trans() function post stack overflow. function leads better visualization light logger data, logarithmic transformation necessary, values 0 common. function integrated default gg_day() likely basis upcoming visualization functions. Added aggregate_Datetime() function aggregate data given time interval. Added gg_overview() function get sense timeframe measurement data. Added family regularize functions find deal implicit missing data. functions include dominant_epoch(), gapless_Datetimes(), gap_handler(), gap_finder(). ton updates documentation, unit tests, bug fixes.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-020","dir":"Changelog","previous_headings":"","what":"LightLogR 0.2.0","title":"LightLogR 0.2.0","text":"Added Unit tests documentation new functions. filter_Datetime() filter_Date() added option filter group specific dates. Added family functions around States Reference import, process, add states light logger data, like sleep/wake times, wear times, data. family includes import_Statechanges(), sc2interval(), ìnterval2state(), data2reference(), sleep_int2Brown(), Brown_check(), Brown_rec(), Brown2reference(). Added Article/Vignette “´s Day” demonstrate LightLogR workflow. Added convenience function create_Timedata() create Time--Day column datasets. Added family filter_Datetime(), filter_Date() filter_Time() functions easily filter datasets. Added unit tests first functions. Added several helper functions work states like sleep wear times. Added automatic ID creation import streamlined import functions. Added function join_datasets combine imported datasets sensible constraints.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"gg_day-0-1-1","dir":"Changelog","previous_headings":"","what":"gg_day():","title":"LightLogR 0.1.1","text":"Added major grid marks y-axis. Added message using start end dates make clear, Date portion input used. Changed behavior, already Day.data column present data. create new column none present, otherwise use existing column faceting (factorization) Added option create interactive plot feeding plot [plotly] package.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-010","dir":"Changelog","previous_headings":"","what":"LightLogR 0.1.0","title":"LightLogR 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
