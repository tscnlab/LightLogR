[{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tscnlab.github.io/LightLogR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"importing-data","dir":"Articles","previous_headings":"","what":"Importing Data","title":"What's in a Day?","text":"data need part LightLogR package. unprocessed (device export) data light loggers (diary app capturing sleep times). data anonymous, can access following paths:","code":"path <- system.file(\"extdata\",                package = \"LightLogR\")  file.LL <- \"205_actlumus_Log_1020_20230904101707532.txt.zip\" file.env <- \"cyepiamb_CW35_Log_1431_20230904081953614.txt.zip\" file.sleep <- \"205_sleepdiary_all_20230904.csv\""},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"participant-light-exposure-data","dir":"Articles","previous_headings":"Importing Data","what":"Participant Light Exposure Data","title":"What's in a Day?","text":"LightLogR provides convenient import functions range supported devices (use command supported.devices want see devices supported present). LightLogR knows files devices structured, needs little input. fact, mere filepath suffice. , however, good idea also provide timezone argument tz specify measurements made Europe/Berlin timezone. makes data future-proof used comparison geolocations. Every light logger dataset needs Id connect separate observations different participant/device/study/etc. don´t provide Id import function (dataset doesn´t contain Id column), filename used Id. rather cumbersome case, use regex extract first three digits filename, serve purpose . can see, import accompanied (hopefully) helpful message imported data. contains number ob measurements, timezone, start- enddate, timespan, observation intervals. case, measurements follow 10 second epoch. missing values deal first, dataset already good go. , e.g., want know range melanopic EDI (measure stimulus strength nonvisual system) every day dataset, can : goes visualization - always helpful get good look data immediately import. gg_day() function creates simple ggplot data, stacked vertically Days. function needs little input beyond dataset (fact, even work without size input, just makes default point size smaller, interactive command sends output plotly facilitate data exploration). gg_day() features lot flexibility, can adapted extended fit various needs, see shortly. can already see patterns features light exposure across days. general, participant seems woken (least started wearing light logger) 9:00 went bed (, , stopped wearing device) around 23:00. warning generated alongside plot refers fact, lots MEDI values 0 lux - don´t scale well log. interactive plot values removed, static ggplot, shown bottom scale.","code":"tz <- \"Europe/Berlin\" dataset.LL <- import.ActLumus(file.LL, path, auto.id = \"^(\\\\d{3})\", tz = tz) #> Multiple files in zip: reading '205_actlumus_Log_1020_20230904101707532.txt' #> Successfully read in 61016 observations from ActLumus-file #> Timezone set is Europe/Berlin. #> The system timezone is UTC. Please correct if necessary! #> Start: 2023-08-28 08:47:54 #> End: 2023-09-04 10:17:04 #> Timespan: 7.1 days #> Observation intervals:  #>   interval.time     n pct   #> 1 10 secs       61015 100% dataset.LL %>% group_by(Date = as_date(Datetime)) %>%    summarize(range.MEDI = range(MEDI) %>% str_flatten(\" - \")) %>% gt() dataset.LL %>% gg_day(size = 0.25, interactive = TRUE) #> Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"environmental-light-data","dir":"Articles","previous_headings":"Importing Data","what":"Environmental Light Data","title":"What's in a Day?","text":"next dataset. one contains measurement data type device, recorded rooftop position unobstructed daylight roughly location participant data. device type , import well. since filename contain participant´s ID time, give manual id: \"CW35\". can see follow roughly time span, measurement epoch 30 seconds, one odd interval one second shorter.","code":"dataset.env <- import.ActLumus(file.env, path, manual.id = \"CW35\", tz = tz) #> Multiple files in zip: reading 'cyepiamb_CW35_Log_1431_20230904081953614.txt' #> Successfully read in 20143 observations from ActLumus-file #> Timezone set is Europe/Berlin. #> The system timezone is UTC. Please correct if necessary! #> Start: 2023-08-28 08:28:39 #> End: 2023-09-04 08:19:38 #> Timespan: 7 days #> Observation intervals:  #>   interval.time     n pct   #> 1 29 secs           1 0%    #> 2 30 secs       20141 100%"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"participant-sleep-data","dir":"Articles","previous_headings":"Importing Data","what":"Participant Sleep Data","title":"What's in a Day?","text":"last dataset sleep diary contains, among things, column Id column sleep wake (called offset). sleep diaries event datasets can vary widely structure, must manually set arguments. Importantly, need specify Datetimes structured. case, values like 28-08-2023 23:20, give structure dmyHM. need import coherent table contains column Datetime besides column State starts point time. import.Statechanges() facilitates , can provide vector column names form continuous indicator given state - case Sleep. Now imported data, need combine sensibly, get next section.","code":"dataset.sleep <-    import.Statechanges(file.sleep, path,                        Datetime.format = \"dmyHM\",                       State.colnames = c(\"sleep\", \"offset\"),                       State.encoding = c(\"sleep\", \"wake\"),                       ID.colname = record_id,                       sep = \";\",                       dec = \",\",                       tz = tz)  dataset.sleep %>% head() %>% gt()"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"connecting-data","dir":"Articles","previous_headings":"","what":"Connecting Data","title":"What's in a Day?","text":"Connecting data, case, means giving context participant’s light exposure data. number hurdles attached connecting time series data, data different sets rarely align perfectly. Often measurements least seconds, even use different measurement epochs. Also, sleep data, time stamps whenever change status. Also - crucial - might missing entries! LightLogR provides helpful functions however, deal topics without resorting rounding averaging data common multiple.","code":""},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"solar-potential","dir":"Articles","previous_headings":"Connecting Data","what":"Solar Potential","title":"What's in a Day?","text":"Let us start environmental measurements unobstructed daylight. can seen natural potential light exposure thus serve reference participant´s light exposure. data2reference() function, create reference. function extraordinarily powerful can create reference tailored light logger data source wanted Reference column (case MEDI column, default), Datetime column, grouping structure (Id) light logger data set. data2reference() can even create reference subset data . example makes possible first (second, etc.) day data reference days. can apply one participant reference participants, even measurements different times. case necessary specify argument across.id = TRUE, want reference Id(“CW35”) applied across Id participant (“205”). sake example, also removed unnecessary data columns, makes code examples simpler. can already see table reference start measurements quite bit higher light exposure participant´s light logger. also see reference value applied three participant values. mirrors fact every three measurements taken participant device, one measurement epoch environmental sensor passes. visualize newly reached reference data, can easily extend gg_day() dashed red reference line. Keep mind visualization still exploratory, investing heavily styling.  , warnings. known warning infinite values (one point data, one line), warning missing values added. simply due fact every data point x-axis corresponding y-axis-value. two datasets largely align, fringes, especially last day, non-overlap. perform calculations based light logger data reference, keep mind timesteps present give non NA results. basic, graph already shows valuable information potential light stimulus compared actual exposure. morning hours, participant never reached significant light dose, light exposure evenin regularly par daytime levels, especially 29th. Let us see measurements compare recommendations light exposure.","code":"dataset.LL <-    dataset.LL %>% data2reference(Reference.data = dataset.env, across.id = TRUE) #> Adding missing grouping variables: `Id`  dataset.LL <-    dataset.LL %>% select(Id, Datetime, MEDI, Reference)  dataset.LL %>% head() %>% gt() dataset.LL %>%    gg_day(size = 0.25) + geom_line(aes(y=Reference), lty = 2, col = \"red\") #> Warning: Transformation introduced infinite values in continuous y-axis #> Transformation introduced infinite values in continuous y-axis #> Warning: Removed 707 rows containing missing values (`geom_line()`)."},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"recommended-light-levels","dir":"Articles","previous_headings":"Connecting Data","what":"Recommended Light levels","title":"What's in a Day?","text":"Brown et al.(2022)1 provide guidance healthy, daytime dependent light stimuli, measured melanopic EDI: Throughout daytime, recommended minimum melanopic EDI 250 lux eye measured vertical plane approximately 1.2 m height (.e., vertical illuminance eye level seated). available, daylight used first instance meet levels. additional electric lighting required, polychromatic white light ideally spectrum , like natural daylight, enriched shorter wavelengths close peak melanopic action spectrum. evening, starting least 3 hours bedtime, recommended maximum melanopic EDI 10 lux measured eye vertical plane approximately 1.2 m height. help achieve , possible, white light spectrum depleted short wavelengths close peak melanopic action spectrum. sleep environment dark possible. recommended maximum ambient melanopic EDI 1 lux measured eye. case certain activities nighttime require vision, recommended maximum melanopic EDI 10 lux measured eye vertical plane approximately 1.2 m height. can see bedtime important factor determining timepoints three stages go effect. Luckily just happen sleep/wake data sleep diary hand. first step, convert timepoints state changes intervals participant awake asleep. sc2interval() function provides readily. case first entry sleep, can safely assume, day prior participant awake. take account full.first = \"wake\" argument setting, implied participant awake midnight . first day data partial anyways, disregard . arguments sc2interval() refine interval creation. Probably important length.restriction, sets maximum length interval, default 24 hours. avoids implausibly long intervals one state highly likely caused implicit missing data misentries. Now can transform sleep/wake intervals intervals Brown recommendations. sleep.int2Brown() function facilitates . can see function fit 3 hour interval -every sleep wake phase, also recoded states. data can now applied light logger dataset. done interval2state() function2. already used function unknowingly, (alongside sc2interval()) hood data2reference(), making sure data reference set spread accordingly. Now column light logger dataset declares three state Brown et al. recommendation. another function, Brown2reference(), can one swoop add threshhold accompanied states check whether participant within recommendations . thing function needs name put recommended values - default go Reference, already used Solar exposition, put Reference.Brown. Brown2reference() added three columns, two shown table . third column contains text label type reference, sth. also added solar exposition. Now let´s quick look result plot overview  Looking good far! next section, let us focus picking one day get styling. Based available data think 01/09 looks promising, variation day timeframes outside afternoon varied typical light exposure evening. can use filter_Date() function easily cut specific chunk data. also deactivate facetting function gg_day(), one day.","code":"dataset.sleep <- dataset.sleep %>% sc2interval() dataset.sleep %>% head() %>% gt() Brown.intervals <- dataset.sleep %>% sleep.int2Brown() Brown.intervals %>% head() %>% gt() dataset.LL <-    dataset.LL %>%    interval2state(     State.interval.dataset = Brown.intervals, State.colname = State.Brown) dataset.LL %>% tail() %>% gt() dataset.LL <- dataset.LL %>% Brown2reference(Brown.rec.colname = Reference.Brown) dataset.LL %>% select(!Reference.Brown.label) %>% tail() %>% gt() dataset.LL %>% #dataset   gg_day(size = 0.25) + #base plot   geom_line(aes(y=Reference), lty = 2, col = \"red\") + #solar reference   geom_line(aes(y=Reference.Brown), lty = 2, col = \"blue\") #Brown reference #> Warning: Transformation introduced infinite values in continuous y-axis #> Transformation introduced infinite values in continuous y-axis #> Warning: Removed 707 rows containing missing values (`geom_line()`). #> Warning: Removed 4153 rows containing missing values (`geom_line()`). dataset.LL.partial <-  dataset.LL %>% #dataset   filter_Date(start = \"2023-09-01\", length = days(1)) #use only one day  solar.reference <-   geom_line(aes(y=Reference), lty = 2, col = \"red\") #solar reference brown.reference <-   geom_line(aes(y=Reference.Brown), lty = 2, col = \"blue\") #Brown reference  dataset.LL.partial  %>%    gg_day(size = 0.25, facetting = FALSE) + #base plot   solar.reference + brown.reference #> Warning: Transformation introduced infinite values in continuous y-axis #> Transformation introduced infinite values in continuous y-axis"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"styling-data","dir":"Articles","previous_headings":"","what":"Styling Data","title":"What's in a Day?","text":"Let us finish task exploring styling options graph. built dataset ended last section. use several functions processing steps, noted rarely specify arguments functions. due workflow LightLogR provides start finish. techniques section specific LightLogR, rather show can readily use data processed package work standard plotting function. Firstly, though, much plot focuses values 1 lux, due logarithmic scaling. Thus cut lower y-axis 0.1. now, let us also disable warning messages missing infinite values (done non-visibly reader code chunks ).","code":"scale.correction <- coord_cartesian(   ylim = c(0.1, 10^5), # tweak the y axis   xlim = c(0, 24.5*60*60), #make sure the x axis covers 24 hours (+a bit for the label)   expand = FALSE)  #set the axis limits exactly at ylim and xlim"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"participants-light-exposure","dir":"Articles","previous_headings":"Styling Data","what":"Participants Light Exposure","title":"What's in a Day?","text":"default, gg_day() uses point geom data display. can, however, play around geoms. geom_point geom_line geom_ribbon geom_boxplot geom_hexplot  standard behavior gg_day(). specify geom = \"point\" case, verbose communicate specify argument.  line geom shows changes light exposure bit better might better choice case.  geom_area fills area 0 given value. Unfortunately doesn´t work nicely logarithmic plots (10^0 = 1, start 1). can, however, disable geom gg_day()instead add geom_ribbon can force set zero ymin = 0.  create boxplot representation, need specify geom also time interval want boxplot span. cut_Datetime() function LightLogR comes rescue. round datetimes desired interval, can specified group argument gg_day(). can nice representation, don´t think fits goal overall figure specific case.  geom family hex, bin2d, density_2d particularly well suited many, possibly overlaying observations. reduces complexity cutting x- y-axis bins counts many observations fall within bin. choosing 24 bins, see dominant values every hour day.","code":"dataset.LL.partial  %>%    gg_day(size = 0.25, geom = \"point\", facetting = FALSE) + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"line\") + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.25) + #ribbon geom   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    cut_Datetime(unit = \"0.5 hours\") %>% #provide an interval for the boxplot   gg_day(size = 0.25, facetting = FALSE, geom = \"boxplot\", group = Datetime.rounded) + #base plot   solar.reference + brown.reference + scale.correction dataset.LL.partial  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"bin2d\", bins = 24) + #base plot   solar.reference + brown.reference + scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"section","dir":"Articles","previous_headings":"","what":"What's in a Day?","title":"What's in a Day?","text":"Conclusion: line ribbon geom seem like good choice task. However, high resolution data (10 seconds) makes line noisy. Sometimes level detail good, figure give general representation light exposure, aggregate data somewhat. can use function boxplot, cut_Datetime() use aggregate data desired resolution. sake example, let´s create function try several aggregation times.","code":"dataset.LL.aggregate <- function(unit) {   if(unit != \"none\") dataset.LL.partial  %>%    cut_Datetime(unit = unit, group_by = TRUE) %>% #choose the resolution of our aggregated data   summarize(across(where(is.numeric), mean), #average all numerics             across(where(is.character), \\(x) names(which.max(table(x)))), #choose the dominant string             across(where(is.logical), \\(x) sum(x) > (length(x) / 2)), # average a binary outcome             .groups = \"drop_last\") %>% #remove the rounded Datetime group   rename(Datetime = Datetime.rounded) %>%  #remove the rounded Datetime column   select(-Reference.Brown) %>% #remove the rounded    Brown2reference(Brown.rec.colname = Reference.Brown) #recalculate the brown times     }"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"data-aggregation","dir":"Articles","previous_headings":"Styling Data","what":"Data aggregation","title":"What's in a Day?","text":"new aggregate function, let us taste variants: None 1 Minute 5 Minutes 30 Minutes 1 Hour","code":"dataset.LL.partial  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.25) + #ribbon geom   solar.reference + brown.reference + scale.correction dataset.LL.aggregate(\"1 min\")  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.25) + #ribbon geom   solar.reference + brown.reference + scale.correction dataset.LL.aggregate(\"5 mins\")  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.25) + #ribbon geom   solar.reference + brown.reference + scale.correction dataset.LL.aggregate(\"30 mins\")  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.25) + #ribbon geom   solar.reference + brown.reference + scale.correction dataset.LL.aggregate(\"1 hour\")  %>%    gg_day(size = 0.25, facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.25) + #ribbon geom   solar.reference + brown.reference + scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"section-1","dir":"Articles","previous_headings":"","what":"What's in a Day?","title":"What's in a Day?","text":"Conclusion: 1 minute aggregate still pretty noisy, whereas 30 minutes 1 hour steps rough. 5 Minutes seem good balance.","code":"Plot <-  dataset.LL.aggregate(\"5 mins\")  %>%    gg_day(facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.4) + #ribbon geom   brown.reference + scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"solar-potential-1","dir":"Articles","previous_headings":"Styling Data","what":"Solar Potential","title":"What's in a Day?","text":"Let us focus next solar potential harnessed participant. several choices represent . geom_line geom_ribbon second plot  base representation solar exposure. bad one . Let’s keep run know.  ribbon shows missed - night exceeded - potential due daylight.  plot requires bit preparation, focuses nicely unrealized daylight potential. reasons clarity, line color Brown recommendation changed blue red.","code":"Plot +    geom_line(aes(y=Reference), lty = 2, col = \"red\") #solar reference Plot +    geom_ribbon(aes(ymin = MEDI, ymax=Reference), alpha = 0.25, fill = \"#0073C2FF\") #solar reference #Note: This will become a function of its own in LightLogR at some point in the future  Plot_upper <-  dataset.LL.aggregate(\"5 mins\")  %>%    gg_day(facetting = FALSE, geom = \"blank\") + #base plot   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.25, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.4) + #ribbon geom   geom_line(aes(y=Reference.Brown), lty = 2, col = \"red\") + #Brown reference   geom_line(aes(y=Reference), col = \"#0073C2FF\", size = 0.4) + #solar reference   labs(x = NULL) +  #remove the x-axis label   scale.correction  Plot_lower <-    dataset.LL.aggregate(\"5 mins\")  %>%    gg_day(facetting = FALSE, geom = \"blank\", y.axis.label = \"unrealized Potential\") + #base plot   geom_area(     aes(y = Reference - MEDI,          group = consecutive_id((Reference - MEDI) >= 0),          fill = (Reference - MEDI) >= 0,          col = (Reference - MEDI) >= 0),      alpha = 0.25, outline.type = \"upper\") +    guides(fill = \"none\", col = \"none\") +    scale_y_continuous(     trans = \"symlog\",      breaks = c(-10^2, -10^1, -1, 0, 1, 10^1, 10^2, 10^3, 10^4, 10^5),      labels = function(x) format(x, scientific = FALSE, big.mark = \" \")) +    geom_hline(aes(yintercept = 0), lty = 2) +      scale_fill_manual(values = c(\"#EFC000\", \"#0073C2\")) +      scale_color_manual(values = c(\"#EFC000\", \"#0073C2\")) +    coord_cartesian(ylim = c(-10^2, 10^5), xlim = c(0, 24.5*60*60),expand = FALSE)  #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale. #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  Plot_upper / Plot_lower #set up the two plots"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"section-2","dir":"Articles","previous_headings":"","what":"What's in a Day?","title":"What's in a Day?","text":"Conclusion: second plot option nice, focuses one aspect - missed unrealized potential. geom_ribbon variant still includes information, general, exactly want .","code":"Day.end <- as_datetime(\"2023-09-01 23:59:59\", tz = tz) Plot <-  dataset.LL.aggregate(\"5 mins\") %>% filter_Datetime(end = Day.end) %>%    gg_day(facetting = FALSE, geom = \"blank\", y.axis.breaks = c(10^(0:5), 250)) + #base plot     geom_ribbon(aes(ymin = MEDI, ymax=Reference),                alpha = 0.25, fill = \"#0073C2FF\",               outline.type = \"upper\", col = \"#0073C2FF\", size = 0.15) + #solar reference   geom_ribbon(aes(ymin = 0, ymax = MEDI), alpha = 0.30, fill = \"#EFC000\",                outline.type = \"upper\", col = \"#EFC000\", size = 0.4) + #ribbon geom   scale.correction"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"brown-recommendations","dir":"Articles","previous_headings":"Styling Data","what":"Brown Recommendations","title":"What's in a Day?","text":"Brown recommendations add layer complexity, specify threshold reached exceeded, depending time day. can tackle aspect several ways. case, y-axis reflect datime threshhold value 250 lx. already considered y.axis.breaks argument code chunk . geom_line geom_rect geom_point  variant representation used throught document. Since light exposure daylight levels distinct terms color, however, line stay black.   geom_area function can draw target areas values.  approach uses conditional coloration points, depending whether personal light exposure within recommended limits.","code":"Plot +    geom_line(aes(y=Reference.Brown), lty = 2, size = 0.4, col = \"grey15\") #Brown reference #This section will be integrated into a LightLogR function in the future Day.start <- as_datetime(\"2023-09-01 00:00:00\", tz = tz) Day.end <- as_datetime(\"2023-09-01 23:59:59\", tz = tz) Interval <- interval(Day.start, Day.end, tz = tz) Brown.times <-    Brown.intervals %>%    filter(Interval %>% int_overlaps(.env$Interval)) %>%    mutate(ymin = case_match(State.Brown,                            \"night\"  ~ 0,                            \"day\" ~ 250,                            \"evening\" ~ 0),          ymax = case_match(State.Brown,                            \"night\"  ~ 1,                            \"day\" ~ Inf,                            \"evening\" ~ 10),          xmin = int_start(Interval),          xmax = int_end(Interval),          xmin = if_else(xmin < Day.start, Day.start, xmin)  %>% hms::as_hms(),          xmax = if_else(xmax > Day.end, Day.end, xmax) %>% hms::as_hms()          )  recommendations <-    geom_rect(     data = Brown.times,      aes(xmin= xmin, xmax = xmax, ymin = ymin, ymax = ymax),      inherit.aes = FALSE,     alpha = 0.15,     fill = \"grey35\")  Plot2 <- Plot Plot2$layers <- c(recommendations, Plot2$layers) Plot2 Plot2+geom_line(aes(y=Reference.Brown), lty = 2, size = 0.4, col = \"grey35\") Plot +    geom_point(aes(col = Reference.Brown.check), size = 0.5)+   geom_line(aes(y=Reference.Brown), lty = 2, size = 0.4, col = \"grey60\") + #Brown reference   scale_color_manual(values = c(\"grey50\", \"#EFC000\"))+   guides(color = \"none\") #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"section-3","dir":"Articles","previous_headings":"","what":"What's in a Day?","title":"What's in a Day?","text":"Conclusion: geom_point solution combines lot information designwise slim figure uses two colors (+grey) get many points across.","code":"Plot <-  Plot +    geom_point(aes(col = Reference.Brown.check), size = 0.5)+   geom_line(aes(y=Reference.Brown,                  # group = consecutive_id(State.Brown)                 ),              col = \"grey40\",             lty = 2, size = 0.4) + #Brown reference   scale_color_manual(values = c(\"grey50\", \"#EFC000\"))+   guides(color = \"none\")"},{"path":"https://tscnlab.github.io/LightLogR/articles/Styling.html","id":"final-touches","dir":"Articles","previous_headings":"Styling Data","what":"Final Touches","title":"What's in a Day?","text":"figure needs final touches can use , namely labels. Automatic guides labels work well use color palettes. , mostly specified coloring . Thus disabled automatic guides. Instead solve trough annotations.  concludes task. gone importing multiple source files final figure ready used publication. LightLogR facilitated importing processing steps also enabled us test various decisions, like choice geom time.aggregation.","code":"x <- 900  Brown.times <-    Brown.times %>%    mutate(xmean = (xmax - xmin)/2 + xmin,          label.Brown = case_match(State.Brown,                                   \"night\" ~ \"sleep\",                                   \"evening\" ~ \"pre-bed\",                                   .default = State.Brown))  Plot +    # geom_vline(data = Brown.times[-1,],   #            aes(xintercept = xmin), lty = 2, col = \"grey40\", size = 0.4) + #adding vertical lines   geom_label(data = Brown.times[-4,],               aes(x = xmean, y = 0.2, label = label.Brown),               col = \"grey40\", alpha = 0.75) + #adding labels   annotate(\"rect\", fill = \"white\", xmin = 0, xmax = 7.5*60*60,             ymin = 2500, ymax = 60000)+   annotate(\"text\", x=x, y = 1.7, label = \"Brown et al. (2022)\",             hjust = 0, col = \"grey25\")+   annotate(\"text\", x=x, y = 40000, label = \"- Exposure within\",             hjust = 0, col = \"#EFC000\")+   annotate(\"text\", x=x, y = 19500, label = \"  recommended levels or\",             hjust = 0, col = \"black\")+   annotate(\"text\", x=x, y = 10000, label = \"  outside\",             hjust = 0, col = \"grey50\")+   annotate(\"text\", x=x, y = 4000, label = \"- Daylight Potential\",             hjust = 0, col = \"#0073C2DD\")"},{"path":"https://tscnlab.github.io/LightLogR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Zauner. Author, maintainer. Manuel Spitschan. Author. EURAMET. Funder. TSCN-Lab. Copyright holder.            www.tscnlab.org","code":""},{"path":"https://tscnlab.github.io/LightLogR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zauner, J.; Spitschan, M. (2023): LightLogR: Working Wearable Light Logger Data. R Package, Available https://github.com/tscnlab/LightLogR","code":"@Misc{,   title = {LightLogR: Working With Wearable Light Logger Data},   author = {Johannes Zauner and Manuel Spitschan},   year = {2023},   url = {https://github.com/tscnlab/LightLogR}, }"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"lightlogr-","dir":"","previous_headings":"","what":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"Personalized light exposure data progressively gaining importance various sectors, including research, occupational affairs, fitness tracking. Data collected proliferating selection wearable loggers dosimeters, varying size, shape, functionality, output format. Despite maybe numerous use cases, field lacks unified framework collecting, validating, analyzing accumulated data. issue increases time expertise necessary handle data also compromises FAIRness (Findability, Accessibility, Interoperability, Reusability) results, especially meta-analyses.","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"please-note-that-lightlogr-is-work-in-progress-if-you-are-interested-in-the-project-and-want-to-know-more-please-give-us-a-message","dir":"","previous_headings":"","what":"Please note that LightLogR is work in progress! If you are interested in the project and want to know more, please give us a message","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"LightLogR package development part MeLiDos project address issues. MeLiDos joint, EURAMET-funded project involving sixteen partners across Europe, aimed developing metrology standard workflow wearable light logger data optical radiation dosimeters. primary contributions towards fostering FAIR data include development common file format, robust metadata descriptors, accompanying open-source software ecosystem. LightLogR aims provide tools : Generation data metadata files Conversion popular file formats Validation light logging data Verification crucial metadata Calculation common parameters Semi-automated analysis visualization (command-line GUI-based) Integration data unified database cross-study analyses LightLogR developed Translational Sensory & Circadian Neuroscience lab, joint group Technical University Munich Max Planck Institute Biological Cybernetics.","code":""},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"can install development version LightLogR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"tscnlab/LightLogR\")"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"quick starter use LightLogR.","code":"library(LightLogR) #these packages are just needed for the examples as shown. library(flextable) library(dplyr) library(ggplot2)"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"import","dir":"","previous_headings":"Example","what":"Import","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"can import light logger dataset ease. import functions give quick, helpful feedback dataset.","code":"filename <- system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\") dataset <- import.LYS(filename, tz = \"Europe/Berlin\") #> Successfully read in 11422 observations from LYS-file #> Timezone set is Europe/Berlin. #> Start: 2023-06-21 00:00:12 #> End: 2023-06-22 23:59:48 #> Timespan: 2 days #> Observation intervals:  #>   interval.time     n pct     #> 1 15 secs       10015 87.689% #> 2 16 secs        1367 11.969% #> 3 17 secs          23 0.201%  #> 4 18 secs          16 0.140%  dataset %>% select(Datetime, lux, kelvin, MEDI) %>%  slice(8000:8005) %>%    flextable() %>% autofit() #> Adding missing grouping variables: `Id`"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"visualize","dir":"","previous_headings":"Example","what":"Visualize","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"imported, LightLogR allows conveniently visualize data.  wide range options gg_day() function customize output. look reference page (?gg_day) see options. can also override defaults, e.g., different color, facetting, theme options.","code":"dataset %>% gg_day() #> Warning: Transformation introduced infinite values in continuous y-axis dataset %>%    gg_day(col = MEDI >= 250, scales = \"fixed\", size = 0.5) +    scale_color_discrete(type = c(\"orange\", \"skyblue\")) #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://tscnlab.github.io/LightLogR/index.html","id":"more-than-one-dataset","dir":"","previous_headings":"Example","what":"More than one dataset","title":"Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters","text":"built-dataset sample.data.environment shows combined dataset light logger data second set data - case unobstructed outdoor light measurements. Combined datasets can easily visualized gg_day(). col parameter used Source column dataset allows color separation. cut_Datetime() function, data can broken arbitrary time intervals. can used easily compare different datasets. Just put function dataset gg_day(). makes new variable available plotting: Datetime.rounded. Just make sure, geom parameter set boxplot group parameter uses info rounded time interval (Datetime.rounded) different datasets (Source). interaction function can easily combine . default interval cut_Datetime() 3 hours.","code":"sample.data.environment %>%    gg_day(     start.date = \"2023-08-18\",     y.axis = `MELANOPIC EDI`,     col = Source,     scales = \"fixed\",     geom = \"line\") #> Only Dates will be used from start.date and end.date input. If you also want to set Datetimes or Times, consider using the `filter_Datetime()` function instead. #> Warning: Transformation introduced infinite values in continuous y-axis sample.data.environment %>%    cut_Datetime() %>%    gg_day(     end.date = \"2023-08-15\",     y.axis = `MELANOPIC EDI`,     col = Source,     scales = \"fixed\",     geom = \"boxplot\",     group = interaction(Source, Datetime.rounded)) +    theme(legend.position = \"bottom\") #> Only Dates will be used from start.date and end.date input. If you also want to set Datetimes or Times, consider using the `filter_Datetime()` function instead. #> Warning: Transformation introduced infinite values in continuous y-axis #> Warning: Removed 3429 rows containing non-finite values (`stat_boxplot()`)."},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","title":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","text":"lower level function. checks given value threshold states given Brown et al. (2022). function vectorized. day threshold lower limit, evening night threshold upper limit.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","text":"","code":"Brown.check(   value,   state,   Brown.day = \"day\",   Brown.evening = \"evening\",   Brown.night = \"night\",   Brown.day.th = 250,   Brown.evening.th = 10,   Brown.night.th = 1 )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","text":"value Illuminance value check recommendation. needs numeric, can vector. state state Brown et al. (2022). Needs character vector length value. Brown.day, Brown.evening, Brown.night names states Brown et al. (2022). default values (\"day\", \"evening\", \"night\"), can changed names state different. Needs character scalar. Brown.day.th, Brown.evening.th, Brown.night.th thresholds states Brown et al. (2022). default values (250, 10, 1), can changed thresholds different. Needs numeric scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","text":"logical vector length value indicates whether value within recommended illuminance levels.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.check.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a value is within the recommended illuminance/MEDI levels by\nBrown et al. (2022) — Brown.check","text":"","code":"states <- c(\"day\", \"evening\", \"night\", \"day\") values <- c(100, 10, 1, 300) Brown.check(values, states) #> [1] FALSE  TRUE  TRUE  TRUE Brown.check(values, states, Brown.day.th = 100) #> [1] TRUE TRUE TRUE TRUE"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.rec.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","text":"lower level function. sets recommended illuminance/MEDI levels Brown et al. (2022) given state. function vectorized.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.rec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","text":"","code":"Brown.rec(   state,   Brown.day = \"day\",   Brown.evening = \"evening\",   Brown.night = \"night\",   Brown.day.th = 250,   Brown.evening.th = 10,   Brown.night.th = 1 )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.rec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","text":"state state Brown et al. (2022). Needs character vector. Brown.day, Brown.evening, Brown.night names states Brown et al. (2022). default values (\"day\", \"evening\", \"night\"), can changed names state different. Needs character scalar. Brown.day.th, Brown.evening.th, Brown.night.th thresholds states Brown et al. (2022). default values (250, 10, 1), can changed thresholds different. Needs numeric scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.rec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","text":"dataframe length state contains recommended illuminance/MEDI levels.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.rec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown.rec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the recommended illuminance/MEDI levels by Brown et al. (2022) — Brown.rec","text":"","code":"states <- c(\"day\", \"evening\", \"night\") Brown.rec(states) #> [1] 250  10   1 Brown.rec(states, Brown.day.th = 100) #> [1] 100  10   1"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"Adds several columns light logger dataset. requires column contains Brown states, e.g. \"daytime\", \"evening\", \"night\". function add column recommended illuminance, column checks illuminance dataset within recommended illuminance levels, column gives label reference.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"","code":"Brown2reference(   dataset,   MEDI.colname = MEDI,   Brown.state.colname = State.Brown,   Brown.rec.colname = Reference,   Reference.label = \"Brown et al. (2022)\",   overwrite.Reference = FALSE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"dataset dataframe contains column Brown states MEDI.colname name column contains MEDI values used checks Brown reference illuminance. Must part dataset. Brown.state.colname name column contains Brown states. Must part dataset. Brown.rec.colname name column contain recommended illuminance. Must part dataset, otherwise throw error. Reference.label label used reference. Expects character scalar. overwrite.Reference TRUE (defaults FALSE), function overwrite Brown.rec.colname column already exists. ... Additional arguments passed Brown.rec() Brown.check(). relevant correct names daytime states thresholds used within states. See documentation functions information.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"dataframe basis dataset contains added columns.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"lower level, function uses Brown.rec() Brown.check() create required information.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/Brown2reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Brown et al. (2022) reference illuminance to a dataset — Brown2reference","text":"","code":"#add Brown reference illuminance to some sample data testdata <- tibble::tibble(MEDI = c(100, 10, 1, 300),                   State.Brown = c(\"day\", \"evening\", \"night\", \"day\")) Brown2reference(testdata) #> # A tibble: 4 × 5 #>    MEDI State.Brown Reference Reference.check Reference.label     #>   <dbl> <chr>           <dbl> <lgl>           <chr>               #> 1   100 day               250 FALSE           Brown et al. (2022) #> 2    10 evening            10 TRUE            Brown et al. (2022) #> 3     1 night               1 TRUE            Brown et al. (2022) #> 4   300 day               250 TRUE            Brown et al. (2022)"},{"path":"https://tscnlab.github.io/LightLogR/reference/LightLogR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"LightLogR: Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters — LightLogR-package","title":"LightLogR: Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters — LightLogR-package","text":"LightLogR package development part MeLiDos project aimed developing standard workflow wearable light logger data optical radiation dosimeters. MeLiDos joint, EURAMET-funded project involving sixteen partners across Europe. primary contributions towards fostering FAIR data include development common file format, robust metadata descriptors, accompanying open-source software ecosystem.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/LightLogR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LightLogR: Work With Data from Wearable Light Loggers and Optical Radiation Dosimeters — LightLogR-package","text":"Maintainer: Johannes Zauner johannes.zauner@tum.de (ORCID) Authors: Manuel Spitschan manuel.spitschan@tum.de (ORCID) contributors: EURAMET [funder] TSCN-Lab (www.tscnlab.org) [copyright holder]","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Time.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Time-of-Day column in the dataset — create_Time.data","title":"Create a Time-of-Day column in the dataset — create_Time.data","text":"Create Time--Day column dataset","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Time.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Time-of-Day column in the dataset — create_Time.data","text":"","code":"create_Time.data(   dataset,   Datetime.colname = Datetime,   Time.data = Time.data,   output.dataset = TRUE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Time.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Time-of-Day column in the dataset — create_Time.data","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. Time.data Name newly created column. Expects symbol. default(Time.data) works well functions LightLogR. output.dataset output data.frame (Default TRUE) vector hms (FALSE) times? Expects logical scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Time.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Time-of-Day column in the dataset — create_Time.data","text":"data.frame object identical dataset added column Time--Day data, vector Time--Day-data","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/create_Time.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Time-of-Day column in the dataset — create_Time.data","text":"","code":"sample.data.environment %>% create_Time.data #> # A tibble: 69,120 × 4 #>    Datetime            `MELANOPIC EDI` Source      Time.data #>    <dttm>                        <dbl> <chr>       <time>    #>  1 2023-08-15 00:00:01               0 Participant 00'01\"    #>  2 2023-08-15 00:00:11               0 Participant 00'11\"    #>  3 2023-08-15 00:00:21               0 Participant 00'21\"    #>  4 2023-08-15 00:00:31               0 Participant 00'31\"    #>  5 2023-08-15 00:00:41               0 Participant 00'41\"    #>  6 2023-08-15 00:00:51               0 Participant 00'51\"    #>  7 2023-08-15 00:01:01               0 Participant 01'01\"    #>  8 2023-08-15 00:01:11               0 Participant 01'11\"    #>  9 2023-08-15 00:01:21               0 Participant 01'21\"    #> 10 2023-08-15 00:01:31               0 Participant 01'31\"    #> # ℹ 69,110 more rows"},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Datetime bins for visualization and calculation — cut_Datetime","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"cut_Datetime wrapper around lubridate::round_date() (friends) combined dplyr::mutate(), create new column light logger dataset specified binsize. can \"3 hours\", \"15 secs\", \"0.5 days\". useful step dataset visualization summary step.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"","code":"cut_Datetime(   dataset,   unit = \"3 hours\",   type = \"round\",   Datetime.colname = Datetime,   New.colname = Datetime.rounded,   group_by = FALSE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. unit Unit binning. See lubridate::round_date() examples. type One \"round\"(default), \"ceiling\" \"floor\". Setting chooses relevant function lubridate. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. New.colname Column name added column dataset. group_by data grouped new column? Defaults FALSE ... Parameter handed lubridate::round_date() siblings","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"data.frame object identical dataset added column binned datetimes.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/cut_Datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Datetime bins for visualization and calculation — cut_Datetime","text":"","code":"#compare Datetime and Datetime.rounded sample.data.environment %>%   cut_Datetime() %>%   dplyr::slice_sample(n = 5) #> # A tibble: 5 × 4 #>   Datetime            `MELANOPIC EDI` Source      Datetime.rounded    #>   <dttm>                        <dbl> <chr>       <dttm>              #> 1 2023-08-15 11:42:32          44983. Environment 2023-08-15 12:00:00 #> 2 2023-08-20 08:50:02          27618. Environment 2023-08-20 09:00:00 #> 3 2023-08-15 12:28:21           4327. Participant 2023-08-15 12:00:00 #> 4 2023-08-18 13:52:01           1650. Participant 2023-08-18 15:00:00 #> 5 2023-08-18 06:18:02            318. Environment 2023-08-18 06:00:00"},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Create reference data from other data — data2reference","title":"Create reference data from other data — data2reference","text":"Create reference data almost data datetime column data column. reference data can even created subsets data. Examples one participant can used reference participants, first (second,...) day every participant data reference day. function needs carefully handled, reference data time intervals shorter data time intervals. case, use aggregate_Datetime() reference data beforehand lenghten inteval.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create reference data from other data — data2reference","text":"","code":"data2reference(   dataset,   Reference.data = dataset,   Datetime.column = Datetime,   Data.column = MEDI,   ID.column = Id,   Reference.column = Reference,   overwrite.Reference = FALSE,   filter.expression.reference = NULL,   across.id = FALSE,   shift.start = FALSE,   length.restriction.seconds = 60,   shift.intervals = \"auto\",   Reference.label = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create reference data from other data — data2reference","text":"dataset light logger dataset Reference.data data used reference. default dataset used reference. Datetime.column Datetime column dataset Reference.data. Need sets. Default Datetime. Data.column Data column Reference.data converted reference. Default MEDI. ID.column Name ID.column dataset Reference.data. Reference.column Name reference column added dataset. Default Reference. column dataset throw error . overwrite.Reference TRUE (defaults FALSE), function overwrite Reference.colname column already exists. filter.expression.reference Expression used filter Reference.data used reference. Default NULL. See across.id Grouping variables ignored creating reference data. Default FALSE. TRUE, grouping variables ignored. FALSE, grouping variables ignored. vector grouping variables given, ignored. shift.start TRUE, reference data shifted start respective group. Default FALSE. shift ignores groups specified across.id. length.restriction.seconds Restricts application reference data maximum length seconds. Default 60 seconds. useful avoid reference data applied long periods time, e.g., gaps reference data shift.intervals Time shift seconds, applied every data point reference data. Default \"auto\". \"auto\", shift calculated halving frequent time difference two data points reference data. number given, number seconds used shift. Can also use lubridate::duration() specify shift. Reference.label Label added reference data. NULL, label added.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create reference data from other data — data2reference","text":"dataset new column Reference contains reference data.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create reference data from other data — data2reference","text":"use subsets data, use filter.expression.reference argument specify subsets data. across.id argument specifies whether reference data used across grouping variables (e.g., across participants). shift.start argument enables shift reference data start time start respective group. @examples information. expression evaluated within dplyr::filter().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/data2reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create reference data from other data — data2reference","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(ggplot2)  gg_reference <- function(dataset) { dataset %>% ggplot(aes(x = Datetime, y = `MELANOPIC EDI`, color = Source)) + geom_line(size = 1) + geom_line(aes(y = Reference), color = \"black\", size = 0.25, linetype = \"dashed\") + theme_minimal() + facet_wrap(~ Source, scales = \"free_y\") }  #in this example, each data point is its own reference sample.data.environment %>% group_by(Source) %>%   data2reference(Data.column = `MELANOPIC EDI`, ID.column = Source) %>%   gg_reference() #> Adding missing grouping variables: `Source` #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> Warning: Removed 2 rows containing missing values (`geom_line()`).   #in this example, the first day of each ID is the reference for the other days #this requires grouping of the Data by Day, which is then specified in across.id #also, shift.start needs to be set to TRUE, to shift the reference data to the #start of the groupings sample.data.environment %>% group_by(Source, Day = as_date(Datetime)) %>% data2reference(   Data.column = `MELANOPIC EDI`,   ID.column = Source,   filter.expression.reference =  as_date(Datetime) == min(as_date(Datetime)),   shift.start = TRUE,   across.id = \"Day\") %>%   gg_reference() #> Joining with `by = join_by(Source, Day)` #> Adding missing grouping variables: `Source`, `Day` #> Adding missing grouping variables: `Source` #> Joining with `by = join_by(Source)` #> Joining with `by = join_by(Source, Day)` #> Joining with `by = join_by(Source, Day)` #> Warning: Removed 2 rows containing missing values (`geom_line()`).   #in this example, the Environment Data will be used as a reference sample.data.environment %>% group_by(Source) %>% data2reference(   Data.column = `MELANOPIC EDI`,   ID.column = Source,   filter.expression.reference =  Source == \"Environment\",   across.id = TRUE) %>%   gg_reference() #> Adding missing grouping variables: `Source` #> Warning: Removed 4 rows containing missing values (`geom_line()`)."},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Datetimes in a dataset. — filter_Datetime","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"Filtering dataset based Dates Datetimes may often necessary prior calcuation visualization. functions allow filtering based simple strings Datetime scalars, specifying length. also support prior dplyr grouping, useful, e.g., want filter first two days measurement data every participant, regardless actual date. want filter based times day, look filter_Time().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"","code":"filter_Datetime(   dataset,   Datetime.colname = Datetime,   start = NULL,   end = NULL,   length = NULL,   full.day = FALSE,   tz = NULL,   filter.expr = NULL )  filter_Date(..., start = NULL, end = NULL)"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. start, end filter_Datetime() POSIXct character scalar form \"yyyy-mm-dd hh-mm-ss\" giving respective start end time positions filtered dataframe. want provide dates form \"yyyy-mm-dd\", use wrapper function filter_Date(). one start/end provided, times taken respective extreme values dataset. length provided one start/end , calculated based given value. length provided start/end NULL, time respective start taken. length Either Period Duration lubridate. E.g., days(2) + hours(12) give period 2.5 days, whereas ddays(2) + dhours(12) give duration. difference periods durations look documentation lubridate. Basically, periods model clocktimes, whereas durations model physical processes. matters several occasions, like leap years, daylight savings. full.day logical indicating wether start param rounded full day, length argument provided (Default FALSE). useful, e.g., first observation dataset slightly midnight. TRUE, count length midnight avoid empty days plotting gg_day(). tz Timezone start/end times. NULL (default), take timezone Datetime.colname column. filter.expr Advanced filtering conditions. NULL (default) given expression, used dplyr::filter() results. can useful filter, e.g. group-specific conditions, like starting first two days measurement (see examples). ... Parameter handed lubridate::round_date() siblings","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"data.frame object identical dataset specified Dates/Times.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Datetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Datetimes in a dataset. — filter_Datetime","text":"","code":"library(lubridate) library(dplyr) #baseline range.unfiltered <- sample.data.environment$Datetime %>% range() range.unfiltered #> [1] \"2023-08-15 00:00:01 UTC\" \"2023-08-20 23:59:51 UTC\"  #setting the start of a dataset sample.data.environment %>%  filter_Datetime(start = \"2023-08-18 12:00:00\") %>%  pull(Datetime) %>%  range() #> [1] \"2023-08-18 12:00:01 UTC\" \"2023-08-20 23:59:51 UTC\"  #setting the end of a dataset sample.data.environment %>% filter_Datetime(end = \"2023-08-18 12:00:00\") %>% pull(Datetime) %>% range() #> [1] \"2023-08-15 00:00:01 UTC\" \"2023-08-18 11:59:51 UTC\"  #setting a period of a dataset sample.data.environment %>% filter_Datetime(end = \"2023-08-18 12:00:00\", length = days(2)) %>% pull(Datetime) %>% range() #> [1] \"2023-08-16 12:00:01 UTC\" \"2023-08-18 11:59:51 UTC\"  #setting only the period of a dataset sample.data.environment %>% filter_Datetime(length = days(2)) %>% pull(Datetime) %>% range() #> [1] \"2023-08-15 00:00:01 UTC\" \"2023-08-17 00:00:01 UTC\"  #advanced filtering based on grouping (second day of each group) sample.data.environment %>% group_by(Source) %>%  #shift the \"Environment\" group by one day mutate( Datetime = ifelse(Source == \"Environment\", Datetime + ddays(1), Datetime) %>%  as_datetime()) -> sample sample %>% summarize(Daterange = paste(min(Datetime), max(Datetime), sep = \" - \")) #> # A tibble: 2 × 2 #>   Source      Daterange                                 #>   <chr>       <chr>                                     #> 1 Environment 2023-08-16 00:00:02 - 2023-08-21 23:59:32 #> 2 Participant 2023-08-15 00:00:01 - 2023-08-20 23:59:51 #now we can use the `filter.expr` argument to filter from the second day of each group sample %>%  filter_Datetime(filter.expr = Datetime > Datetime[1] + days(1)) %>%  summarize(Daterange = paste(min(Datetime), max(Datetime), sep = \" - \")) #> # A tibble: 2 × 2 #>   Source      Daterange                                 #>   <chr>       <chr>                                     #> 1 Environment 2023-08-17 00:00:32 - 2023-08-21 23:59:32 #> 2 Participant 2023-08-16 00:00:11 - 2023-08-20 23:59:51 sample.data.environment %>% filter_Date(end = \"2023-08-17\") #> # A tibble: 34,560 × 3 #>    Datetime            `MELANOPIC EDI` Source      #>    <dttm>                        <dbl> <chr>       #>  1 2023-08-15 00:00:01               0 Participant #>  2 2023-08-15 00:00:11               0 Participant #>  3 2023-08-15 00:00:21               0 Participant #>  4 2023-08-15 00:00:31               0 Participant #>  5 2023-08-15 00:00:41               0 Participant #>  6 2023-08-15 00:00:51               0 Participant #>  7 2023-08-15 00:01:01               0 Participant #>  8 2023-08-15 00:01:11               0 Participant #>  9 2023-08-15 00:01:21               0 Participant #> 10 2023-08-15 00:01:31               0 Participant #> # ℹ 34,550 more rows"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Times in a dataset. — filter_Time","title":"Filter Times in a dataset. — filter_Time","text":"Filter Times dataset.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Times in a dataset. — filter_Time","text":"","code":"filter_Time(   dataset,   Datetime.colname = Datetime,   start = NULL,   end = NULL,   length = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Times in a dataset. — filter_Time","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. start, end, length character scalar form \"hh-mm-ss\" giving respective start, end, length filtered dataframe. input can also come POSIXct datetime, time component used. one start/end provided, times taken respective extreme values dataset. length provided one start/end , calculated based given value. length provided start/end , time respective start taken.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Times in a dataset. — filter_Time","text":"data.frame object identical dataset specified Times.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/filter_Time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Times in a dataset. — filter_Time","text":"","code":"sample.data.environment %>% filter_Time(start = \"4:00:34\", length = \"12:00:00\") %>% dplyr::pull(Time.data) %>% range() %>% hms::as_hms() #> 04:00:41 #> 16:00:32"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simple plot of light logger data, facetted by Day — gg_day","title":"Create a simple plot of light logger data, facetted by Day — gg_day","text":"gg_day create simple ggplot every data dataset. result can manipulated like ggplot. sensible refine styling guides.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simple plot of light logger data, facetted by Day — gg_day","text":"","code":"gg_day(   dataset,   start.date = NULL,   end.date = NULL,   x.axis = Datetime,   y.axis = MEDI,   col = NULL,   group = NULL,   geom = \"point\",   scales = \"fixed\",   x.axis.breaks = hms::hms(hours = seq(0, 24, by = 3)),   y.axis.breaks = 10^(0:5),   y.scale.log10 = TRUE,   y.scale.sc = FALSE,   x.axis.label = \"Time of Day\",   y.axis.label = \"Light exposure (lx, MEDI)\",   format.day = \"%d/%m\",   title = NULL,   subtitle = NULL,   interactive = FALSE,   facetting = TRUE,   ... )"},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simple plot of light logger data, facetted by Day — gg_day","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable x.axis.. start.date, end.date Choose optional start end date within dataset. Expects date, can also character interpretable date, e.g., \"2023-06-03\". need Datetime want cut specific times day, use filter_Datetime function. Defaults NULL, means plot starts/ends earliest/latest date within dataset. x.axis, y.axis column name contains datetime (x, defaults \"Datetime\" automatically correct data imported LightLogR) dependent variable (y, defaults \"MEDI\", melanopic EDI, standard measure stimulus strength nonvisual effects light). Expects symbol. Needs part dataset. col optional column name defines separate sets colors . Expects anything works layer data ggplot2::aes(). default color palette can overwritten outside function (see examples). group Optional column name defines separate sets. Useful certain geoms like boxplot.Expects anything works layer data ggplot2::aes() geom geom used visualization? Expects character \"point\" ggplot2::geom_point() (default) \"line\"  ggplot2::geom_line() value just input geom_ function ggplot2, variants might work well, tested. scales ggplot2::facet_wrap(), scales \"fixed\", \"free\" free one dimension (\"free_y\" default). Expects character. x.axis.breaks, y.axis.breaks breaks occur x y.axis? Expects numeric vector breaks. want activate default behaviour ggplot2, need put ggplot2::waiver(). y.scale.log10 y scaled log10 basis? Expects logical. y.scale.sc logical whether scientific notation shall used. Defaults FALSE. x.axis.label, y.axis.label labels x- y-axis. Expects character. format.day Label day. Default %d/%m, shows day month. Expects character. overview sensible options look base::strptime() title Plot title. Expects character. subtitle Plot subtitle. Expects character. interactive plot interactive? Expects logical. Defaults FALSE. facetting automated facet day applie? Default TRUE uses Day.data variable function also creates present. ... options get passed main geom function. Can used adjust adjust size linetype.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simple plot of light logger data, facetted by Day — gg_day","text":"ggplot object","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a simple plot of light logger data, facetted by Day — gg_day","text":"Besides plotting, function creates two new variables given Datetime: Day.data factor used facetting ggplot2::facet_wrap(). Make sure use variable, change faceting manually. Also, function checks, whether variable already exists. , convert factor faceting variable. Time.data hms created hms::as_hms() used x.axis","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/gg_day.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simple plot of light logger data, facetted by Day — gg_day","text":"","code":"#use `col`for separation of different sets plot <- gg_day( sample.data.environment, scales = \"fixed\", end.date = \"2023-08-16\", x.axis = Datetime, y.axis = `MELANOPIC EDI`, y.axis.label = \"mEDI (lx)\", col = Source) #> Only Dates will be used from start.date and end.date input. If you also want to set Datetimes or Times, consider using the `filter_Datetime()` function instead. plot #> Warning: Transformation introduced infinite values in continuous y-axis   #you can easily overwrite the color scale afterwards plot + ggplot2::scale_color_discrete() #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. #> Warning: Transformation introduced infinite values in continuous y-axis   #or change the facetting plot + ggplot2::facet_wrap(~Day.data + Source) #> Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a light logger dataset or related data — import.Dataset","title":"Import a light logger dataset or related data — import.Dataset","text":"Imports dataset necessary transformations get right column formats. Unless specified otherwise, function set timezone data UTC. also enforce id separate different datasets order/arrange dataset within id.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a light logger dataset or related data — import.Dataset","text":"","code":"import.Dataset(device, ...)  import.ActLumus(   filename,   path = NULL,   n_max = Inf,   tz = \"UTC\",   ID.colname = Id,   auto.id = \".*\",   manual.id = NULL )  import.LYS(   filename,   path = NULL,   n_max = Inf,   tz = \"UTC\",   ID.colname = Id,   auto.id = \".*\",   manual.id = NULL )"},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a light logger dataset or related data — import.Dataset","text":"device device want import? every supported device, sample data file can use test function (see examples). Currently following devices supported (followed device.ext spec access sample file): \"ActLumus\" (ActLumus.txt) \"LYS\" (LYS.csv) ... Parameters get handed specific import functions filename Filename(s) Dataset. Can also contain filepath, path must NULL. Expects character. vector longer 1, multiple files read one Tibble. path Optional path dataset(s). NULL default. Expects character. n_max maximum number lines read. Default Inf. tz Timezone data. \"UTC\" default. Expects character. can look supported timezones OlsonNames(). ID.colname Lets specify column participant id. Expects symbol (Default Id). column used grouping (dplyr::group_by()). auto.id Id.colname column added dataset, Id can automatically extracted filename. argument expects regular expression regex default just give whole filename without file extension. manual.id argument NULL, ID column part dataset, character scalar used. Don´t use argument multiple files different participants used!.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a light logger dataset or related data — import.Dataset","text":"Tibble/Dataframe POSIXct column datetime","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a light logger dataset or related data — import.Dataset","text":"Id column already part dataset just use column. column present add column fill filename importfile (see param auto.id).","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Dataset.html","id":"imports-made-easy","dir":"Reference","previous_headings":"","what":"Imports made easy","title":"Import a light logger dataset or related data — import.Dataset","text":"set import functions provide convenient way import light logger data perfectly formatted add metadata, make visualizations analyses. number devices supported, import just work box. get overview, can simply call supported.devices dataset. list grow continuously package maintained.   import file, simple specify filename (path) feed import.Dataset function. sample datasets devices. import functions provide basic overview data import, intervals measurements start end dates.   Import functions can also called directly:     Id Datetime TEMPERATURE LIGHT MEDI sample_data_ActLumus 2023-07-14 13:04:18 29.88 21,847.64 20,660.74 sample_data_ActLumus 2023-07-14 13:05:18 29.88 22,033.77 20,834.91 sample_data_ActLumus 2023-07-14 13:06:18 29.81 21,769.50 20,600.82 sample_data_ActLumus 2023-07-14 13:07:18 29.69 21,177.20 20,061.68 sample_data_ActLumus 2023-07-14 13:08:18 29.44 20,738.98 19,662.14 sample_data_ActLumus 2023-07-14 13:09:18 29.31 20,255.17 19,203.94","code":"supported.devices #> [1] \"LYS\"      \"ActLumus\" filepath <- system.file(\"extdata/sample_data_LYS.csv\", package = \"LightLogR\") dataset <- import.Dataset(\"LYS\", filepath) #> Successfully read in 11422 observations from LYS-file #> Timezone set is UTC. #> The system timezone is Europe/Berlin. Please correct if necessary! #> Start: 2023-06-21 00:00:12 #> End: 2023-06-22 23:59:48 #> Timespan: 2 days #> Observation intervals:  #>   interval.time     n pct     #> 1 15 secs       10015 87.689% #> 2 16 secs        1367 11.969% #> 3 17 secs          23 0.201%  #> 4 18 secs          16 0.140% filepath <- system.file(\"extdata/sample_data_ActLumus.txt\", package = \"LightLogR\") dataset <- import.ActLumus(filepath) #> Successfully read in 2065 observations from ActLumus-file #> Timezone set is UTC. #> The system timezone is Europe/Berlin. Please correct if necessary! #> Start: 2023-06-23 11:57:14 #> End: 2023-07-14 22:30:30 #> Timespan: 21 days #> Observation intervals:  #>   interval.time       n pct   #> 1     1.0000 mins  2059 100%  #> 2     2.2000 mins     1 0%    #> 3   188.7333 mins     1 0%    #> 4   300.9000 mins     1 0%    #> 5  1014.5333 mins     1 0%    #> 6 27307.9000 mins     1 0% dataset %>% dplyr::select(Datetime, TEMPERATURE, LIGHT, MEDI) %>% dplyr::slice(1500:1505) %>% flextable::flextable() %>% flextable::autofit() #> Adding missing grouping variables: `Id`"},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Statechanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data that contain Datetimes of Statechanges — import.Statechanges","title":"Import data that contain Datetimes of Statechanges — import.Statechanges","text":"Auxiliary data greatly enhances data analysis. function allows import files contain Statechanges, .e., specific time points State (like sleep wake) starts.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Statechanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data that contain Datetimes of Statechanges — import.Statechanges","text":"","code":"import.Statechanges(   filename,   path = NULL,   sep = \",\",   dec = \".\",   structure = \"wide\",   Datetime.format = \"ymdHMS\",   tz = \"UTC\",   State.colnames,   State.encoding = State.colnames,   Datetime.column = Datetime,   ID.colname,   State.newname = State,   ID.newname = Id,   keepAllColumns = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Statechanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data that contain Datetimes of Statechanges — import.Statechanges","text":"filename Filename(s) Dataset. Can also contain filepath, path must NULL. Expects character. vector longer 1, multiple files read one Tibble. path Optional path dataset(s). NULL default. Expects character. sep String separates columns import file. Defaults \",\". dec String indicates decimal separator import file. Defaults \".\". structure String specifies whether import file long wide format. Defaults \"wide\". Datetime.format String specifies format Datetimes file. default \"ymdHMS\" specifies format like \"2023-07-10 10:00:00\". function, lubridate::parse_date_time() actual conversion - documentation can searched valid inputs. tz Timezone data. \"UTC\" default. Expects character. can look supported timezones OlsonNames(). State.colnames Column name vector column names (latter wide format). Expects character. wide format, column names indicate State must contain Datetimes. columns pivoted columns specified Datetime.column State.newname. long format, column contains State State.encoding wide format, enables recoding column names state names, differences. default uses State.colnames argument. Expects character (vector) length State.colnames. Datetime.column Symbol Datetime column (also default). wide format, newly created column Datetimes State.colnames. long format, existing column contains Datetimes. ID.colname Symbol column contains ID subject. State.newname Symbol column contain State subject. wide format, newly created column State.colnames. long format, argument used rename State column. ID.newname Column name used renaming ID.colname column. keepAllColumns Logical specifies whether columns kept output. Defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Statechanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data that contain Datetimes of Statechanges — import.Statechanges","text":"dataset ID, State, Datetime columns. May contain additional columns keepAllColumns TRUE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Statechanges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data that contain Datetimes of Statechanges — import.Statechanges","text":"Data can present long wide format. wide format, multiple Datetime columns indicate state column name. get pivoted long format can recoded State.encoding argument. long format, one column indicates State, gives Datetime.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/import.Statechanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data that contain Datetimes of Statechanges — import.Statechanges","text":"","code":"#get the example file from within the package path <- system.file(\"extdata/\", package = \"LightLogR\") file.sleep <- \"205_sleepdiary_all_20230904.csv\"  #import Data in the wide format (sleep/wake times) import.Statechanges(file.sleep, path, Datetime.format = \"dmyHM\", State.colnames = c(\"sleep\", \"offset\"), State.encoding = c(\"sleep\", \"wake\"), ID.colname = record_id, sep = \";\", dec = \",\") #> # A tibble: 14 × 3 #> # Groups:   Id [1] #>    Id    State Datetime            #>    <fct> <chr> <dttm>              #>  1 205   sleep 2023-08-28 23:20:00 #>  2 205   wake  2023-08-29 09:37:00 #>  3 205   sleep 2023-08-29 23:40:00 #>  4 205   wake  2023-08-30 09:21:00 #>  5 205   sleep 2023-08-30 23:15:00 #>  6 205   wake  2023-08-31 09:47:00 #>  7 205   sleep 2023-08-31 23:15:00 #>  8 205   wake  2023-09-01 09:30:00 #>  9 205   sleep 2023-09-01 23:10:00 #> 10 205   wake  2023-09-02 09:10:00 #> 11 205   sleep 2023-09-02 22:55:00 #> 12 205   wake  2023-09-03 08:47:00 #> 13 205   sleep 2023-09-03 21:30:00 #> 14 205   wake  2023-09-04 07:25:00  #import in the long format (Comments on sleep) import.Statechanges(file.sleep, path,                    Datetime.format = \"dmyHM\",                    State.colnames = \"comments\",                    Datetime.column = sleep,                    ID.colname = record_id,                    sep = \";\",                    dec = \",\", structure = \"long\") #> # A tibble: 7 × 3 #> # Groups:   Id [1] #>   Id    State                                                Datetime            #>   <fct> <chr>                                                <dttm>              #> 1 205   woke Up and could Not Fall asleep. went to the dini… 2023-09-01 23:10:00 #> 2 205   none                                                 2023-09-02 22:55:00 #> 3 205   no                                                   2023-09-03 21:30:00 #> 4 205   Slept longer than usual since my kids are on Summer… 2023-08-28 23:20:00 #> 5 205   no                                                   2023-08-29 23:40:00 #> 6 205   Kids slept in my bed                                 2023-08-30 23:15:00 #> 7 205   none                                                 2023-08-31 23:15:00"},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a state column to a dataset from interval data — interval2state","title":"Adds a state column to a dataset from interval data — interval2state","text":"function can make use Interval data contain States (like \"sleep\", \"wake\", \"wear\") add column light logger dataset, State  every Datetime specified, based participant's ID.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a state column to a dataset from interval data — interval2state","text":"","code":"interval2state(   dataset,   State.interval.dataset,   Datetime.colname = Datetime,   State.colname = State,   Interval.colname = Interval,   ID.colname.dataset = Id,   ID.colname.interval = Id,   output.dataset = TRUE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a state column to a dataset from interval data — interval2state","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. State.interval.dataset Name dataset contains State Interval columns. Interval data can created, e.g., sc2interval(). Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. State.colname, Interval.colname Column names State Interval State.interval.dataset. Expects symbol. ID.colname.dataset, ID.colname.interval Column names participant's Id dataset State.interval.dataset. -chance inconsistencies, names can different. datasets imported preprocessed LightLogR, just works. datasets need Id, states added based Datetime, also depending dataset. output.dataset output data.frame (Default TRUE) vector hms (FALSE) times? Expects logical scalar.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a state column to a dataset from interval data — interval2state","text":"One data.frame object identical dataset state column added vector states","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/interval2state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a state column to a dataset from interval data — interval2state","text":"","code":"#create a interval dataset library(tibble) library(dplyr) library(lubridate) states <- tibble::tibble(Datetime = c(\"2023-08-15 6:00:00\",                                       \"2023-08-15 23:00:00\",                                       \"2023-08-16 6:00:00\",                                       \"2023-08-16 22:00:00\",                                       \"2023-08-17 6:30:00\",                                       \"2023-08-18 1:00:00\",                                       \"2023-08-18 6:00:00\",                                       \"2023-08-18 22:00:00\",                                       \"2023-08-19 6:00:00\",                                       \"2023-08-19 23:00:00\",                                       \"2023-08-20 6:00:00\",                                       \"2023-08-20 22:00:00\"),                          State = rep(c(\"wake\", \"sleep\"), 6),                          Id = \"Participant\") intervals <- sc2interval(states)  #create a dataset with states dataset_with_states <- sample.data.environment %>% group_by(Source) %>% interval2state(State.interval.dataset = intervals,                ID.colname.dataset = Source)  #visualize the states - note that the states are only added to the respective ID in the dataset? library(ggplot2) ggplot(dataset_with_states, aes(x = Datetime, y = `MELANOPIC EDI`, color = State)) +  geom_point() +  facet_wrap(~Source, ncol = 1)"},{"path":"https://tscnlab.github.io/LightLogR/reference/join.datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Join similar Datasets — join.datasets","title":"Join similar Datasets — join.datasets","text":"Join Light logging datasets common structure. least commonality identical columns Datetime Id across sets.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/join.datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join similar Datasets — join.datasets","text":"","code":"join.datasets(   ...,   Datetime.column = Datetime,   ID.column = Id,   preserve.name = FALSE,   debug = FALSE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/join.datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join similar Datasets — join.datasets","text":"... Object names datasets need joined. Datetime.column, ID.column Column names Datetime id columns. defaults (Datetime, Id) already set data imported LightLogR. preserve.name column named dataset joined data indicate dataset observation originated? Defaults FALSE Id column suffice. Expects logical. debug Output changes tibble indicating dataset missing respective Datetime Id column. Expects logical defaults FALSE.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/join.datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join similar Datasets — join.datasets","text":"One data.frame joined datasets tibble datasets missing columns. debug = TRUE","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/join.datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join similar Datasets — join.datasets","text":"","code":"#load in two datasets path <- system.file(\"extdata\",  package = \"LightLogR\") file.LL <- \"205_actlumus_Log_1020_20230904101707532.txt.zip\" file.env <- \"cyepiamb_CW35_Log_1431_20230904081953614.txt.zip\" dataset.LL <- import.ActLumus(file.LL, path, auto.id = \"^(\\\\d{3})\") #> Multiple files in zip: reading '205_actlumus_Log_1020_20230904101707532.txt' #> Successfully read in 61016 observations from ActLumus-file #> Timezone set is UTC. #> Start: 2023-08-28 08:47:54 #> End: 2023-09-04 10:17:04 #> Timespan: 7.1 days #> Observation intervals:  #>   interval.time     n pct   #> 1 10 secs       61015 100%  dataset.env <- import.ActLumus(file.env, path, manual.id = \"CW35\") #> Multiple files in zip: reading 'cyepiamb_CW35_Log_1431_20230904081953614.txt' #> Successfully read in 20143 observations from ActLumus-file #> Timezone set is UTC. #> Start: 2023-08-28 08:28:39 #> End: 2023-09-04 08:19:38 #> Timespan: 7 days #> Observation intervals:  #>   interval.time     n pct   #> 1 29 secs           1 0%    #> 2 30 secs       20141 100%   #join the datasets joined <- join.datasets(dataset.LL, dataset.env)  #compare the number of rows nrow(dataset.LL) + nrow(dataset.env) == nrow(joined) #> [1] TRUE  #debug, when set to TRUE, will output a tibble of datasets with missing necessary columns dataset.LL <- dataset.LL %>% dplyr::select(-Datetime) join.datasets(dataset.LL, dataset.env, debug = TRUE) #> # A tibble: 2 × 2 #>   column.names.in dataset.LL #>   <chr>           <lgl>      #> 1 Datetime        FALSE      #> 2 Id              TRUE"},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample of wearable data combined with environmental data — sample.data.environment","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"subset data study TSCN-Lab using ActLumus light logger. dataset contains personal light exposure information one participant course five full days. dataset measured 10 second epoch complete (missing values). Additionally environmental light data captured second light logger mounted horizontally TUM university roof, without obstructions (besides transparent plastic halfdome). epoch data 30 seconds. dataset allows interesting calculations based available daylight given point time.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"","code":"sample.data.environment"},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"sample.data.environment tibble 69,120 rows 3 columns: Datetime POSIXct Datetime MELANOPIC EDI melanopic EDI measurement data. Unit lux. Source character vector indicating whether data Participant Environment.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sample.data.environment.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample of wearable data combined with environmental data — sample.data.environment","text":"https://www.tscnlab.org","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Statechange (sc) Timestamps to Intervals — sc2interval","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"Takes input datetimes Statechanges creates column Intervals. full = TRUE, also create intervals day prior first state change last. output.dataset = FALSE give named vector, otherwise tibble. state change info requires description name state (like \"sleep\" \"wake\", \"wear\") goes effect given Datetime. Works grouped data mix intervals participants. Missing data explicit possible. Also, maximum allowed length interval can set, implicit missing timestamps set period times can enforced.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"","code":"sc2interval(   dataset,   Datetime.colname = Datetime,   Statechange.colname = State,   State.colname = State,   Interval.colname = Interval,   full = TRUE,   full.first = NA,   output.dataset = TRUE,   Datetime.keep = FALSE,   length.restriction = 60 * 60 * 24 )"},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"dataset light logger dataset. Expects dataframe. imported LightLogR, take care choose sensible variable Datetime.colname. Datetime.colname column name contains datetime. Defaults \"Datetime\" automatically correct data imported LightLogR. Expects symbol. Needs part dataset. Statechange.colname, Interval.colname, State.colname Column names contain name/description state change contain Interval State (also default). Expects symbol. Statechange column needs part dataset. full, full.first arguments handle state first day first state change last state change last day. full = TRUE(default, expects logical), create interval first day 00:00:00 state change. interval given state specified full.first, NA default, can character scalar. extend interval last state change end last given day (specifically 00:00:00 next day). output.dataset output data.frame (Default TRUE) vector hms (FALSE) times? Expects logical scalar. Datetime.keep TRUE, original Datetime column kept. length.restriction length intervals great, interval state can set NA, effectively produces gap data. makes sense intervals implausibly wrong (e.g. someone slept 50 hours), data combined light logger data, e.g., interval2state(), metrics visualizations remove interval.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"One data.frame object identical dataset interval instead datetime. original Statechange column now indicates State Interval. named vector intervals, names states","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sc2interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statechange (sc) Timestamps to Intervals — sc2interval","text":"","code":"library(tibble) library(lubridate) library(dplyr) sample <- tibble::tibble(Datetime = c(\"2023-08-15 6:00:00\",                                       \"2023-08-15 23:00:00\",                                       \"2023-08-16 6:00:00\",                                       \"2023-08-16 22:00:00\",                                       \"2023-08-17 6:30:00\",                                       \"2023-08-18 1:00:00\"),                          State = rep(c(\"wake\", \"sleep\"), 3),                          Id = \"Participant\") #intervals from sample sc2interval(sample) #> # A tibble: 8 × 3 #>   State Id          Interval                                         #>   <chr> <chr>       <Interval>                                       #> 1 NA    NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #> 2 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 3 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> 4 wake  Participant 2023-08-16 06:00:00 UTC--2023-08-16 22:00:00 UTC #> 5 sleep Participant 2023-08-16 22:00:00 UTC--2023-08-17 06:30:00 UTC #> 6 wake  Participant 2023-08-17 06:30:00 UTC--2023-08-18 01:00:00 UTC #> 7 sleep Participant 2023-08-18 01:00:00 UTC--2023-08-19 00:00:00 UTC #> 8 NA    NA          2023-08-19 00:00:00 UTC--NA                       #compare sample (y) and intervals (x) sc2interval(sample) %>%  mutate(Datetime = int_start(Interval)) %>%  dplyr::left_join(sample, by = c(\"Id\", \"State\"),                   relationship = \"many-to-many\") %>%  head() #> # A tibble: 6 × 5 #>   State Id          Interval                                         #>   <chr> <chr>       <Interval>                                       #> 1 NA    NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #> 2 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 3 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 4 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 5 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> 6 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> # ℹ 2 more variables: Datetime.x <dttm>, Datetime.y <chr>"},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep.int2Brown.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","text":"Takes dataset sleep/wake intervals recodes Brown state intervals. Specifically, recodes sleep intervals night, reduces wake intervals specified evening.length recodes evening day intervals. evening.length time day night. result can used input interval2state() might used subsequently Brown2reference().","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep.int2Brown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","text":"","code":"sleep.int2Brown(   dataset,   Interval.colname = Interval,   Sleep.colname = State,   wake.state = \"wake\",   sleep.state = \"sleep\",   Brown.day = \"day\",   Brown.evening = \"evening\",   Brown.night = \"night\",   evening.length = lubridate::dhours(3),   Brown.state.colname = State.Brown,   output.dataset = TRUE )"},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep.int2Brown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","text":"dataset dataset sleep/wake intervals. Interval.colname name column intervals. Defaults Interval. Sleep.colname name column sleep/wake states. Defaults State. wake.state, sleep.state names wake sleep states Sleep.colname. Default \"wake\" \"sleep\". Expected character scalar must exact match. Brown.day, Brown.evening, Brown.night names Brown states used. Defaults \"day\", \"evening\" \"night\". evening.length length evening interval seconds. Can also use lubridate duration period objects. Defaults 3 hours. Brown.state.colname name column newly created Brown states. Works simple renaming Sleep.colname. output.dataset Whether return whole dataset vector Brown states.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep.int2Brown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","text":"dataset Brown states vector Brown states. Brown states created new column name specified Brown.state.colname. dataset rows original dataset, wake intervals split day evening intervals.","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep.int2Brown.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","text":"https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.3001571","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/reference/sleep.int2Brown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Sleep/Wake intervals to Brown state intervals — sleep.int2Brown","text":"","code":"#create a sample dataset sample <- tibble::tibble(Datetime = c(\"2023-08-15 6:00:00\",                                          \"2023-08-15 23:00:00\",                                          \"2023-08-16 6:00:00\",                                          \"2023-08-16 22:00:00\",                                          \"2023-08-17 6:30:00\",                                          \"2023-08-18 1:00:00\"),                          State = rep(c(\"wake\", \"sleep\"), 3),                          Id = \"Participant\") #intervals from sample sc2interval(sample)  #> # A tibble: 8 × 3 #>   State Id          Interval                                         #>   <chr> <chr>       <Interval>                                       #> 1 NA    NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #> 2 wake  Participant 2023-08-15 06:00:00 UTC--2023-08-15 23:00:00 UTC #> 3 sleep Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #> 4 wake  Participant 2023-08-16 06:00:00 UTC--2023-08-16 22:00:00 UTC #> 5 sleep Participant 2023-08-16 22:00:00 UTC--2023-08-17 06:30:00 UTC #> 6 wake  Participant 2023-08-17 06:30:00 UTC--2023-08-18 01:00:00 UTC #> 7 sleep Participant 2023-08-18 01:00:00 UTC--2023-08-19 00:00:00 UTC #> 8 NA    NA          2023-08-19 00:00:00 UTC--NA                      #recoded intervals                        sc2interval(sample) %>% sleep.int2Brown() #> # A tibble: 11 × 3 #>    State.Brown Id          Interval                                         #>    <chr>       <chr>       <Interval>                                       #>  1 NA          NA          2023-08-15 00:00:00 UTC--2023-08-15 06:00:00 UTC #>  2 day         Participant 2023-08-15 06:00:00 UTC--2023-08-15 20:00:00 UTC #>  3 evening     Participant 2023-08-15 20:00:00 UTC--2023-08-15 23:00:00 UTC #>  4 night       Participant 2023-08-15 23:00:00 UTC--2023-08-16 06:00:00 UTC #>  5 day         Participant 2023-08-16 06:00:00 UTC--2023-08-16 19:00:00 UTC #>  6 evening     Participant 2023-08-16 19:00:00 UTC--2023-08-16 22:00:00 UTC #>  7 night       Participant 2023-08-16 22:00:00 UTC--2023-08-17 06:30:00 UTC #>  8 day         Participant 2023-08-17 06:30:00 UTC--2023-08-17 22:00:00 UTC #>  9 evening     Participant 2023-08-17 22:00:00 UTC--2023-08-18 01:00:00 UTC #> 10 night       Participant 2023-08-18 01:00:00 UTC--2023-08-19 00:00:00 UTC #> 11 NA          NA          2023-08-19 00:00:00 UTC--NA"},{"path":"https://tscnlab.github.io/LightLogR/reference/supported.devices.html","id":null,"dir":"Reference","previous_headings":"","what":"A vector of all supported devices for import functions — supported.devices","title":"A vector of all supported devices for import functions — supported.devices","text":"vector supported devices import functions","code":""},{"path":"https://tscnlab.github.io/LightLogR/reference/supported.devices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A vector of all supported devices for import functions — supported.devices","text":"","code":"supported.devices"},{"path":"https://tscnlab.github.io/LightLogR/reference/supported.devices.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A vector of all supported devices for import functions — supported.devices","text":"supported.devices character vector, listing supported devices suppored.devices strings","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-0209000","dir":"Changelog","previous_headings":"","what":"LightLogR 0.2.0.9000","title":"LightLogR 0.2.0.9000","text":"Added Unit tests documentation new functions. filter_Datetime() filter_Date() added option filter group specific dates. Added family functions around States Reference import, process, add states light logger data, like sleep/wake times, wear times, data. family includes import.Statechanges(), sc2interval(), ìnterval2state(), data2reference(), sleep.int2Brown(), Brown.check(), Brown.rec(), Brown2reference(). Added Article/Vignette “´s Day” demonstrate LightLogR workflow. Added convenience function create_Time.data() create Time--Day column datasets. Added family filter_Datetime(), filter_Date() filter_Time() functions easily filter datasets. Added unit tests first functions. Added several helper functions work states like sleep wear times. Added automatic ID creation import streamlined import functions. Added function join.datasets combine imported datasets sensible constraints.","code":""},{"path":[]},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"gg_day-0-1-1-9000","dir":"Changelog","previous_headings":"","what":"gg_day():","title":"LightLogR 0.1.1.9000","text":"Added major grid marks y-axis. Added message using start end dates make clear, Date portion input used. Changed behavior, already Day.data column present data. create new column none present, otherwise use existing column faceting (factorization) Added option create interactive plot feeding plot [plotly] package.","code":""},{"path":"https://tscnlab.github.io/LightLogR/news/index.html","id":"lightlogr-0109000","dir":"Changelog","previous_headings":"","what":"LightLogR 0.1.0.9000","title":"LightLogR 0.1.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
